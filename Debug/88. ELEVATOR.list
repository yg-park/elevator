
88. ELEVATOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbec  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000294  0800cd9c  0800cd9c  0001cd9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d030  0800d030  00020114  2**0
                  CONTENTS
  4 .ARM          00000008  0800d030  0800d030  0001d030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d038  0800d038  00020114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d038  0800d038  0001d038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d03c  0800d03c  0001d03c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000114  20000000  0800d040  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020114  2**0
                  CONTENTS
 10 .bss          000055bc  20000114  20000114  00020114  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200056d0  200056d0  00020114  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002bf28  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005781  00000000  00000000  0004c06c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002248  00000000  00000000  000517f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002028  00000000  00000000  00053a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00007b50  00000000  00000000  00055a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002a422  00000000  00000000  0005d5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010504d  00000000  00000000  000879d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0018ca1f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009954  00000000  00000000  0018ca70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000114 	.word	0x20000114
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800cd84 	.word	0x0800cd84

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000118 	.word	0x20000118
 80001ec:	0800cd84 	.word	0x0800cd84

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <get_button>:
	}
}
// get_button(gpio, pin, button번호)
// 완전히 눌렀다 떼면 BUTTON_RELEASE(1) 을 return
int get_button(GPIO_TypeDef *GPIO, uint16_t GPIO_PIN, uint8_t button_number)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	460b      	mov	r3, r1
 800059e:	807b      	strh	r3, [r7, #2]
 80005a0:	4613      	mov	r3, r2
 80005a2:	707b      	strb	r3, [r7, #1]
	unsigned char curr_state;

	curr_state=HAL_GPIO_ReadPin(GPIO, GPIO_PIN);  // 0, 1
 80005a4:	887b      	ldrh	r3, [r7, #2]
 80005a6:	4619      	mov	r1, r3
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f003 fddf 	bl	800416c <HAL_GPIO_ReadPin>
 80005ae:	4603      	mov	r3, r0
 80005b0:	73fb      	strb	r3, [r7, #15]
	// 버튼이 눌려졌으나 처음 상태
	if (curr_state == BUTTON_PRESS && button_status[button_number]==BUTTON_RELEASE)
 80005b2:	7bfb      	ldrb	r3, [r7, #15]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d10d      	bne.n	80005d4 <get_button+0x40>
 80005b8:	787b      	ldrb	r3, [r7, #1]
 80005ba:	4a11      	ldr	r2, [pc, #68]	; (8000600 <get_button+0x6c>)
 80005bc:	5cd3      	ldrb	r3, [r2, r3]
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d108      	bne.n	80005d4 <get_button+0x40>
	{
		HAL_Delay(80);  // noise가 지나가기를 기다린다.
 80005c2:	2050      	movs	r0, #80	; 0x50
 80005c4:	f002 fada 	bl	8002b7c <HAL_Delay>
		button_status[button_number]=BUTTON_PRESS;   // 현재의 버튼 상태를 저장
 80005c8:	787b      	ldrb	r3, [r7, #1]
 80005ca:	4a0d      	ldr	r2, [pc, #52]	; (8000600 <get_button+0x6c>)
 80005cc:	2100      	movs	r1, #0
 80005ce:	54d1      	strb	r1, [r2, r3]
		return BUTTON_RELEASE;  // 버튼이 눌려진 상태이나 아직은 noise상태로 인정
 80005d0:	2301      	movs	r3, #1
 80005d2:	e011      	b.n	80005f8 <get_button+0x64>
	}
	else if (curr_state == BUTTON_RELEASE && button_status[button_number]==BUTTON_PRESS)
 80005d4:	7bfb      	ldrb	r3, [r7, #15]
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d10d      	bne.n	80005f6 <get_button+0x62>
 80005da:	787b      	ldrb	r3, [r7, #1]
 80005dc:	4a08      	ldr	r2, [pc, #32]	; (8000600 <get_button+0x6c>)
 80005de:	5cd3      	ldrb	r3, [r2, r3]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d108      	bne.n	80005f6 <get_button+0x62>
	{     // 1. 이전에 버튼이 눌려진 상태였고 지금은 버튼을 뗀 상태 이면
		HAL_Delay(30);  // noise가 지나가기를 기다린다.
 80005e4:	201e      	movs	r0, #30
 80005e6:	f002 fac9 	bl	8002b7c <HAL_Delay>
		button_status[button_number]=BUTTON_RELEASE;  // 2. button_status table을 초기화 하고
 80005ea:	787b      	ldrb	r3, [r7, #1]
 80005ec:	4a04      	ldr	r2, [pc, #16]	; (8000600 <get_button+0x6c>)
 80005ee:	2101      	movs	r1, #1
 80005f0:	54d1      	strb	r1, [r2, r3]
		return BUTTON_PRESS;   // 3. 버튼을 1번 눌렀다 뗀것으로 인정 한다.
 80005f2:	2300      	movs	r3, #0
 80005f4:	e000      	b.n	80005f8 <get_button+0x64>
	}
	return BUTTON_RELEASE;
 80005f6:	2301      	movs	r3, #1
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000000 	.word	0x20000000

08000604 <init_dotmatrix_stop>:
	{
		HAL_GPIO_WritePin(col_port[i], col_pin[i], 1);
	}
}
void init_dotmatrix_stop(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
	for (int i = 0; i < 8; i++)
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
 800060e:	e00b      	b.n	8000628 <init_dotmatrix_stop+0x24>
	{
		display_data[i] = _stop[i];
 8000610:	4a24      	ldr	r2, [pc, #144]	; (80006a4 <init_dotmatrix_stop+0xa0>)
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	4413      	add	r3, r2
 8000616:	7819      	ldrb	r1, [r3, #0]
 8000618:	4a23      	ldr	r2, [pc, #140]	; (80006a8 <init_dotmatrix_stop+0xa4>)
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	4413      	add	r3, r2
 800061e:	460a      	mov	r2, r1
 8000620:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++)
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	3301      	adds	r3, #1
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	2b07      	cmp	r3, #7
 800062c:	ddf0      	ble.n	8000610 <init_dotmatrix_stop+0xc>
	}
	for (int i = 1; i < number_of_character + 1; i++)
 800062e:	2301      	movs	r3, #1
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	e017      	b.n	8000664 <init_dotmatrix_stop+0x60>
	{
		for (int j = 0; j < 8; j++)  // scroll_buffer[0] = blank
 8000634:	2300      	movs	r3, #0
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	e00e      	b.n	8000658 <init_dotmatrix_stop+0x54>
		{
			scroll_buffer[i][j] = _stop[j];
 800063a:	4a1a      	ldr	r2, [pc, #104]	; (80006a4 <init_dotmatrix_stop+0xa0>)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4413      	add	r3, r2
 8000640:	7819      	ldrb	r1, [r3, #0]
 8000642:	4a1a      	ldr	r2, [pc, #104]	; (80006ac <init_dotmatrix_stop+0xa8>)
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	00db      	lsls	r3, r3, #3
 8000648:	441a      	add	r2, r3
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4413      	add	r3, r2
 800064e:	460a      	mov	r2, r1
 8000650:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 8; j++)  // scroll_buffer[0] = blank
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	3301      	adds	r3, #1
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	2b07      	cmp	r3, #7
 800065c:	dded      	ble.n	800063a <init_dotmatrix_stop+0x36>
	for (int i = 1; i < number_of_character + 1; i++)
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	3301      	adds	r3, #1
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <init_dotmatrix_stop+0xac>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	68ba      	ldr	r2, [r7, #8]
 800066a:	429a      	cmp	r2, r3
 800066c:	dde2      	ble.n	8000634 <init_dotmatrix_stop+0x30>
		}
	}
	for (int i = 0; i < 8; ++i)
 800066e:	2300      	movs	r3, #0
 8000670:	603b      	str	r3, [r7, #0]
 8000672:	e00e      	b.n	8000692 <init_dotmatrix_stop+0x8e>
	{
		HAL_GPIO_WritePin(col_port[i], col_pin[i], 1);
 8000674:	4a0f      	ldr	r2, [pc, #60]	; (80006b4 <init_dotmatrix_stop+0xb0>)
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800067c:	4a0e      	ldr	r2, [pc, #56]	; (80006b8 <init_dotmatrix_stop+0xb4>)
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000684:	2201      	movs	r2, #1
 8000686:	4619      	mov	r1, r3
 8000688:	f003 fd88 	bl	800419c <HAL_GPIO_WritePin>
	for (int i = 0; i < 8; ++i)
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	3301      	adds	r3, #1
 8000690:	603b      	str	r3, [r7, #0]
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	2b07      	cmp	r3, #7
 8000696:	dded      	ble.n	8000674 <init_dotmatrix_stop+0x70>
	}
}
 8000698:	bf00      	nop
 800069a:	bf00      	nop
 800069c:	3710      	adds	r7, #16
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	0800cec4 	.word	0x0800cec4
 80006a8:	20000130 	.word	0x20000130
 80006ac:	20000138 	.word	0x20000138
 80006b0:	20000064 	.word	0x20000064
 80006b4:	20000004 	.word	0x20000004
 80006b8:	20000054 	.word	0x20000054

080006bc <write_column_data>:


void write_column_data(int col)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
	for	(int i=0; i<8; i++)
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	e01f      	b.n	800070a <write_column_data+0x4e>
	{
		if (i==col)
 80006ca:	68fa      	ldr	r2, [r7, #12]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	429a      	cmp	r2, r3
 80006d0:	d10c      	bne.n	80006ec <write_column_data+0x30>
		{
			HAL_GPIO_WritePin(col_port[i], col_pin[i], 0);  // on
 80006d2:	4a12      	ldr	r2, [pc, #72]	; (800071c <write_column_data+0x60>)
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80006da:	4a11      	ldr	r2, [pc, #68]	; (8000720 <write_column_data+0x64>)
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006e2:	2200      	movs	r2, #0
 80006e4:	4619      	mov	r1, r3
 80006e6:	f003 fd59 	bl	800419c <HAL_GPIO_WritePin>
 80006ea:	e00b      	b.n	8000704 <write_column_data+0x48>
		}
		else
		{
			HAL_GPIO_WritePin(col_port[i], col_pin[i], 1);  // off
 80006ec:	4a0b      	ldr	r2, [pc, #44]	; (800071c <write_column_data+0x60>)
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80006f4:	4a0a      	ldr	r2, [pc, #40]	; (8000720 <write_column_data+0x64>)
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006fc:	2201      	movs	r2, #1
 80006fe:	4619      	mov	r1, r3
 8000700:	f003 fd4c 	bl	800419c <HAL_GPIO_WritePin>
	for	(int i=0; i<8; i++)
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	3301      	adds	r3, #1
 8000708:	60fb      	str	r3, [r7, #12]
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	2b07      	cmp	r3, #7
 800070e:	dddc      	ble.n	80006ca <write_column_data+0xe>
		}
	}
}
 8000710:	bf00      	nop
 8000712:	bf00      	nop
 8000714:	3710      	adds	r7, #16
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000004 	.word	0x20000004
 8000720:	20000054 	.word	0x20000054

08000724 <write_row_data>:

// oboo111100
void write_row_data(unsigned char data)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
	unsigned char d;

	d=data;
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	72fb      	strb	r3, [r7, #11]
	for (int i=0; i<8; i++)
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	e023      	b.n	8000780 <write_row_data+0x5c>
	{
		if (d & (1 << i))  // 1인경우
 8000738:	7afa      	ldrb	r2, [r7, #11]
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	fa42 f303 	asr.w	r3, r2, r3
 8000740:	f003 0301 	and.w	r3, r3, #1
 8000744:	2b00      	cmp	r3, #0
 8000746:	d00c      	beq.n	8000762 <write_row_data+0x3e>
		{
			HAL_GPIO_WritePin(row_port[i], row_pin[i], 1);
 8000748:	4a11      	ldr	r2, [pc, #68]	; (8000790 <write_row_data+0x6c>)
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000750:	4a10      	ldr	r2, [pc, #64]	; (8000794 <write_row_data+0x70>)
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000758:	2201      	movs	r2, #1
 800075a:	4619      	mov	r1, r3
 800075c:	f003 fd1e 	bl	800419c <HAL_GPIO_WritePin>
 8000760:	e00b      	b.n	800077a <write_row_data+0x56>
		}
		else
		{
			HAL_GPIO_WritePin(row_port[i], row_pin[i], 0);
 8000762:	4a0b      	ldr	r2, [pc, #44]	; (8000790 <write_row_data+0x6c>)
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800076a:	4a0a      	ldr	r2, [pc, #40]	; (8000794 <write_row_data+0x70>)
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000772:	2200      	movs	r2, #0
 8000774:	4619      	mov	r1, r3
 8000776:	f003 fd11 	bl	800419c <HAL_GPIO_WritePin>
	for (int i=0; i<8; i++)
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	3301      	adds	r3, #1
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	2b07      	cmp	r3, #7
 8000784:	ddd8      	ble.n	8000738 <write_row_data+0x14>
		}
	}
}
 8000786:	bf00      	nop
 8000788:	bf00      	nop
 800078a:	3710      	adds	r7, #16
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000024 	.word	0x20000024
 8000794:	20000044 	.word	0x20000044

08000798 <dotmatrix_main>:

#if 1
// scroll 문자 출력 프로그램
void dotmatrix_main(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b088      	sub	sp, #32
 800079c:	af00      	add	r7, sp, #0
	static int count = 0; // column count
	static int index = 0; // scroll_buffer의 2차원 index 값
	static uint32_t past_time = 0;  // 이전 tick 값 저장

	if (stop == 1)
 800079e:	4b68      	ldr	r3, [pc, #416]	; (8000940 <dotmatrix_main+0x1a8>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d115      	bne.n	80007d2 <dotmatrix_main+0x3a>
	{
		for (int i=0; i<8; i++)
 80007a6:	2300      	movs	r3, #0
 80007a8:	61fb      	str	r3, [r7, #28]
 80007aa:	e00f      	b.n	80007cc <dotmatrix_main+0x34>
		{
			// 공통 양극 방식
			// column에는 0을, row에는 1을 출력해야 해당 LED가 on 된다.
			write_column_data(i);
 80007ac:	69f8      	ldr	r0, [r7, #28]
 80007ae:	f7ff ff85 	bl	80006bc <write_column_data>
			write_row_data(_stop[i]);
 80007b2:	4a64      	ldr	r2, [pc, #400]	; (8000944 <dotmatrix_main+0x1ac>)
 80007b4:	69fb      	ldr	r3, [r7, #28]
 80007b6:	4413      	add	r3, r2
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff ffb2 	bl	8000724 <write_row_data>
			HAL_Delay(1);
 80007c0:	2001      	movs	r0, #1
 80007c2:	f002 f9db 	bl	8002b7c <HAL_Delay>
		for (int i=0; i<8; i++)
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	3301      	adds	r3, #1
 80007ca:	61fb      	str	r3, [r7, #28]
 80007cc:	69fb      	ldr	r3, [r7, #28]
 80007ce:	2b07      	cmp	r3, #7
 80007d0:	ddec      	ble.n	80007ac <dotmatrix_main+0x14>
		}
	}

	if (forward == 1)
 80007d2:	4b5d      	ldr	r3, [pc, #372]	; (8000948 <dotmatrix_main+0x1b0>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d154      	bne.n	8000884 <dotmatrix_main+0xec>
	{
		uint32_t now = HAL_GetTick();  // 1ms
 80007da:	f002 f9c3 	bl	8002b64 <HAL_GetTick>
 80007de:	60b8      	str	r0, [r7, #8]
		// 처음 시작 시 past_time = 0; now=500 > past_time=500
		if (now-past_time >= 200)  // 500ms 마다 scroll
 80007e0:	4b5a      	ldr	r3, [pc, #360]	; (800094c <dotmatrix_main+0x1b4>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	68ba      	ldr	r2, [r7, #8]
 80007e6:	1ad3      	subs	r3, r2, r3
 80007e8:	2bc7      	cmp	r3, #199	; 0xc7
 80007ea:	d935      	bls.n	8000858 <dotmatrix_main+0xc0>
		{
			past_time = now;
 80007ec:	4a57      	ldr	r2, [pc, #348]	; (800094c <dotmatrix_main+0x1b4>)
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	6013      	str	r3, [r2, #0]
			for (int i = 0; i < 8; ++i)
 80007f2:	2300      	movs	r3, #0
 80007f4:	61bb      	str	r3, [r7, #24]
 80007f6:	e020      	b.n	800083a <dotmatrix_main+0xa2>
			{
				display_data[i] = (_up[i] >> count) | (_up[i] << (8 - count));
 80007f8:	4a55      	ldr	r2, [pc, #340]	; (8000950 <dotmatrix_main+0x1b8>)
 80007fa:	69bb      	ldr	r3, [r7, #24]
 80007fc:	4413      	add	r3, r2
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	461a      	mov	r2, r3
 8000802:	4b54      	ldr	r3, [pc, #336]	; (8000954 <dotmatrix_main+0x1bc>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	fa42 f303 	asr.w	r3, r2, r3
 800080a:	b25a      	sxtb	r2, r3
 800080c:	4950      	ldr	r1, [pc, #320]	; (8000950 <dotmatrix_main+0x1b8>)
 800080e:	69bb      	ldr	r3, [r7, #24]
 8000810:	440b      	add	r3, r1
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	4619      	mov	r1, r3
 8000816:	4b4f      	ldr	r3, [pc, #316]	; (8000954 <dotmatrix_main+0x1bc>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f1c3 0308 	rsb	r3, r3, #8
 800081e:	fa01 f303 	lsl.w	r3, r1, r3
 8000822:	b25b      	sxtb	r3, r3
 8000824:	4313      	orrs	r3, r2
 8000826:	b25b      	sxtb	r3, r3
 8000828:	b2d9      	uxtb	r1, r3
 800082a:	4a4b      	ldr	r2, [pc, #300]	; (8000958 <dotmatrix_main+0x1c0>)
 800082c:	69bb      	ldr	r3, [r7, #24]
 800082e:	4413      	add	r3, r2
 8000830:	460a      	mov	r2, r1
 8000832:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 8; ++i)
 8000834:	69bb      	ldr	r3, [r7, #24]
 8000836:	3301      	adds	r3, #1
 8000838:	61bb      	str	r3, [r7, #24]
 800083a:	69bb      	ldr	r3, [r7, #24]
 800083c:	2b07      	cmp	r3, #7
 800083e:	dddb      	ble.n	80007f8 <dotmatrix_main+0x60>
			}
			if (++count == 8)  // 8column을 다 처리 했으면 다음 scroll_buffer로 이동
 8000840:	4b44      	ldr	r3, [pc, #272]	; (8000954 <dotmatrix_main+0x1bc>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	3301      	adds	r3, #1
 8000846:	4a43      	ldr	r2, [pc, #268]	; (8000954 <dotmatrix_main+0x1bc>)
 8000848:	6013      	str	r3, [r2, #0]
 800084a:	4b42      	ldr	r3, [pc, #264]	; (8000954 <dotmatrix_main+0x1bc>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	2b08      	cmp	r3, #8
 8000850:	d102      	bne.n	8000858 <dotmatrix_main+0xc0>
			{
				count = 0;
 8000852:	4b40      	ldr	r3, [pc, #256]	; (8000954 <dotmatrix_main+0x1bc>)
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
			}
		}
		for (int i=0; i<8; i++)
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]
 800085c:	e00f      	b.n	800087e <dotmatrix_main+0xe6>
		{
			// 공통 양극 방식
			// column에는 0을, row에는 1을 출력해야 해당 LED가 on 된다.
			write_column_data(i);
 800085e:	6978      	ldr	r0, [r7, #20]
 8000860:	f7ff ff2c 	bl	80006bc <write_column_data>
			write_row_data(display_data[i]);
 8000864:	4a3c      	ldr	r2, [pc, #240]	; (8000958 <dotmatrix_main+0x1c0>)
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	4413      	add	r3, r2
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff ff59 	bl	8000724 <write_row_data>
			HAL_Delay(1);
 8000872:	2001      	movs	r0, #1
 8000874:	f002 f982 	bl	8002b7c <HAL_Delay>
		for (int i=0; i<8; i++)
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	3301      	adds	r3, #1
 800087c:	617b      	str	r3, [r7, #20]
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	2b07      	cmp	r3, #7
 8000882:	ddec      	ble.n	800085e <dotmatrix_main+0xc6>
		}
	}

	if (backward == 1)
 8000884:	4b35      	ldr	r3, [pc, #212]	; (800095c <dotmatrix_main+0x1c4>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2b01      	cmp	r3, #1
 800088a:	d154      	bne.n	8000936 <dotmatrix_main+0x19e>
	{
		uint32_t now = HAL_GetTick();  // 1ms
 800088c:	f002 f96a 	bl	8002b64 <HAL_GetTick>
 8000890:	6078      	str	r0, [r7, #4]
		// 처음 시작 시 past_time = 0; now=500 > past_time=500
		if (now-past_time >= 200)  // 500ms 마다 scroll
 8000892:	4b2e      	ldr	r3, [pc, #184]	; (800094c <dotmatrix_main+0x1b4>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	1ad3      	subs	r3, r2, r3
 800089a:	2bc7      	cmp	r3, #199	; 0xc7
 800089c:	d935      	bls.n	800090a <dotmatrix_main+0x172>
		{
			past_time = now;
 800089e:	4a2b      	ldr	r2, [pc, #172]	; (800094c <dotmatrix_main+0x1b4>)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	6013      	str	r3, [r2, #0]
			for (int i = 0; i < 8; ++i)
 80008a4:	2300      	movs	r3, #0
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	e020      	b.n	80008ec <dotmatrix_main+0x154>
			{
				display_data[i] = (_down[i] << count) | (_down[i] >> (8 - count));
 80008aa:	4a2d      	ldr	r2, [pc, #180]	; (8000960 <dotmatrix_main+0x1c8>)
 80008ac:	693b      	ldr	r3, [r7, #16]
 80008ae:	4413      	add	r3, r2
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	461a      	mov	r2, r3
 80008b4:	4b27      	ldr	r3, [pc, #156]	; (8000954 <dotmatrix_main+0x1bc>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	fa02 f303 	lsl.w	r3, r2, r3
 80008bc:	b25a      	sxtb	r2, r3
 80008be:	4928      	ldr	r1, [pc, #160]	; (8000960 <dotmatrix_main+0x1c8>)
 80008c0:	693b      	ldr	r3, [r7, #16]
 80008c2:	440b      	add	r3, r1
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	4619      	mov	r1, r3
 80008c8:	4b22      	ldr	r3, [pc, #136]	; (8000954 <dotmatrix_main+0x1bc>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f1c3 0308 	rsb	r3, r3, #8
 80008d0:	fa41 f303 	asr.w	r3, r1, r3
 80008d4:	b25b      	sxtb	r3, r3
 80008d6:	4313      	orrs	r3, r2
 80008d8:	b25b      	sxtb	r3, r3
 80008da:	b2d9      	uxtb	r1, r3
 80008dc:	4a1e      	ldr	r2, [pc, #120]	; (8000958 <dotmatrix_main+0x1c0>)
 80008de:	693b      	ldr	r3, [r7, #16]
 80008e0:	4413      	add	r3, r2
 80008e2:	460a      	mov	r2, r1
 80008e4:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 8; ++i)
 80008e6:	693b      	ldr	r3, [r7, #16]
 80008e8:	3301      	adds	r3, #1
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	693b      	ldr	r3, [r7, #16]
 80008ee:	2b07      	cmp	r3, #7
 80008f0:	dddb      	ble.n	80008aa <dotmatrix_main+0x112>
			}
			if (++count == 8)  // 8column을 다 처리 했으면 다음 scroll_buffer로 이동
 80008f2:	4b18      	ldr	r3, [pc, #96]	; (8000954 <dotmatrix_main+0x1bc>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	3301      	adds	r3, #1
 80008f8:	4a16      	ldr	r2, [pc, #88]	; (8000954 <dotmatrix_main+0x1bc>)
 80008fa:	6013      	str	r3, [r2, #0]
 80008fc:	4b15      	ldr	r3, [pc, #84]	; (8000954 <dotmatrix_main+0x1bc>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2b08      	cmp	r3, #8
 8000902:	d102      	bne.n	800090a <dotmatrix_main+0x172>
			{
				count = 0;
 8000904:	4b13      	ldr	r3, [pc, #76]	; (8000954 <dotmatrix_main+0x1bc>)
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
			}
		}
		for (int i=0; i<8; i++)
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	e00f      	b.n	8000930 <dotmatrix_main+0x198>
		{
			// 공통 양극 방식
			// column에는 0을, row에는 1을 출력해야 해당 LED가 on 된다.
			write_column_data(i);
 8000910:	68f8      	ldr	r0, [r7, #12]
 8000912:	f7ff fed3 	bl	80006bc <write_column_data>
			write_row_data(display_data[i]);
 8000916:	4a10      	ldr	r2, [pc, #64]	; (8000958 <dotmatrix_main+0x1c0>)
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	4413      	add	r3, r2
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff ff00 	bl	8000724 <write_row_data>
			HAL_Delay(1);
 8000924:	2001      	movs	r0, #1
 8000926:	f002 f929 	bl	8002b7c <HAL_Delay>
		for (int i=0; i<8; i++)
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	3301      	adds	r3, #1
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	2b07      	cmp	r3, #7
 8000934:	ddec      	ble.n	8000910 <dotmatrix_main+0x178>
		}
	}
}
 8000936:	bf00      	nop
 8000938:	3720      	adds	r7, #32
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000068 	.word	0x20000068
 8000944:	0800cec4 	.word	0x0800cec4
 8000948:	20000190 	.word	0x20000190
 800094c:	20000188 	.word	0x20000188
 8000950:	0800cebc 	.word	0x0800cebc
 8000954:	2000018c 	.word	0x2000018c
 8000958:	20000130 	.word	0x20000130
 800095c:	20000194 	.word	0x20000194
 8000960:	0800ceb4 	.word	0x0800ceb4

08000964 <set_rpm>:
void stop_motor(void);
void stepmotor_drive(int derection);
void set_rpm(int rpm);

void set_rpm(int rpm)  // rpm 1~13
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	delay_us(60000000 / 4096 / rpm);
 800096c:	f643 1238 	movw	r2, #14648	; 0x3938
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	fb92 f3f3 	sdiv	r3, r2, r3
 8000976:	4618      	mov	r0, r3
 8000978:	f000 fb36 	bl	8000fe8 <delay_us>
	// 최대 speed 기준(13) : delay_us(1126)
}
 800097c:	bf00      	nop
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <stop_motor>:
int backward = 0;

int cnt = 0;

void stop_motor(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
	cnt = 0;
 8000988:	4b08      	ldr	r3, [pc, #32]	; (80009ac <stop_motor+0x28>)
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
	stop = 1;
 800098e:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <stop_motor+0x2c>)
 8000990:	2201      	movs	r2, #1
 8000992:	601a      	str	r2, [r3, #0]
	forward = 0;
 8000994:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <stop_motor+0x30>)
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
	backward = 0;
 800099a:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <stop_motor+0x34>)
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	20000198 	.word	0x20000198
 80009b0:	20000068 	.word	0x20000068
 80009b4:	20000190 	.word	0x20000190
 80009b8:	20000194 	.word	0x20000194

080009bc <stepmotor_main>:

void stepmotor_main(void)  // 현재 상태를 기준으로 작성 -> 원래의 get button을 기준으로 작성해보기
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
	if (get_button(BUTTON3_GPIO_Port, BUTTON3_Pin, 3) == BUTTON_PRESS)
 80009c0:	2203      	movs	r2, #3
 80009c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009c6:	4859      	ldr	r0, [pc, #356]	; (8000b2c <stepmotor_main+0x170>)
 80009c8:	f7ff fde4 	bl	8000594 <get_button>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d11b      	bne.n	8000a0a <stepmotor_main+0x4e>
	{
		destination_floor++;
 80009d2:	4b57      	ldr	r3, [pc, #348]	; (8000b30 <stepmotor_main+0x174>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	3301      	adds	r3, #1
 80009d8:	4a55      	ldr	r2, [pc, #340]	; (8000b30 <stepmotor_main+0x174>)
 80009da:	6013      	str	r3, [r2, #0]
		destination_floor%=5;
 80009dc:	4b54      	ldr	r3, [pc, #336]	; (8000b30 <stepmotor_main+0x174>)
 80009de:	6819      	ldr	r1, [r3, #0]
 80009e0:	4b54      	ldr	r3, [pc, #336]	; (8000b34 <stepmotor_main+0x178>)
 80009e2:	fb83 2301 	smull	r2, r3, r3, r1
 80009e6:	105a      	asrs	r2, r3, #1
 80009e8:	17cb      	asrs	r3, r1, #31
 80009ea:	1ad2      	subs	r2, r2, r3
 80009ec:	4613      	mov	r3, r2
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	4413      	add	r3, r2
 80009f2:	1aca      	subs	r2, r1, r3
 80009f4:	4b4e      	ldr	r3, [pc, #312]	; (8000b30 <stepmotor_main+0x174>)
 80009f6:	601a      	str	r2, [r3, #0]

		if (destination_floor == 0)
 80009f8:	4b4d      	ldr	r3, [pc, #308]	; (8000b30 <stepmotor_main+0x174>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d102      	bne.n	8000a06 <stepmotor_main+0x4a>
		{
			destination_floor = 1;
 8000a00:	4b4b      	ldr	r3, [pc, #300]	; (8000b30 <stepmotor_main+0x174>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	601a      	str	r2, [r3, #0]
		}
		i2c_lcd_main();
 8000a06:	f000 f9ff 	bl	8000e08 <i2c_lcd_main>
	}
	if (stop)
 8000a0a:	4b4b      	ldr	r3, [pc, #300]	; (8000b38 <stepmotor_main+0x17c>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d023      	beq.n	8000a5a <stepmotor_main+0x9e>
	{
		if (get_button(BUTTON2_GPIO_Port, BUTTON2_Pin, 2) == BUTTON_PRESS)  // Increase
 8000a12:	2202      	movs	r2, #2
 8000a14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a18:	4844      	ldr	r0, [pc, #272]	; (8000b2c <stepmotor_main+0x170>)
 8000a1a:	f7ff fdbb 	bl	8000594 <get_button>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d108      	bne.n	8000a36 <stepmotor_main+0x7a>
		{
			forward = 1;
 8000a24:	4b45      	ldr	r3, [pc, #276]	; (8000b3c <stepmotor_main+0x180>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	601a      	str	r2, [r3, #0]
			stop = 0;
 8000a2a:	4b43      	ldr	r3, [pc, #268]	; (8000b38 <stepmotor_main+0x17c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
			cnt = 1;
 8000a30:	4b43      	ldr	r3, [pc, #268]	; (8000b40 <stepmotor_main+0x184>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	601a      	str	r2, [r3, #0]
		}
		if (get_button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)  // Decrease
 8000a36:	2200      	movs	r2, #0
 8000a38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a3c:	483b      	ldr	r0, [pc, #236]	; (8000b2c <stepmotor_main+0x170>)
 8000a3e:	f7ff fda9 	bl	8000594 <get_button>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d108      	bne.n	8000a5a <stepmotor_main+0x9e>
		{
			backward = 1;
 8000a48:	4b3e      	ldr	r3, [pc, #248]	; (8000b44 <stepmotor_main+0x188>)
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	601a      	str	r2, [r3, #0]
			stop = 0;
 8000a4e:	4b3a      	ldr	r3, [pc, #232]	; (8000b38 <stepmotor_main+0x17c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
			cnt = 2;
 8000a54:	4b3a      	ldr	r3, [pc, #232]	; (8000b40 <stepmotor_main+0x184>)
 8000a56:	2202      	movs	r2, #2
 8000a58:	601a      	str	r2, [r3, #0]
		}
	}
	if (forward == 1)
 8000a5a:	4b38      	ldr	r3, [pc, #224]	; (8000b3c <stepmotor_main+0x180>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d123      	bne.n	8000aaa <stepmotor_main+0xee>
	{
		if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)  // Stop
 8000a62:	2201      	movs	r2, #1
 8000a64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a68:	4830      	ldr	r0, [pc, #192]	; (8000b2c <stepmotor_main+0x170>)
 8000a6a:	f7ff fd93 	bl	8000594 <get_button>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d108      	bne.n	8000a86 <stepmotor_main+0xca>
		{
			stop = 1;
 8000a74:	4b30      	ldr	r3, [pc, #192]	; (8000b38 <stepmotor_main+0x17c>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	601a      	str	r2, [r3, #0]
			forward = 0;
 8000a7a:	4b30      	ldr	r3, [pc, #192]	; (8000b3c <stepmotor_main+0x180>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
			cnt = 0;
 8000a80:	4b2f      	ldr	r3, [pc, #188]	; (8000b40 <stepmotor_main+0x184>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
		}
		if (get_button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)  // Decrease
 8000a86:	2200      	movs	r2, #0
 8000a88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a8c:	4827      	ldr	r0, [pc, #156]	; (8000b2c <stepmotor_main+0x170>)
 8000a8e:	f7ff fd81 	bl	8000594 <get_button>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d108      	bne.n	8000aaa <stepmotor_main+0xee>
		{
			backward = 1;
 8000a98:	4b2a      	ldr	r3, [pc, #168]	; (8000b44 <stepmotor_main+0x188>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	601a      	str	r2, [r3, #0]
			forward = 0;
 8000a9e:	4b27      	ldr	r3, [pc, #156]	; (8000b3c <stepmotor_main+0x180>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
			cnt = 2;
 8000aa4:	4b26      	ldr	r3, [pc, #152]	; (8000b40 <stepmotor_main+0x184>)
 8000aa6:	2202      	movs	r2, #2
 8000aa8:	601a      	str	r2, [r3, #0]
		}
	}
	if (backward == 1)
 8000aaa:	4b26      	ldr	r3, [pc, #152]	; (8000b44 <stepmotor_main+0x188>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d123      	bne.n	8000afa <stepmotor_main+0x13e>
	{
		if (get_button(BUTTON2_GPIO_Port, BUTTON2_Pin, 2) == BUTTON_PRESS)  // Increase
 8000ab2:	2202      	movs	r2, #2
 8000ab4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ab8:	481c      	ldr	r0, [pc, #112]	; (8000b2c <stepmotor_main+0x170>)
 8000aba:	f7ff fd6b 	bl	8000594 <get_button>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d108      	bne.n	8000ad6 <stepmotor_main+0x11a>
		{
			forward = 1;
 8000ac4:	4b1d      	ldr	r3, [pc, #116]	; (8000b3c <stepmotor_main+0x180>)
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	601a      	str	r2, [r3, #0]
			backward = 0;
 8000aca:	4b1e      	ldr	r3, [pc, #120]	; (8000b44 <stepmotor_main+0x188>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
			cnt = 1;
 8000ad0:	4b1b      	ldr	r3, [pc, #108]	; (8000b40 <stepmotor_main+0x184>)
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	601a      	str	r2, [r3, #0]
		}
		if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)  // Stop
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000adc:	4813      	ldr	r0, [pc, #76]	; (8000b2c <stepmotor_main+0x170>)
 8000ade:	f7ff fd59 	bl	8000594 <get_button>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d108      	bne.n	8000afa <stepmotor_main+0x13e>
		{
			stop = 1;
 8000ae8:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <stepmotor_main+0x17c>)
 8000aea:	2201      	movs	r2, #1
 8000aec:	601a      	str	r2, [r3, #0]
			backward = 0;
 8000aee:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <stepmotor_main+0x188>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
			cnt = 0;
 8000af4:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <stepmotor_main+0x184>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
		}
	}

	stepmotor_drive(cnt);  // cnt랑 겹치는 변수가 존재 > 하나로 합치기
 8000afa:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <stepmotor_main+0x184>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 f824 	bl	8000b4c <stepmotor_drive>

	if (destination_floor == now_floor)
 8000b04:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <stepmotor_main+0x174>)
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <stepmotor_main+0x18c>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d10b      	bne.n	8000b28 <stepmotor_main+0x16c>
	{
		stop = 1;
 8000b10:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <stepmotor_main+0x17c>)
 8000b12:	2201      	movs	r2, #1
 8000b14:	601a      	str	r2, [r3, #0]
		forward = 0;
 8000b16:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <stepmotor_main+0x180>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
		backward = 0;
 8000b1c:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <stepmotor_main+0x188>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
		cnt = 0;
 8000b22:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <stepmotor_main+0x184>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
	}
}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	20000098 	.word	0x20000098
 8000b34:	66666667 	.word	0x66666667
 8000b38:	20000068 	.word	0x20000068
 8000b3c:	20000190 	.word	0x20000190
 8000b40:	20000198 	.word	0x20000198
 8000b44:	20000194 	.word	0x20000194
 8000b48:	20000094 	.word	0x20000094

08000b4c <stepmotor_drive>:
		//i2c_lcd_main();
	}
}
*/
void stepmotor_drive(int derection)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
	static int step = 0;  // 회전을 위한 변수

	if (derection == 1)  // 정회전/상승
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d113      	bne.n	8000b82 <stepmotor_drive+0x36>
		{
			step++;  // for(step=0; step<8; step++)
 8000b5a:	4b93      	ldr	r3, [pc, #588]	; (8000da8 <stepmotor_drive+0x25c>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	4a91      	ldr	r2, [pc, #580]	; (8000da8 <stepmotor_drive+0x25c>)
 8000b62:	6013      	str	r3, [r2, #0]
			step %= 8;  // 다음 진행할 step 준비
 8000b64:	4b90      	ldr	r3, [pc, #576]	; (8000da8 <stepmotor_drive+0x25c>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	425a      	negs	r2, r3
 8000b6a:	f003 0307 	and.w	r3, r3, #7
 8000b6e:	f002 0207 	and.w	r2, r2, #7
 8000b72:	bf58      	it	pl
 8000b74:	4253      	negpl	r3, r2
 8000b76:	4a8c      	ldr	r2, [pc, #560]	; (8000da8 <stepmotor_drive+0x25c>)
 8000b78:	6013      	str	r3, [r2, #0]
			set_rpm(13);
 8000b7a:	200d      	movs	r0, #13
 8000b7c:	f7ff fef2 	bl	8000964 <set_rpm>
 8000b80:	e02e      	b.n	8000be0 <stepmotor_drive+0x94>
		}
	else if (derection == 2)  // 역회전/하강
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2b02      	cmp	r3, #2
 8000b86:	d10f      	bne.n	8000ba8 <stepmotor_drive+0x5c>
	{
		step--;
 8000b88:	4b87      	ldr	r3, [pc, #540]	; (8000da8 <stepmotor_drive+0x25c>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	3b01      	subs	r3, #1
 8000b8e:	4a86      	ldr	r2, [pc, #536]	; (8000da8 <stepmotor_drive+0x25c>)
 8000b90:	6013      	str	r3, [r2, #0]
		if (step < 0) step = 7;
 8000b92:	4b85      	ldr	r3, [pc, #532]	; (8000da8 <stepmotor_drive+0x25c>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	da02      	bge.n	8000ba0 <stepmotor_drive+0x54>
 8000b9a:	4b83      	ldr	r3, [pc, #524]	; (8000da8 <stepmotor_drive+0x25c>)
 8000b9c:	2207      	movs	r2, #7
 8000b9e:	601a      	str	r2, [r3, #0]
		set_rpm(13);
 8000ba0:	200d      	movs	r0, #13
 8000ba2:	f7ff fedf 	bl	8000964 <set_rpm>
 8000ba6:	e01b      	b.n	8000be0 <stepmotor_drive+0x94>
	}
	else if (derection == 0)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d118      	bne.n	8000be0 <stepmotor_drive+0x94>
	{
		HAL_GPIO_WritePin(GPIOD, IN1_Pin, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bb4:	487d      	ldr	r0, [pc, #500]	; (8000dac <stepmotor_drive+0x260>)
 8000bb6:	f003 faf1 	bl	800419c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN2_Pin, 0);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bc0:	487a      	ldr	r0, [pc, #488]	; (8000dac <stepmotor_drive+0x260>)
 8000bc2:	f003 faeb 	bl	800419c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN3_Pin, 0);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bcc:	4877      	ldr	r0, [pc, #476]	; (8000dac <stepmotor_drive+0x260>)
 8000bce:	f003 fae5 	bl	800419c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, IN4_Pin, 0);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bd8:	4874      	ldr	r0, [pc, #464]	; (8000dac <stepmotor_drive+0x260>)
 8000bda:	f003 fadf 	bl	800419c <HAL_GPIO_WritePin>
		return;
 8000bde:	e0e0      	b.n	8000da2 <stepmotor_drive+0x256>
	}

	switch(step){
 8000be0:	4b71      	ldr	r3, [pc, #452]	; (8000da8 <stepmotor_drive+0x25c>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b07      	cmp	r3, #7
 8000be6:	f200 80db 	bhi.w	8000da0 <stepmotor_drive+0x254>
 8000bea:	a201      	add	r2, pc, #4	; (adr r2, 8000bf0 <stepmotor_drive+0xa4>)
 8000bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bf0:	08000c11 	.word	0x08000c11
 8000bf4:	08000c43 	.word	0x08000c43
 8000bf8:	08000c75 	.word	0x08000c75
 8000bfc:	08000ca7 	.word	0x08000ca7
 8000c00:	08000cd9 	.word	0x08000cd9
 8000c04:	08000d0b 	.word	0x08000d0b
 8000c08:	08000d3d 	.word	0x08000d3d
 8000c0c:	08000d6f 	.word	0x08000d6f
		case 0:
			HAL_GPIO_WritePin(GPIOD, IN1_Pin, 1);
 8000c10:	2201      	movs	r2, #1
 8000c12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c16:	4865      	ldr	r0, [pc, #404]	; (8000dac <stepmotor_drive+0x260>)
 8000c18:	f003 fac0 	bl	800419c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, IN2_Pin, 0);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c22:	4862      	ldr	r0, [pc, #392]	; (8000dac <stepmotor_drive+0x260>)
 8000c24:	f003 faba 	bl	800419c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, IN3_Pin, 0);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c2e:	485f      	ldr	r0, [pc, #380]	; (8000dac <stepmotor_drive+0x260>)
 8000c30:	f003 fab4 	bl	800419c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, IN4_Pin, 0);
 8000c34:	2200      	movs	r2, #0
 8000c36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c3a:	485c      	ldr	r0, [pc, #368]	; (8000dac <stepmotor_drive+0x260>)
 8000c3c:	f003 faae 	bl	800419c <HAL_GPIO_WritePin>
			break;
 8000c40:	e0af      	b.n	8000da2 <stepmotor_drive+0x256>
		case 1:
			HAL_GPIO_WritePin(GPIOD, IN1_Pin, 1);
 8000c42:	2201      	movs	r2, #1
 8000c44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c48:	4858      	ldr	r0, [pc, #352]	; (8000dac <stepmotor_drive+0x260>)
 8000c4a:	f003 faa7 	bl	800419c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, IN2_Pin, 1);
 8000c4e:	2201      	movs	r2, #1
 8000c50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c54:	4855      	ldr	r0, [pc, #340]	; (8000dac <stepmotor_drive+0x260>)
 8000c56:	f003 faa1 	bl	800419c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, IN3_Pin, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c60:	4852      	ldr	r0, [pc, #328]	; (8000dac <stepmotor_drive+0x260>)
 8000c62:	f003 fa9b 	bl	800419c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, IN4_Pin, 0);
 8000c66:	2200      	movs	r2, #0
 8000c68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c6c:	484f      	ldr	r0, [pc, #316]	; (8000dac <stepmotor_drive+0x260>)
 8000c6e:	f003 fa95 	bl	800419c <HAL_GPIO_WritePin>
			break;
 8000c72:	e096      	b.n	8000da2 <stepmotor_drive+0x256>
		case 2:
			HAL_GPIO_WritePin(GPIOD, IN1_Pin, 0);
 8000c74:	2200      	movs	r2, #0
 8000c76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c7a:	484c      	ldr	r0, [pc, #304]	; (8000dac <stepmotor_drive+0x260>)
 8000c7c:	f003 fa8e 	bl	800419c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, IN2_Pin, 1);
 8000c80:	2201      	movs	r2, #1
 8000c82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c86:	4849      	ldr	r0, [pc, #292]	; (8000dac <stepmotor_drive+0x260>)
 8000c88:	f003 fa88 	bl	800419c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, IN3_Pin, 0);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c92:	4846      	ldr	r0, [pc, #280]	; (8000dac <stepmotor_drive+0x260>)
 8000c94:	f003 fa82 	bl	800419c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, IN4_Pin, 0);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c9e:	4843      	ldr	r0, [pc, #268]	; (8000dac <stepmotor_drive+0x260>)
 8000ca0:	f003 fa7c 	bl	800419c <HAL_GPIO_WritePin>
			break;
 8000ca4:	e07d      	b.n	8000da2 <stepmotor_drive+0x256>
		case 3:
			HAL_GPIO_WritePin(GPIOD, IN1_Pin, 0);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cac:	483f      	ldr	r0, [pc, #252]	; (8000dac <stepmotor_drive+0x260>)
 8000cae:	f003 fa75 	bl	800419c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, IN2_Pin, 1);
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cb8:	483c      	ldr	r0, [pc, #240]	; (8000dac <stepmotor_drive+0x260>)
 8000cba:	f003 fa6f 	bl	800419c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, IN3_Pin, 1);
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cc4:	4839      	ldr	r0, [pc, #228]	; (8000dac <stepmotor_drive+0x260>)
 8000cc6:	f003 fa69 	bl	800419c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, IN4_Pin, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cd0:	4836      	ldr	r0, [pc, #216]	; (8000dac <stepmotor_drive+0x260>)
 8000cd2:	f003 fa63 	bl	800419c <HAL_GPIO_WritePin>
			break;
 8000cd6:	e064      	b.n	8000da2 <stepmotor_drive+0x256>
		case 4:
			HAL_GPIO_WritePin(GPIOD, IN1_Pin, 0);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cde:	4833      	ldr	r0, [pc, #204]	; (8000dac <stepmotor_drive+0x260>)
 8000ce0:	f003 fa5c 	bl	800419c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, IN2_Pin, 0);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cea:	4830      	ldr	r0, [pc, #192]	; (8000dac <stepmotor_drive+0x260>)
 8000cec:	f003 fa56 	bl	800419c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, IN3_Pin, 1);
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cf6:	482d      	ldr	r0, [pc, #180]	; (8000dac <stepmotor_drive+0x260>)
 8000cf8:	f003 fa50 	bl	800419c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, IN4_Pin, 0);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d02:	482a      	ldr	r0, [pc, #168]	; (8000dac <stepmotor_drive+0x260>)
 8000d04:	f003 fa4a 	bl	800419c <HAL_GPIO_WritePin>
			break;
 8000d08:	e04b      	b.n	8000da2 <stepmotor_drive+0x256>
		case 5:
			HAL_GPIO_WritePin(GPIOD, IN1_Pin, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d10:	4826      	ldr	r0, [pc, #152]	; (8000dac <stepmotor_drive+0x260>)
 8000d12:	f003 fa43 	bl	800419c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, IN2_Pin, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d1c:	4823      	ldr	r0, [pc, #140]	; (8000dac <stepmotor_drive+0x260>)
 8000d1e:	f003 fa3d 	bl	800419c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, IN3_Pin, 1);
 8000d22:	2201      	movs	r2, #1
 8000d24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d28:	4820      	ldr	r0, [pc, #128]	; (8000dac <stepmotor_drive+0x260>)
 8000d2a:	f003 fa37 	bl	800419c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, IN4_Pin, 1);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d34:	481d      	ldr	r0, [pc, #116]	; (8000dac <stepmotor_drive+0x260>)
 8000d36:	f003 fa31 	bl	800419c <HAL_GPIO_WritePin>
			break;
 8000d3a:	e032      	b.n	8000da2 <stepmotor_drive+0x256>
		case 6:
			HAL_GPIO_WritePin(GPIOD, IN1_Pin, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d42:	481a      	ldr	r0, [pc, #104]	; (8000dac <stepmotor_drive+0x260>)
 8000d44:	f003 fa2a 	bl	800419c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, IN2_Pin, 0);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d4e:	4817      	ldr	r0, [pc, #92]	; (8000dac <stepmotor_drive+0x260>)
 8000d50:	f003 fa24 	bl	800419c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, IN3_Pin, 0);
 8000d54:	2200      	movs	r2, #0
 8000d56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d5a:	4814      	ldr	r0, [pc, #80]	; (8000dac <stepmotor_drive+0x260>)
 8000d5c:	f003 fa1e 	bl	800419c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, IN4_Pin, 1);
 8000d60:	2201      	movs	r2, #1
 8000d62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d66:	4811      	ldr	r0, [pc, #68]	; (8000dac <stepmotor_drive+0x260>)
 8000d68:	f003 fa18 	bl	800419c <HAL_GPIO_WritePin>
			break;
 8000d6c:	e019      	b.n	8000da2 <stepmotor_drive+0x256>
		case 7:
			HAL_GPIO_WritePin(GPIOD, IN1_Pin, 1);
 8000d6e:	2201      	movs	r2, #1
 8000d70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d74:	480d      	ldr	r0, [pc, #52]	; (8000dac <stepmotor_drive+0x260>)
 8000d76:	f003 fa11 	bl	800419c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, IN2_Pin, 0);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d80:	480a      	ldr	r0, [pc, #40]	; (8000dac <stepmotor_drive+0x260>)
 8000d82:	f003 fa0b 	bl	800419c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, IN3_Pin, 0);
 8000d86:	2200      	movs	r2, #0
 8000d88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d8c:	4807      	ldr	r0, [pc, #28]	; (8000dac <stepmotor_drive+0x260>)
 8000d8e:	f003 fa05 	bl	800419c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, IN4_Pin, 1);
 8000d92:	2201      	movs	r2, #1
 8000d94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d98:	4804      	ldr	r0, [pc, #16]	; (8000dac <stepmotor_drive+0x260>)
 8000d9a:	f003 f9ff 	bl	800419c <HAL_GPIO_WritePin>
			break;
 8000d9e:	e000      	b.n	8000da2 <stepmotor_drive+0x256>
		default:
			break;
 8000da0:	bf00      	nop
	}
}
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	2000019c 	.word	0x2000019c
 8000dac:	40020c00 	.word	0x40020c00

08000db0 <fnd1digit_main>:
  FND_a|FND_b|FND_c|FND_d|FND_e|FND_f|FND_g,   // 8
  FND_a|FND_b|FND_c|FND_d|FND_f|FND_g   // 9
};

void fnd1digit_main(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	FND1digit_off();
 8000db4:	f000 f814 	bl	8000de0 <FND1digit_off>

	HAL_GPIO_WritePin(FND_DATA_PORT, FND_font[now_floor], GPIO_PIN_RESET);
 8000db8:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <fnd1digit_main+0x24>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a06      	ldr	r2, [pc, #24]	; (8000dd8 <fnd1digit_main+0x28>)
 8000dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4804      	ldr	r0, [pc, #16]	; (8000ddc <fnd1digit_main+0x2c>)
 8000dca:	f003 f9e7 	bl	800419c <HAL_GPIO_WritePin>
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000094 	.word	0x20000094
 8000dd8:	2000006c 	.word	0x2000006c
 8000ddc:	40020400 	.word	0x40020400

08000de0 <FND1digit_off>:


void FND1digit_off(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FND_DATA_PORT,FND_font[8]|FND_p, GPIO_PIN_SET);
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <FND1digit_off+0x20>)
 8000de6:	6a1b      	ldr	r3, [r3, #32]
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	2201      	movs	r2, #1
 8000df2:	4619      	mov	r1, r3
 8000df4:	4803      	ldr	r0, [pc, #12]	; (8000e04 <FND1digit_off+0x24>)
 8000df6:	f003 f9d1 	bl	800419c <HAL_GPIO_WritePin>
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	2000006c 	.word	0x2000006c
 8000e04:	40020400 	.word	0x40020400

08000e08 <i2c_lcd_main>:
extern int now_floor;

void i2c_lcd_main(void);

void i2c_lcd_main(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08a      	sub	sp, #40	; 0x28
 8000e0c:	af00      	add	r7, sp, #0
		HAL_Delay(200);
	}

#endif
	char lcd_buff1[20], lcd_buff2[20];
	sprintf(lcd_buff1, "Destination : %dF", destination_floor);
 8000e0e:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <i2c_lcd_main+0x50>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	4911      	ldr	r1, [pc, #68]	; (8000e5c <i2c_lcd_main+0x54>)
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f00b f965 	bl	800c0e8 <siprintf>
	move_cursor(0,0);
 8000e1e:	2100      	movs	r1, #0
 8000e20:	2000      	movs	r0, #0
 8000e22:	f000 f8b7 	bl	8000f94 <move_cursor>
	lcd_string(lcd_buff1);
 8000e26:	f107 0314 	add.w	r3, r7, #20
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f000 f89d 	bl	8000f6a <lcd_string>
	sprintf(lcd_buff2, "Now floor : %dF", now_floor);
 8000e30:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <i2c_lcd_main+0x58>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	463b      	mov	r3, r7
 8000e36:	490b      	ldr	r1, [pc, #44]	; (8000e64 <i2c_lcd_main+0x5c>)
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f00b f955 	bl	800c0e8 <siprintf>
	move_cursor(1,0);
 8000e3e:	2100      	movs	r1, #0
 8000e40:	2001      	movs	r0, #1
 8000e42:	f000 f8a7 	bl	8000f94 <move_cursor>
	lcd_string(lcd_buff2);
 8000e46:	463b      	mov	r3, r7
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f000 f88e 	bl	8000f6a <lcd_string>
	value++;
	if(value>9)value=0;
	HAL_Delay(1000);
	*/

}
 8000e4e:	bf00      	nop
 8000e50:	3728      	adds	r7, #40	; 0x28
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000098 	.word	0x20000098
 8000e5c:	0800cd9c 	.word	0x0800cd9c
 8000e60:	20000094 	.word	0x20000094
 8000e64:	0800cdb0 	.word	0x0800cdb0

08000e68 <lcd_command>:

void lcd_command(uint8_t command)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af02      	add	r7, sp, #8
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = command & 0xf0;
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	f023 030f 	bic.w	r3, r3, #15
 8000e78:	73fb      	strb	r3, [r7, #15]
	low_nibble = (command<<4) & 0xf0;
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	011b      	lsls	r3, r3, #4
 8000e7e:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 8000e80:	7bfb      	ldrb	r3, [r7, #15]
 8000e82:	f043 030c 	orr.w	r3, r3, #12
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
 8000e8c:	f043 0308 	orr.w	r3, r3, #8
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 8000e94:	7bbb      	ldrb	r3, [r7, #14]
 8000e96:	f043 030c 	orr.w	r3, r3, #12
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 8000e9e:	7bbb      	ldrb	r3, [r7, #14]
 8000ea0:	f043 0308 	orr.w	r3, r3, #8
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 8000ea8:	bf00      	nop
 8000eaa:	f107 0208 	add.w	r2, r7, #8
 8000eae:	2364      	movs	r3, #100	; 0x64
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	2304      	movs	r3, #4
 8000eb4:	214e      	movs	r1, #78	; 0x4e
 8000eb6:	4805      	ldr	r0, [pc, #20]	; (8000ecc <lcd_command+0x64>)
 8000eb8:	f003 fb00 	bl	80044bc <HAL_I2C_Master_Transmit>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d1f3      	bne.n	8000eaa <lcd_command+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 8000ec2:	bf00      	nop
}
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000410 	.word	0x20000410

08000ed0 <lcd_data>:

// 1 byte write
void lcd_data(uint8_t data)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af02      	add	r7, sp, #8
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = data & 0xf0;
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	f023 030f 	bic.w	r3, r3, #15
 8000ee0:	73fb      	strb	r3, [r7, #15]
	low_nibble = (data<<4) & 0xf0;
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	011b      	lsls	r3, r3, #4
 8000ee6:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 8000ee8:	7bfb      	ldrb	r3, [r7, #15]
 8000eea:	f043 030d 	orr.w	r3, r3, #13
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
 8000ef4:	f043 0309 	orr.w	r3, r3, #9
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 8000efc:	7bbb      	ldrb	r3, [r7, #14]
 8000efe:	f043 030d 	orr.w	r3, r3, #13
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 8000f06:	7bbb      	ldrb	r3, [r7, #14]
 8000f08:	f043 0309 	orr.w	r3, r3, #9
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 8000f10:	bf00      	nop
 8000f12:	f107 0208 	add.w	r2, r7, #8
 8000f16:	2364      	movs	r3, #100	; 0x64
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	2304      	movs	r3, #4
 8000f1c:	214e      	movs	r1, #78	; 0x4e
 8000f1e:	4805      	ldr	r0, [pc, #20]	; (8000f34 <lcd_data+0x64>)
 8000f20:	f003 facc 	bl	80044bc <HAL_I2C_Master_Transmit>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d1f3      	bne.n	8000f12 <lcd_data+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 8000f2a:	bf00      	nop
}
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000410 	.word	0x20000410

08000f38 <i2c_lcd_init>:
// lcd 초기화
void i2c_lcd_init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0

	lcd_command(0x33);
 8000f3c:	2033      	movs	r0, #51	; 0x33
 8000f3e:	f7ff ff93 	bl	8000e68 <lcd_command>
	lcd_command(0x32);
 8000f42:	2032      	movs	r0, #50	; 0x32
 8000f44:	f7ff ff90 	bl	8000e68 <lcd_command>
	lcd_command(0x28);	//Function Set 4-bit mode
 8000f48:	2028      	movs	r0, #40	; 0x28
 8000f4a:	f7ff ff8d 	bl	8000e68 <lcd_command>
	lcd_command(DISPLAY_ON);
 8000f4e:	200c      	movs	r0, #12
 8000f50:	f7ff ff8a 	bl	8000e68 <lcd_command>
	lcd_command(0x06);	//Entry mode set
 8000f54:	2006      	movs	r0, #6
 8000f56:	f7ff ff87 	bl	8000e68 <lcd_command>
	lcd_command(CLEAR_DISPLAY);
 8000f5a:	2001      	movs	r0, #1
 8000f5c:	f7ff ff84 	bl	8000e68 <lcd_command>
	HAL_Delay(2);
 8000f60:	2002      	movs	r0, #2
 8000f62:	f001 fe0b 	bl	8002b7c <HAL_Delay>
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <lcd_string>:

// null을 만날때 까지 string을 LCD에 출력
void lcd_string(uint8_t *str)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b082      	sub	sp, #8
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
	while(*str)
 8000f72:	e006      	b.n	8000f82 <lcd_string+0x18>
	{
		lcd_data(*str++);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	1c5a      	adds	r2, r3, #1
 8000f78:	607a      	str	r2, [r7, #4]
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff ffa7 	bl	8000ed0 <lcd_data>
	while(*str)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d1f4      	bne.n	8000f74 <lcd_string+0xa>
	}
}
 8000f8a:	bf00      	nop
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <move_cursor>:

// 해당 줄,col으로 이동 하는 함수
void move_cursor(uint8_t row, uint8_t column)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	460a      	mov	r2, r1
 8000f9e:	71fb      	strb	r3, [r7, #7]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	71bb      	strb	r3, [r7, #6]
	lcd_command(0x80 | row<<6 | column);
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	019b      	lsls	r3, r3, #6
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	79bb      	ldrb	r3, [r7, #6]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff ff56 	bl	8000e68 <lcd_command>
	return;
 8000fbc:	bf00      	nop
}
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE   // Add for printf
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000fcc:	1d39      	adds	r1, r7, #4
 8000fce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <__io_putchar+0x20>)
 8000fd6:	f006 fcdc 	bl	8007992 <HAL_UART_Transmit>

  return ch;
 8000fda:	687b      	ldr	r3, [r7, #4]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000634 	.word	0x20000634

08000fe8 <delay_us>:
//----------  printf end ----------

void delay_us(unsigned long us)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim11,0);   // tim11 clear
 8000ff0:	4b08      	ldr	r3, [pc, #32]	; (8001014 <delay_us+0x2c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim11) < us)
 8000ff8:	bf00      	nop
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <delay_us+0x2c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	429a      	cmp	r2, r3
 8001004:	d8f9      	bhi.n	8000ffa <delay_us+0x12>
		;
}
 8001006:	bf00      	nop
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	200005ec 	.word	0x200005ec

08001018 <HAL_GPIO_EXTI_Callback>:

// 1. move from Driver/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_gpio.c to here
// 2. enter here every external interrupt
volatile int ext_int_no = -1;  // GPIO_Pin?�� 0번도 존재?��?���?????????? 구분?���?????????? ?��?��?��
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 8001022:	88fb      	ldrh	r3, [r7, #6]
 8001024:	3b01      	subs	r3, #1
 8001026:	2b07      	cmp	r3, #7
 8001028:	d83a      	bhi.n	80010a0 <HAL_GPIO_EXTI_Callback+0x88>
 800102a:	a201      	add	r2, pc, #4	; (adr r2, 8001030 <HAL_GPIO_EXTI_Callback+0x18>)
 800102c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001030:	08001051 	.word	0x08001051
 8001034:	0800108b 	.word	0x0800108b
 8001038:	080010a1 	.word	0x080010a1
 800103c:	08001067 	.word	0x08001067
 8001040:	080010a1 	.word	0x080010a1
 8001044:	080010a1 	.word	0x080010a1
 8001048:	080010a1 	.word	0x080010a1
 800104c:	08001079 	.word	0x08001079
	{
	case PHOTO0_Pin:  // 1 floor
		ext_int_no = GPIO_Pin;
 8001050:	88fb      	ldrh	r3, [r7, #6]
 8001052:	4a16      	ldr	r2, [pc, #88]	; (80010ac <HAL_GPIO_EXTI_Callback+0x94>)
 8001054:	6013      	str	r3, [r2, #0]
		now_floor = 1;
 8001056:	4b16      	ldr	r3, [pc, #88]	; (80010b0 <HAL_GPIO_EXTI_Callback+0x98>)
 8001058:	2201      	movs	r2, #1
 800105a:	601a      	str	r2, [r3, #0]
		stop_motor();
 800105c:	f7ff fc92 	bl	8000984 <stop_motor>
		i2c_lcd_main();
 8001060:	f7ff fed2 	bl	8000e08 <i2c_lcd_main>
		break;
 8001064:	e01d      	b.n	80010a2 <HAL_GPIO_EXTI_Callback+0x8a>
	case PHOTO1_Pin:  // 2 floor
		ext_int_no = GPIO_Pin;
 8001066:	88fb      	ldrh	r3, [r7, #6]
 8001068:	4a10      	ldr	r2, [pc, #64]	; (80010ac <HAL_GPIO_EXTI_Callback+0x94>)
 800106a:	6013      	str	r3, [r2, #0]
		now_floor = 2;
 800106c:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <HAL_GPIO_EXTI_Callback+0x98>)
 800106e:	2202      	movs	r2, #2
 8001070:	601a      	str	r2, [r3, #0]
		i2c_lcd_main();
 8001072:	f7ff fec9 	bl	8000e08 <i2c_lcd_main>
		break;
 8001076:	e014      	b.n	80010a2 <HAL_GPIO_EXTI_Callback+0x8a>
	case PHOTO2_Pin:  // 3 floor
		ext_int_no = GPIO_Pin;
 8001078:	88fb      	ldrh	r3, [r7, #6]
 800107a:	4a0c      	ldr	r2, [pc, #48]	; (80010ac <HAL_GPIO_EXTI_Callback+0x94>)
 800107c:	6013      	str	r3, [r2, #0]
		now_floor = 3;
 800107e:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <HAL_GPIO_EXTI_Callback+0x98>)
 8001080:	2203      	movs	r2, #3
 8001082:	601a      	str	r2, [r3, #0]
		i2c_lcd_main();
 8001084:	f7ff fec0 	bl	8000e08 <i2c_lcd_main>
		break;
 8001088:	e00b      	b.n	80010a2 <HAL_GPIO_EXTI_Callback+0x8a>
	case PHOTO4_Pin:  // 4 floor
		ext_int_no = GPIO_Pin;
 800108a:	88fb      	ldrh	r3, [r7, #6]
 800108c:	4a07      	ldr	r2, [pc, #28]	; (80010ac <HAL_GPIO_EXTI_Callback+0x94>)
 800108e:	6013      	str	r3, [r2, #0]
		now_floor = 4;
 8001090:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <HAL_GPIO_EXTI_Callback+0x98>)
 8001092:	2204      	movs	r2, #4
 8001094:	601a      	str	r2, [r3, #0]
		stop_motor();
 8001096:	f7ff fc75 	bl	8000984 <stop_motor>
		i2c_lcd_main();
 800109a:	f7ff feb5 	bl	8000e08 <i2c_lcd_main>
		break;
 800109e:	e000      	b.n	80010a2 <HAL_GPIO_EXTI_Callback+0x8a>
	default:
		break;
 80010a0:	bf00      	nop
	}
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	2000009c 	.word	0x2000009c
 80010b0:	20000094 	.word	0x20000094

080010b4 <HAL_ADC_ConvCpltCallback>:

uint16_t adcValue[4];
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a08      	ldr	r2, [pc, #32]	; (80010e4 <HAL_ADC_ConvCpltCallback+0x30>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d109      	bne.n	80010da <HAL_ADC_ConvCpltCallback+0x26>
	{
		adcValue[0] = HAL_ADC_GetValue(&hadc1);
 80010c6:	4808      	ldr	r0, [pc, #32]	; (80010e8 <HAL_ADC_ConvCpltCallback+0x34>)
 80010c8:	f001 ffae 	bl	8003028 <HAL_ADC_GetValue>
 80010cc:	4603      	mov	r3, r0
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <HAL_ADC_ConvCpltCallback+0x38>)
 80010d2:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Start_IT(&hadc1);
 80010d4:	4804      	ldr	r0, [pc, #16]	; (80010e8 <HAL_ADC_ConvCpltCallback+0x34>)
 80010d6:	f001 fdb9 	bl	8002c4c <HAL_ADC_Start_IT>
	}
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40012000 	.word	0x40012000
 80010e8:	20000318 	.word	0x20000318
 80010ec:	20000be4 	.word	0x20000be4

080010f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f4:	f001 fd00 	bl	8002af8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f8:	f000 f8a6 	bl	8001248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010fc:	f000 fc86 	bl	8001a0c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001100:	f000 fc02 	bl	8001908 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001104:	f000 fc54 	bl	80019b0 <MX_USB_OTG_FS_PCD_Init>
  MX_USART6_UART_Init();
 8001108:	f000 fc28 	bl	800195c <MX_USART6_UART_Init>
  MX_TIM10_Init();
 800110c:	f000 fbb4 	bl	8001878 <MX_TIM10_Init>
  MX_TIM11_Init();
 8001110:	f000 fbd6 	bl	80018c0 <MX_TIM11_Init>
  MX_TIM3_Init();
 8001114:	f000 fa98 	bl	8001648 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001118:	f000 faea 	bl	80016f0 <MX_TIM4_Init>
  MX_TIM2_Init();
 800111c:	f000 fa3a 	bl	8001594 <MX_TIM2_Init>
  MX_RTC_Init();
 8001120:	f000 f9de 	bl	80014e0 <MX_RTC_Init>
  MX_TIM5_Init();
 8001124:	f000 fb32 	bl	800178c <MX_TIM5_Init>
  MX_I2C1_Init();
 8001128:	f000 f99a 	bl	8001460 <MX_I2C1_Init>
  MX_ADC1_Init();
 800112c:	f000 f8f8 	bl	8001320 <MX_ADC1_Init>
  MX_ETH_Init();
 8001130:	f000 f948 	bl	80013c4 <MX_ETH_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &rx_data, 1);   // assing to RX INT
 8001134:	2201      	movs	r2, #1
 8001136:	492a      	ldr	r1, [pc, #168]	; (80011e0 <main+0xf0>)
 8001138:	482a      	ldr	r0, [pc, #168]	; (80011e4 <main+0xf4>)
 800113a:	f006 fcbc 	bl	8007ab6 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);   // for BT assing to RX INT
 800113e:	2201      	movs	r2, #1
 8001140:	4929      	ldr	r1, [pc, #164]	; (80011e8 <main+0xf8>)
 8001142:	482a      	ldr	r0, [pc, #168]	; (80011ec <main+0xfc>)
 8001144:	f006 fcb7 	bl	8007ab6 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim10);   // ADD_SIKWON_1011
 8001148:	4829      	ldr	r0, [pc, #164]	; (80011f0 <main+0x100>)
 800114a:	f004 ff65 	bl	8006018 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);   // ADD_SIKWON_1011
 800114e:	4829      	ldr	r0, [pc, #164]	; (80011f4 <main+0x104>)
 8001150:	f004 ff62 	bl	8006018 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);   // for count pulse(rising edge & falling edge)
 8001154:	2100      	movs	r1, #0
 8001156:	4828      	ldr	r0, [pc, #160]	; (80011f8 <main+0x108>)
 8001158:	f005 fa4c 	bl	80065f4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1);  // for DC motor PWM control
 800115c:	2100      	movs	r1, #0
 800115e:	4827      	ldr	r0, [pc, #156]	; (80011fc <main+0x10c>)
 8001160:	f005 f8e2 	bl	8006328 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);   // for SERVO motor PWM control
 8001164:	2100      	movs	r1, #0
 8001166:	4826      	ldr	r0, [pc, #152]	; (8001200 <main+0x110>)
 8001168:	f005 f816 	bl	8006198 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);   // PIEZO Buzzer
 800116c:	210c      	movs	r1, #12
 800116e:	4825      	ldr	r0, [pc, #148]	; (8001204 <main+0x114>)
 8001170:	f005 f812 	bl	8006198 <HAL_TIM_PWM_Start>
  HAL_ADC_Start_IT(&hadc1);
 8001174:	4824      	ldr	r0, [pc, #144]	; (8001208 <main+0x118>)
 8001176:	f001 fd69 	bl	8002c4c <HAL_ADC_Start_IT>
//  DHT11_Init();

  i2c_lcd_init();
 800117a:	f7ff fedd 	bl	8000f38 <i2c_lcd_init>


  init_dotmatrix_stop();
 800117e:	f7ff fa41 	bl	8000604 <init_dotmatrix_stop>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001182:	f007 ff77 	bl	8009074 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001186:	4a21      	ldr	r2, [pc, #132]	; (800120c <main+0x11c>)
 8001188:	2100      	movs	r1, #0
 800118a:	4821      	ldr	r0, [pc, #132]	; (8001210 <main+0x120>)
 800118c:	f007 ffbc 	bl	8009108 <osThreadNew>
 8001190:	4603      	mov	r3, r0
 8001192:	4a20      	ldr	r2, [pc, #128]	; (8001214 <main+0x124>)
 8001194:	6013      	str	r3, [r2, #0]

  /* creation of Task1 */
  Task1Handle = osThreadNew(Task1_func, NULL, &Task1_attributes);
 8001196:	4a20      	ldr	r2, [pc, #128]	; (8001218 <main+0x128>)
 8001198:	2100      	movs	r1, #0
 800119a:	4820      	ldr	r0, [pc, #128]	; (800121c <main+0x12c>)
 800119c:	f007 ffb4 	bl	8009108 <osThreadNew>
 80011a0:	4603      	mov	r3, r0
 80011a2:	4a1f      	ldr	r2, [pc, #124]	; (8001220 <main+0x130>)
 80011a4:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(Task2_func, NULL, &Task2_attributes);
 80011a6:	4a1f      	ldr	r2, [pc, #124]	; (8001224 <main+0x134>)
 80011a8:	2100      	movs	r1, #0
 80011aa:	481f      	ldr	r0, [pc, #124]	; (8001228 <main+0x138>)
 80011ac:	f007 ffac 	bl	8009108 <osThreadNew>
 80011b0:	4603      	mov	r3, r0
 80011b2:	4a1e      	ldr	r2, [pc, #120]	; (800122c <main+0x13c>)
 80011b4:	6013      	str	r3, [r2, #0]

  /* creation of Task3 */
  Task3Handle = osThreadNew(Task3_func, NULL, &Task3_attributes);
 80011b6:	4a1e      	ldr	r2, [pc, #120]	; (8001230 <main+0x140>)
 80011b8:	2100      	movs	r1, #0
 80011ba:	481e      	ldr	r0, [pc, #120]	; (8001234 <main+0x144>)
 80011bc:	f007 ffa4 	bl	8009108 <osThreadNew>
 80011c0:	4603      	mov	r3, r0
 80011c2:	4a1d      	ldr	r2, [pc, #116]	; (8001238 <main+0x148>)
 80011c4:	6013      	str	r3, [r2, #0]

  /* creation of Task4 */
  Task4Handle = osThreadNew(Task4_func, NULL, &Task4_attributes);
 80011c6:	4a1d      	ldr	r2, [pc, #116]	; (800123c <main+0x14c>)
 80011c8:	2100      	movs	r1, #0
 80011ca:	481d      	ldr	r0, [pc, #116]	; (8001240 <main+0x150>)
 80011cc:	f007 ff9c 	bl	8009108 <osThreadNew>
 80011d0:	4603      	mov	r3, r0
 80011d2:	4a1c      	ldr	r2, [pc, #112]	; (8001244 <main+0x154>)
 80011d4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */
  i2c_lcd_main();
 80011d6:	f7ff fe17 	bl	8000e08 <i2c_lcd_main>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */
  /* Start scheduler */
  osKernelStart();
 80011da:	f007 ff6f 	bl	80090bc <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011de:	e7fe      	b.n	80011de <main+0xee>
 80011e0:	20000bdc 	.word	0x20000bdc
 80011e4:	20000634 	.word	0x20000634
 80011e8:	20000bdd 	.word	0x20000bdd
 80011ec:	20000678 	.word	0x20000678
 80011f0:	200005a4 	.word	0x200005a4
 80011f4:	200005ec 	.word	0x200005ec
 80011f8:	200004cc 	.word	0x200004cc
 80011fc:	20000514 	.word	0x20000514
 8001200:	20000484 	.word	0x20000484
 8001204:	2000055c 	.word	0x2000055c
 8001208:	20000318 	.word	0x20000318
 800120c:	0800cecc 	.word	0x0800cecc
 8001210:	08001cc9 	.word	0x08001cc9
 8001214:	20000bc8 	.word	0x20000bc8
 8001218:	0800cef0 	.word	0x0800cef0
 800121c:	08001cd9 	.word	0x08001cd9
 8001220:	20000bcc 	.word	0x20000bcc
 8001224:	0800cf14 	.word	0x0800cf14
 8001228:	08001ced 	.word	0x08001ced
 800122c:	20000bd0 	.word	0x20000bd0
 8001230:	0800cf38 	.word	0x0800cf38
 8001234:	08001d01 	.word	0x08001d01
 8001238:	20000bd4 	.word	0x20000bd4
 800123c:	0800cf5c 	.word	0x0800cf5c
 8001240:	08001d15 	.word	0x08001d15
 8001244:	20000bd8 	.word	0x20000bd8

08001248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b094      	sub	sp, #80	; 0x50
 800124c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800124e:	f107 0320 	add.w	r3, r7, #32
 8001252:	2230      	movs	r2, #48	; 0x30
 8001254:	2100      	movs	r1, #0
 8001256:	4618      	mov	r0, r3
 8001258:	f00a fdb9 	bl	800bdce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800125c:	f107 030c 	add.w	r3, r7, #12
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800126c:	2300      	movs	r3, #0
 800126e:	60bb      	str	r3, [r7, #8]
 8001270:	4b29      	ldr	r3, [pc, #164]	; (8001318 <SystemClock_Config+0xd0>)
 8001272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001274:	4a28      	ldr	r2, [pc, #160]	; (8001318 <SystemClock_Config+0xd0>)
 8001276:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800127a:	6413      	str	r3, [r2, #64]	; 0x40
 800127c:	4b26      	ldr	r3, [pc, #152]	; (8001318 <SystemClock_Config+0xd0>)
 800127e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001284:	60bb      	str	r3, [r7, #8]
 8001286:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001288:	2300      	movs	r3, #0
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	4b23      	ldr	r3, [pc, #140]	; (800131c <SystemClock_Config+0xd4>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a22      	ldr	r2, [pc, #136]	; (800131c <SystemClock_Config+0xd4>)
 8001292:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001296:	6013      	str	r3, [r2, #0]
 8001298:	4b20      	ldr	r3, [pc, #128]	; (800131c <SystemClock_Config+0xd4>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80012a4:	2309      	movs	r3, #9
 80012a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80012a8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80012ae:	2301      	movs	r3, #1
 80012b0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012b2:	2302      	movs	r3, #2
 80012b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012bc:	2304      	movs	r3, #4
 80012be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80012c0:	23a8      	movs	r3, #168	; 0xa8
 80012c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012c4:	2302      	movs	r3, #2
 80012c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012c8:	2307      	movs	r3, #7
 80012ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012cc:	f107 0320 	add.w	r3, r7, #32
 80012d0:	4618      	mov	r0, r3
 80012d2:	f003 fd93 	bl	8004dfc <HAL_RCC_OscConfig>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80012dc:	f000 fd6e 	bl	8001dbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012e0:	230f      	movs	r3, #15
 80012e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012e4:	2302      	movs	r3, #2
 80012e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012f8:	f107 030c 	add.w	r3, r7, #12
 80012fc:	2105      	movs	r1, #5
 80012fe:	4618      	mov	r0, r3
 8001300:	f003 fff4 	bl	80052ec <HAL_RCC_ClockConfig>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800130a:	f000 fd57 	bl	8001dbc <Error_Handler>
  }
}
 800130e:	bf00      	nop
 8001310:	3750      	adds	r7, #80	; 0x50
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40023800 	.word	0x40023800
 800131c:	40007000 	.word	0x40007000

08001320 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001326:	463b      	mov	r3, r7
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001332:	4b21      	ldr	r3, [pc, #132]	; (80013b8 <MX_ADC1_Init+0x98>)
 8001334:	4a21      	ldr	r2, [pc, #132]	; (80013bc <MX_ADC1_Init+0x9c>)
 8001336:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001338:	4b1f      	ldr	r3, [pc, #124]	; (80013b8 <MX_ADC1_Init+0x98>)
 800133a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800133e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001340:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <MX_ADC1_Init+0x98>)
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001346:	4b1c      	ldr	r3, [pc, #112]	; (80013b8 <MX_ADC1_Init+0x98>)
 8001348:	2200      	movs	r2, #0
 800134a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800134c:	4b1a      	ldr	r3, [pc, #104]	; (80013b8 <MX_ADC1_Init+0x98>)
 800134e:	2201      	movs	r2, #1
 8001350:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001352:	4b19      	ldr	r3, [pc, #100]	; (80013b8 <MX_ADC1_Init+0x98>)
 8001354:	2200      	movs	r2, #0
 8001356:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800135a:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <MX_ADC1_Init+0x98>)
 800135c:	2200      	movs	r2, #0
 800135e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001360:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <MX_ADC1_Init+0x98>)
 8001362:	4a17      	ldr	r2, [pc, #92]	; (80013c0 <MX_ADC1_Init+0xa0>)
 8001364:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001366:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <MX_ADC1_Init+0x98>)
 8001368:	2200      	movs	r2, #0
 800136a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800136c:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <MX_ADC1_Init+0x98>)
 800136e:	2201      	movs	r2, #1
 8001370:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001372:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <MX_ADC1_Init+0x98>)
 8001374:	2200      	movs	r2, #0
 8001376:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800137a:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <MX_ADC1_Init+0x98>)
 800137c:	2201      	movs	r2, #1
 800137e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001380:	480d      	ldr	r0, [pc, #52]	; (80013b8 <MX_ADC1_Init+0x98>)
 8001382:	f001 fc1f 	bl	8002bc4 <HAL_ADC_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800138c:	f000 fd16 	bl	8001dbc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001390:	2304      	movs	r3, #4
 8001392:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001394:	2301      	movs	r3, #1
 8001396:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001398:	2307      	movs	r3, #7
 800139a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800139c:	463b      	mov	r3, r7
 800139e:	4619      	mov	r1, r3
 80013a0:	4805      	ldr	r0, [pc, #20]	; (80013b8 <MX_ADC1_Init+0x98>)
 80013a2:	f001 fe63 	bl	800306c <HAL_ADC_ConfigChannel>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80013ac:	f000 fd06 	bl	8001dbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013b0:	bf00      	nop
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20000318 	.word	0x20000318
 80013bc:	40012000 	.word	0x40012000
 80013c0:	0f000001 	.word	0x0f000001

080013c4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80013c8:	4b1f      	ldr	r3, [pc, #124]	; (8001448 <MX_ETH_Init+0x84>)
 80013ca:	4a20      	ldr	r2, [pc, #128]	; (800144c <MX_ETH_Init+0x88>)
 80013cc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80013ce:	4b20      	ldr	r3, [pc, #128]	; (8001450 <MX_ETH_Init+0x8c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80013d4:	4b1e      	ldr	r3, [pc, #120]	; (8001450 <MX_ETH_Init+0x8c>)
 80013d6:	2280      	movs	r2, #128	; 0x80
 80013d8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80013da:	4b1d      	ldr	r3, [pc, #116]	; (8001450 <MX_ETH_Init+0x8c>)
 80013dc:	22e1      	movs	r2, #225	; 0xe1
 80013de:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80013e0:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <MX_ETH_Init+0x8c>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80013e6:	4b1a      	ldr	r3, [pc, #104]	; (8001450 <MX_ETH_Init+0x8c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80013ec:	4b18      	ldr	r3, [pc, #96]	; (8001450 <MX_ETH_Init+0x8c>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80013f2:	4b15      	ldr	r3, [pc, #84]	; (8001448 <MX_ETH_Init+0x84>)
 80013f4:	4a16      	ldr	r2, [pc, #88]	; (8001450 <MX_ETH_Init+0x8c>)
 80013f6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80013f8:	4b13      	ldr	r3, [pc, #76]	; (8001448 <MX_ETH_Init+0x84>)
 80013fa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80013fe:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001400:	4b11      	ldr	r3, [pc, #68]	; (8001448 <MX_ETH_Init+0x84>)
 8001402:	4a14      	ldr	r2, [pc, #80]	; (8001454 <MX_ETH_Init+0x90>)
 8001404:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001406:	4b10      	ldr	r3, [pc, #64]	; (8001448 <MX_ETH_Init+0x84>)
 8001408:	4a13      	ldr	r2, [pc, #76]	; (8001458 <MX_ETH_Init+0x94>)
 800140a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800140c:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <MX_ETH_Init+0x84>)
 800140e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001412:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001414:	480c      	ldr	r0, [pc, #48]	; (8001448 <MX_ETH_Init+0x84>)
 8001416:	f002 f9d5 	bl	80037c4 <HAL_ETH_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001420:	f000 fccc 	bl	8001dbc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001424:	2238      	movs	r2, #56	; 0x38
 8001426:	2100      	movs	r1, #0
 8001428:	480c      	ldr	r0, [pc, #48]	; (800145c <MX_ETH_Init+0x98>)
 800142a:	f00a fcd0 	bl	800bdce <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800142e:	4b0b      	ldr	r3, [pc, #44]	; (800145c <MX_ETH_Init+0x98>)
 8001430:	2221      	movs	r2, #33	; 0x21
 8001432:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001434:	4b09      	ldr	r3, [pc, #36]	; (800145c <MX_ETH_Init+0x98>)
 8001436:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800143a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800143c:	4b07      	ldr	r3, [pc, #28]	; (800145c <MX_ETH_Init+0x98>)
 800143e:	2200      	movs	r2, #0
 8001440:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000360 	.word	0x20000360
 800144c:	40028000 	.word	0x40028000
 8001450:	20000bec 	.word	0x20000bec
 8001454:	20000278 	.word	0x20000278
 8001458:	200001d8 	.word	0x200001d8
 800145c:	200001a0 	.word	0x200001a0

08001460 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001464:	4b1b      	ldr	r3, [pc, #108]	; (80014d4 <MX_I2C1_Init+0x74>)
 8001466:	4a1c      	ldr	r2, [pc, #112]	; (80014d8 <MX_I2C1_Init+0x78>)
 8001468:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800146a:	4b1a      	ldr	r3, [pc, #104]	; (80014d4 <MX_I2C1_Init+0x74>)
 800146c:	4a1b      	ldr	r2, [pc, #108]	; (80014dc <MX_I2C1_Init+0x7c>)
 800146e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001470:	4b18      	ldr	r3, [pc, #96]	; (80014d4 <MX_I2C1_Init+0x74>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001476:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <MX_I2C1_Init+0x74>)
 8001478:	2200      	movs	r2, #0
 800147a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800147c:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <MX_I2C1_Init+0x74>)
 800147e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001482:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001484:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <MX_I2C1_Init+0x74>)
 8001486:	2200      	movs	r2, #0
 8001488:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800148a:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <MX_I2C1_Init+0x74>)
 800148c:	2200      	movs	r2, #0
 800148e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001490:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <MX_I2C1_Init+0x74>)
 8001492:	2200      	movs	r2, #0
 8001494:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001496:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <MX_I2C1_Init+0x74>)
 8001498:	2200      	movs	r2, #0
 800149a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800149c:	480d      	ldr	r0, [pc, #52]	; (80014d4 <MX_I2C1_Init+0x74>)
 800149e:	f002 fec9 	bl	8004234 <HAL_I2C_Init>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014a8:	f000 fc88 	bl	8001dbc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014ac:	2100      	movs	r1, #0
 80014ae:	4809      	ldr	r0, [pc, #36]	; (80014d4 <MX_I2C1_Init+0x74>)
 80014b0:	f003 fb0b 	bl	8004aca <HAL_I2CEx_ConfigAnalogFilter>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80014ba:	f000 fc7f 	bl	8001dbc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014be:	2100      	movs	r1, #0
 80014c0:	4804      	ldr	r0, [pc, #16]	; (80014d4 <MX_I2C1_Init+0x74>)
 80014c2:	f003 fb3e 	bl	8004b42 <HAL_I2CEx_ConfigDigitalFilter>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80014cc:	f000 fc76 	bl	8001dbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20000410 	.word	0x20000410
 80014d8:	40005400 	.word	0x40005400
 80014dc:	000186a0 	.word	0x000186a0

080014e0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80014f4:	2300      	movs	r3, #0
 80014f6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80014f8:	4b24      	ldr	r3, [pc, #144]	; (800158c <MX_RTC_Init+0xac>)
 80014fa:	4a25      	ldr	r2, [pc, #148]	; (8001590 <MX_RTC_Init+0xb0>)
 80014fc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80014fe:	4b23      	ldr	r3, [pc, #140]	; (800158c <MX_RTC_Init+0xac>)
 8001500:	2200      	movs	r2, #0
 8001502:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001504:	4b21      	ldr	r3, [pc, #132]	; (800158c <MX_RTC_Init+0xac>)
 8001506:	227f      	movs	r2, #127	; 0x7f
 8001508:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800150a:	4b20      	ldr	r3, [pc, #128]	; (800158c <MX_RTC_Init+0xac>)
 800150c:	22ff      	movs	r2, #255	; 0xff
 800150e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001510:	4b1e      	ldr	r3, [pc, #120]	; (800158c <MX_RTC_Init+0xac>)
 8001512:	2200      	movs	r2, #0
 8001514:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001516:	4b1d      	ldr	r3, [pc, #116]	; (800158c <MX_RTC_Init+0xac>)
 8001518:	2200      	movs	r2, #0
 800151a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800151c:	4b1b      	ldr	r3, [pc, #108]	; (800158c <MX_RTC_Init+0xac>)
 800151e:	2200      	movs	r2, #0
 8001520:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001522:	481a      	ldr	r0, [pc, #104]	; (800158c <MX_RTC_Init+0xac>)
 8001524:	f004 faf4 	bl	8005b10 <HAL_RTC_Init>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800152e:	f000 fc45 	bl	8001dbc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x9;
 8001532:	2309      	movs	r3, #9
 8001534:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x38;
 8001536:	2338      	movs	r3, #56	; 0x38
 8001538:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800153a:	2300      	movs	r3, #0
 800153c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001546:	1d3b      	adds	r3, r7, #4
 8001548:	2201      	movs	r2, #1
 800154a:	4619      	mov	r1, r3
 800154c:	480f      	ldr	r0, [pc, #60]	; (800158c <MX_RTC_Init+0xac>)
 800154e:	f004 fb55 	bl	8005bfc <HAL_RTC_SetTime>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001558:	f000 fc30 	bl	8001dbc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800155c:	2301      	movs	r3, #1
 800155e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_OCTOBER;
 8001560:	2310      	movs	r3, #16
 8001562:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x16;
 8001564:	2316      	movs	r3, #22
 8001566:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8001568:	2323      	movs	r3, #35	; 0x23
 800156a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800156c:	463b      	mov	r3, r7
 800156e:	2201      	movs	r2, #1
 8001570:	4619      	mov	r1, r3
 8001572:	4806      	ldr	r0, [pc, #24]	; (800158c <MX_RTC_Init+0xac>)
 8001574:	f004 fbdc 	bl	8005d30 <HAL_RTC_SetDate>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800157e:	f000 fc1d 	bl	8001dbc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001582:	bf00      	nop
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000464 	.word	0x20000464
 8001590:	40002800 	.word	0x40002800

08001594 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08a      	sub	sp, #40	; 0x28
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800159a:	f107 0320 	add.w	r3, r7, #32
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015a4:	1d3b      	adds	r3, r7, #4
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	605a      	str	r2, [r3, #4]
 80015ac:	609a      	str	r2, [r3, #8]
 80015ae:	60da      	str	r2, [r3, #12]
 80015b0:	611a      	str	r2, [r3, #16]
 80015b2:	615a      	str	r2, [r3, #20]
 80015b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015b6:	4b23      	ldr	r3, [pc, #140]	; (8001644 <MX_TIM2_Init+0xb0>)
 80015b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 80015be:	4b21      	ldr	r3, [pc, #132]	; (8001644 <MX_TIM2_Init+0xb0>)
 80015c0:	f240 628f 	movw	r2, #1679	; 0x68f
 80015c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c6:	4b1f      	ldr	r3, [pc, #124]	; (8001644 <MX_TIM2_Init+0xb0>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80015cc:	4b1d      	ldr	r3, [pc, #116]	; (8001644 <MX_TIM2_Init+0xb0>)
 80015ce:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d4:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <MX_TIM2_Init+0xb0>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015da:	4b1a      	ldr	r3, [pc, #104]	; (8001644 <MX_TIM2_Init+0xb0>)
 80015dc:	2200      	movs	r2, #0
 80015de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015e0:	4818      	ldr	r0, [pc, #96]	; (8001644 <MX_TIM2_Init+0xb0>)
 80015e2:	f004 fd89 	bl	80060f8 <HAL_TIM_PWM_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80015ec:	f000 fbe6 	bl	8001dbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f0:	2300      	movs	r3, #0
 80015f2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015f8:	f107 0320 	add.w	r3, r7, #32
 80015fc:	4619      	mov	r1, r3
 80015fe:	4811      	ldr	r0, [pc, #68]	; (8001644 <MX_TIM2_Init+0xb0>)
 8001600:	f006 f8ea 	bl	80077d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800160a:	f000 fbd7 	bl	8001dbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800160e:	2360      	movs	r3, #96	; 0x60
 8001610:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8001612:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001616:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001618:	2300      	movs	r3, #0
 800161a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001620:	1d3b      	adds	r3, r7, #4
 8001622:	2200      	movs	r2, #0
 8001624:	4619      	mov	r1, r3
 8001626:	4807      	ldr	r0, [pc, #28]	; (8001644 <MX_TIM2_Init+0xb0>)
 8001628:	f005 fab0 	bl	8006b8c <HAL_TIM_PWM_ConfigChannel>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001632:	f000 fbc3 	bl	8001dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001636:	4803      	ldr	r0, [pc, #12]	; (8001644 <MX_TIM2_Init+0xb0>)
 8001638:	f000 fe6e 	bl	8002318 <HAL_TIM_MspPostInit>

}
 800163c:	bf00      	nop
 800163e:	3728      	adds	r7, #40	; 0x28
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000484 	.word	0x20000484

08001648 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800164e:	f107 0310 	add.w	r3, r7, #16
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001658:	463b      	mov	r3, r7
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	605a      	str	r2, [r3, #4]
 8001660:	609a      	str	r2, [r3, #8]
 8001662:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001664:	4b20      	ldr	r3, [pc, #128]	; (80016e8 <MX_TIM3_Init+0xa0>)
 8001666:	4a21      	ldr	r2, [pc, #132]	; (80016ec <MX_TIM3_Init+0xa4>)
 8001668:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 800166a:	4b1f      	ldr	r3, [pc, #124]	; (80016e8 <MX_TIM3_Init+0xa0>)
 800166c:	2253      	movs	r2, #83	; 0x53
 800166e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001670:	4b1d      	ldr	r3, [pc, #116]	; (80016e8 <MX_TIM3_Init+0xa0>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001676:	4b1c      	ldr	r3, [pc, #112]	; (80016e8 <MX_TIM3_Init+0xa0>)
 8001678:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800167c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800167e:	4b1a      	ldr	r3, [pc, #104]	; (80016e8 <MX_TIM3_Init+0xa0>)
 8001680:	2200      	movs	r2, #0
 8001682:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001684:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <MX_TIM3_Init+0xa0>)
 8001686:	2200      	movs	r2, #0
 8001688:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800168a:	4817      	ldr	r0, [pc, #92]	; (80016e8 <MX_TIM3_Init+0xa0>)
 800168c:	f004 ff62 	bl	8006554 <HAL_TIM_IC_Init>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001696:	f000 fb91 	bl	8001dbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800169a:	2300      	movs	r3, #0
 800169c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016a2:	f107 0310 	add.w	r3, r7, #16
 80016a6:	4619      	mov	r1, r3
 80016a8:	480f      	ldr	r0, [pc, #60]	; (80016e8 <MX_TIM3_Init+0xa0>)
 80016aa:	f006 f895 	bl	80077d8 <HAL_TIMEx_MasterConfigSynchronization>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80016b4:	f000 fb82 	bl	8001dbc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80016b8:	230a      	movs	r3, #10
 80016ba:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80016bc:	2301      	movs	r3, #1
 80016be:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80016c0:	2300      	movs	r3, #0
 80016c2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80016c8:	463b      	mov	r3, r7
 80016ca:	2200      	movs	r2, #0
 80016cc:	4619      	mov	r1, r3
 80016ce:	4806      	ldr	r0, [pc, #24]	; (80016e8 <MX_TIM3_Init+0xa0>)
 80016d0:	f005 f9c0 	bl	8006a54 <HAL_TIM_IC_ConfigChannel>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80016da:	f000 fb6f 	bl	8001dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80016de:	bf00      	nop
 80016e0:	3718      	adds	r7, #24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	200004cc 	.word	0x200004cc
 80016ec:	40000400 	.word	0x40000400

080016f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016f6:	f107 0308 	add.w	r3, r7, #8
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	609a      	str	r2, [r3, #8]
 8001702:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001704:	463b      	mov	r3, r7
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800170c:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <MX_TIM4_Init+0x94>)
 800170e:	4a1e      	ldr	r2, [pc, #120]	; (8001788 <MX_TIM4_Init+0x98>)
 8001710:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840-1;
 8001712:	4b1c      	ldr	r3, [pc, #112]	; (8001784 <MX_TIM4_Init+0x94>)
 8001714:	f240 3247 	movw	r2, #839	; 0x347
 8001718:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800171a:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <MX_TIM4_Init+0x94>)
 800171c:	2200      	movs	r2, #0
 800171e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8001720:	4b18      	ldr	r3, [pc, #96]	; (8001784 <MX_TIM4_Init+0x94>)
 8001722:	2263      	movs	r2, #99	; 0x63
 8001724:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001726:	4b17      	ldr	r3, [pc, #92]	; (8001784 <MX_TIM4_Init+0x94>)
 8001728:	2200      	movs	r2, #0
 800172a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800172c:	4b15      	ldr	r3, [pc, #84]	; (8001784 <MX_TIM4_Init+0x94>)
 800172e:	2200      	movs	r2, #0
 8001730:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001732:	4814      	ldr	r0, [pc, #80]	; (8001784 <MX_TIM4_Init+0x94>)
 8001734:	f004 fc21 	bl	8005f7a <HAL_TIM_Base_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800173e:	f000 fb3d 	bl	8001dbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001742:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001746:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001748:	f107 0308 	add.w	r3, r7, #8
 800174c:	4619      	mov	r1, r3
 800174e:	480d      	ldr	r0, [pc, #52]	; (8001784 <MX_TIM4_Init+0x94>)
 8001750:	f005 fade 	bl	8006d10 <HAL_TIM_ConfigClockSource>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800175a:	f000 fb2f 	bl	8001dbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800175e:	2300      	movs	r3, #0
 8001760:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001762:	2300      	movs	r3, #0
 8001764:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001766:	463b      	mov	r3, r7
 8001768:	4619      	mov	r1, r3
 800176a:	4806      	ldr	r0, [pc, #24]	; (8001784 <MX_TIM4_Init+0x94>)
 800176c:	f006 f834 	bl	80077d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001776:	f000 fb21 	bl	8001dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800177a:	bf00      	nop
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000514 	.word	0x20000514
 8001788:	40000800 	.word	0x40000800

0800178c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08e      	sub	sp, #56	; 0x38
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001792:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a0:	f107 0320 	add.w	r3, r7, #32
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017aa:	1d3b      	adds	r3, r7, #4
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	611a      	str	r2, [r3, #16]
 80017b8:	615a      	str	r2, [r3, #20]
 80017ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80017bc:	4b2c      	ldr	r3, [pc, #176]	; (8001870 <MX_TIM5_Init+0xe4>)
 80017be:	4a2d      	ldr	r2, [pc, #180]	; (8001874 <MX_TIM5_Init+0xe8>)
 80017c0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 52.5-1;
 80017c2:	4b2b      	ldr	r3, [pc, #172]	; (8001870 <MX_TIM5_Init+0xe4>)
 80017c4:	2233      	movs	r2, #51	; 0x33
 80017c6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c8:	4b29      	ldr	r3, [pc, #164]	; (8001870 <MX_TIM5_Init+0xe4>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 400-1;
 80017ce:	4b28      	ldr	r3, [pc, #160]	; (8001870 <MX_TIM5_Init+0xe4>)
 80017d0:	f240 128f 	movw	r2, #399	; 0x18f
 80017d4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d6:	4b26      	ldr	r3, [pc, #152]	; (8001870 <MX_TIM5_Init+0xe4>)
 80017d8:	2200      	movs	r2, #0
 80017da:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017dc:	4b24      	ldr	r3, [pc, #144]	; (8001870 <MX_TIM5_Init+0xe4>)
 80017de:	2200      	movs	r2, #0
 80017e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80017e2:	4823      	ldr	r0, [pc, #140]	; (8001870 <MX_TIM5_Init+0xe4>)
 80017e4:	f004 fbc9 	bl	8005f7a <HAL_TIM_Base_Init>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 80017ee:	f000 fae5 	bl	8001dbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017f6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80017f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017fc:	4619      	mov	r1, r3
 80017fe:	481c      	ldr	r0, [pc, #112]	; (8001870 <MX_TIM5_Init+0xe4>)
 8001800:	f005 fa86 	bl	8006d10 <HAL_TIM_ConfigClockSource>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800180a:	f000 fad7 	bl	8001dbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800180e:	4818      	ldr	r0, [pc, #96]	; (8001870 <MX_TIM5_Init+0xe4>)
 8001810:	f004 fc72 	bl	80060f8 <HAL_TIM_PWM_Init>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800181a:	f000 facf 	bl	8001dbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800181e:	2300      	movs	r3, #0
 8001820:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001822:	2300      	movs	r3, #0
 8001824:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001826:	f107 0320 	add.w	r3, r7, #32
 800182a:	4619      	mov	r1, r3
 800182c:	4810      	ldr	r0, [pc, #64]	; (8001870 <MX_TIM5_Init+0xe4>)
 800182e:	f005 ffd3 	bl	80077d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001838:	f000 fac0 	bl	8001dbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800183c:	2360      	movs	r3, #96	; 0x60
 800183e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 200-1;
 8001840:	23c7      	movs	r3, #199	; 0xc7
 8001842:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001844:	2300      	movs	r3, #0
 8001846:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001848:	2300      	movs	r3, #0
 800184a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800184c:	1d3b      	adds	r3, r7, #4
 800184e:	220c      	movs	r2, #12
 8001850:	4619      	mov	r1, r3
 8001852:	4807      	ldr	r0, [pc, #28]	; (8001870 <MX_TIM5_Init+0xe4>)
 8001854:	f005 f99a 	bl	8006b8c <HAL_TIM_PWM_ConfigChannel>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800185e:	f000 faad 	bl	8001dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001862:	4803      	ldr	r0, [pc, #12]	; (8001870 <MX_TIM5_Init+0xe4>)
 8001864:	f000 fd58 	bl	8002318 <HAL_TIM_MspPostInit>

}
 8001868:	bf00      	nop
 800186a:	3738      	adds	r7, #56	; 0x38
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	2000055c 	.word	0x2000055c
 8001874:	40000c00 	.word	0x40000c00

08001878 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800187c:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <MX_TIM10_Init+0x40>)
 800187e:	4a0f      	ldr	r2, [pc, #60]	; (80018bc <MX_TIM10_Init+0x44>)
 8001880:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 8001882:	4b0d      	ldr	r3, [pc, #52]	; (80018b8 <MX_TIM10_Init+0x40>)
 8001884:	22a7      	movs	r2, #167	; 0xa7
 8001886:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001888:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <MX_TIM10_Init+0x40>)
 800188a:	2200      	movs	r2, #0
 800188c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 800188e:	4b0a      	ldr	r3, [pc, #40]	; (80018b8 <MX_TIM10_Init+0x40>)
 8001890:	f242 720f 	movw	r2, #9999	; 0x270f
 8001894:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001896:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <MX_TIM10_Init+0x40>)
 8001898:	2200      	movs	r2, #0
 800189a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <MX_TIM10_Init+0x40>)
 800189e:	2200      	movs	r2, #0
 80018a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80018a2:	4805      	ldr	r0, [pc, #20]	; (80018b8 <MX_TIM10_Init+0x40>)
 80018a4:	f004 fb69 	bl	8005f7a <HAL_TIM_Base_Init>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80018ae:	f000 fa85 	bl	8001dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	200005a4 	.word	0x200005a4
 80018bc:	40014400 	.word	0x40014400

080018c0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80018c4:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <MX_TIM11_Init+0x40>)
 80018c6:	4a0f      	ldr	r2, [pc, #60]	; (8001904 <MX_TIM11_Init+0x44>)
 80018c8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 168-1;
 80018ca:	4b0d      	ldr	r3, [pc, #52]	; (8001900 <MX_TIM11_Init+0x40>)
 80018cc:	22a7      	movs	r2, #167	; 0xa7
 80018ce:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d0:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <MX_TIM11_Init+0x40>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80018d6:	4b0a      	ldr	r3, [pc, #40]	; (8001900 <MX_TIM11_Init+0x40>)
 80018d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018dc:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018de:	4b08      	ldr	r3, [pc, #32]	; (8001900 <MX_TIM11_Init+0x40>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018e4:	4b06      	ldr	r3, [pc, #24]	; (8001900 <MX_TIM11_Init+0x40>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80018ea:	4805      	ldr	r0, [pc, #20]	; (8001900 <MX_TIM11_Init+0x40>)
 80018ec:	f004 fb45 	bl	8005f7a <HAL_TIM_Base_Init>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80018f6:	f000 fa61 	bl	8001dbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	200005ec 	.word	0x200005ec
 8001904:	40014800 	.word	0x40014800

08001908 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800190c:	4b11      	ldr	r3, [pc, #68]	; (8001954 <MX_USART3_UART_Init+0x4c>)
 800190e:	4a12      	ldr	r2, [pc, #72]	; (8001958 <MX_USART3_UART_Init+0x50>)
 8001910:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001912:	4b10      	ldr	r3, [pc, #64]	; (8001954 <MX_USART3_UART_Init+0x4c>)
 8001914:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001918:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800191a:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <MX_USART3_UART_Init+0x4c>)
 800191c:	2200      	movs	r2, #0
 800191e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001920:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <MX_USART3_UART_Init+0x4c>)
 8001922:	2200      	movs	r2, #0
 8001924:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001926:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <MX_USART3_UART_Init+0x4c>)
 8001928:	2200      	movs	r2, #0
 800192a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800192c:	4b09      	ldr	r3, [pc, #36]	; (8001954 <MX_USART3_UART_Init+0x4c>)
 800192e:	220c      	movs	r2, #12
 8001930:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001932:	4b08      	ldr	r3, [pc, #32]	; (8001954 <MX_USART3_UART_Init+0x4c>)
 8001934:	2200      	movs	r2, #0
 8001936:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001938:	4b06      	ldr	r3, [pc, #24]	; (8001954 <MX_USART3_UART_Init+0x4c>)
 800193a:	2200      	movs	r2, #0
 800193c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800193e:	4805      	ldr	r0, [pc, #20]	; (8001954 <MX_USART3_UART_Init+0x4c>)
 8001940:	f005 ffda 	bl	80078f8 <HAL_UART_Init>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800194a:	f000 fa37 	bl	8001dbc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000634 	.word	0x20000634
 8001958:	40004800 	.word	0x40004800

0800195c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001960:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <MX_USART6_UART_Init+0x4c>)
 8001962:	4a12      	ldr	r2, [pc, #72]	; (80019ac <MX_USART6_UART_Init+0x50>)
 8001964:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001966:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <MX_USART6_UART_Init+0x4c>)
 8001968:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800196c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800196e:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <MX_USART6_UART_Init+0x4c>)
 8001970:	2200      	movs	r2, #0
 8001972:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001974:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <MX_USART6_UART_Init+0x4c>)
 8001976:	2200      	movs	r2, #0
 8001978:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800197a:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <MX_USART6_UART_Init+0x4c>)
 800197c:	2200      	movs	r2, #0
 800197e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001980:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <MX_USART6_UART_Init+0x4c>)
 8001982:	220c      	movs	r2, #12
 8001984:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001986:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <MX_USART6_UART_Init+0x4c>)
 8001988:	2200      	movs	r2, #0
 800198a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800198c:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <MX_USART6_UART_Init+0x4c>)
 800198e:	2200      	movs	r2, #0
 8001990:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001992:	4805      	ldr	r0, [pc, #20]	; (80019a8 <MX_USART6_UART_Init+0x4c>)
 8001994:	f005 ffb0 	bl	80078f8 <HAL_UART_Init>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800199e:	f000 fa0d 	bl	8001dbc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000678 	.word	0x20000678
 80019ac:	40011400 	.word	0x40011400

080019b0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80019b4:	4b14      	ldr	r3, [pc, #80]	; (8001a08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80019ba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80019bc:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019be:	2204      	movs	r2, #4
 80019c0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80019c2:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019c4:	2202      	movs	r2, #2
 80019c6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80019c8:	4b0f      	ldr	r3, [pc, #60]	; (8001a08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80019ce:	4b0e      	ldr	r3, [pc, #56]	; (8001a08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019d0:	2202      	movs	r2, #2
 80019d2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80019d4:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019d6:	2201      	movs	r2, #1
 80019d8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80019da:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019dc:	2200      	movs	r2, #0
 80019de:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80019e0:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80019e6:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019e8:	2201      	movs	r2, #1
 80019ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80019ec:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80019f2:	4805      	ldr	r0, [pc, #20]	; (8001a08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019f4:	f003 f8e4 	bl	8004bc0 <HAL_PCD_Init>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80019fe:	f000 f9dd 	bl	8001dbc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	200006bc 	.word	0x200006bc

08001a0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08e      	sub	sp, #56	; 0x38
 8001a10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	605a      	str	r2, [r3, #4]
 8001a1c:	609a      	str	r2, [r3, #8]
 8001a1e:	60da      	str	r2, [r3, #12]
 8001a20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	623b      	str	r3, [r7, #32]
 8001a26:	4ba0      	ldr	r3, [pc, #640]	; (8001ca8 <MX_GPIO_Init+0x29c>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	4a9f      	ldr	r2, [pc, #636]	; (8001ca8 <MX_GPIO_Init+0x29c>)
 8001a2c:	f043 0310 	orr.w	r3, r3, #16
 8001a30:	6313      	str	r3, [r2, #48]	; 0x30
 8001a32:	4b9d      	ldr	r3, [pc, #628]	; (8001ca8 <MX_GPIO_Init+0x29c>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	f003 0310 	and.w	r3, r3, #16
 8001a3a:	623b      	str	r3, [r7, #32]
 8001a3c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61fb      	str	r3, [r7, #28]
 8001a42:	4b99      	ldr	r3, [pc, #612]	; (8001ca8 <MX_GPIO_Init+0x29c>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	4a98      	ldr	r2, [pc, #608]	; (8001ca8 <MX_GPIO_Init+0x29c>)
 8001a48:	f043 0304 	orr.w	r3, r3, #4
 8001a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4e:	4b96      	ldr	r3, [pc, #600]	; (8001ca8 <MX_GPIO_Init+0x29c>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	f003 0304 	and.w	r3, r3, #4
 8001a56:	61fb      	str	r3, [r7, #28]
 8001a58:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61bb      	str	r3, [r7, #24]
 8001a5e:	4b92      	ldr	r3, [pc, #584]	; (8001ca8 <MX_GPIO_Init+0x29c>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	4a91      	ldr	r2, [pc, #580]	; (8001ca8 <MX_GPIO_Init+0x29c>)
 8001a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a68:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6a:	4b8f      	ldr	r3, [pc, #572]	; (8001ca8 <MX_GPIO_Init+0x29c>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a72:	61bb      	str	r3, [r7, #24]
 8001a74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
 8001a7a:	4b8b      	ldr	r3, [pc, #556]	; (8001ca8 <MX_GPIO_Init+0x29c>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	4a8a      	ldr	r2, [pc, #552]	; (8001ca8 <MX_GPIO_Init+0x29c>)
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	6313      	str	r3, [r2, #48]	; 0x30
 8001a86:	4b88      	ldr	r3, [pc, #544]	; (8001ca8 <MX_GPIO_Init+0x29c>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	617b      	str	r3, [r7, #20]
 8001a90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	4b84      	ldr	r3, [pc, #528]	; (8001ca8 <MX_GPIO_Init+0x29c>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	4a83      	ldr	r2, [pc, #524]	; (8001ca8 <MX_GPIO_Init+0x29c>)
 8001a9c:	f043 0302 	orr.w	r3, r3, #2
 8001aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa2:	4b81      	ldr	r3, [pc, #516]	; (8001ca8 <MX_GPIO_Init+0x29c>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	613b      	str	r3, [r7, #16]
 8001aac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	4b7d      	ldr	r3, [pc, #500]	; (8001ca8 <MX_GPIO_Init+0x29c>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	4a7c      	ldr	r2, [pc, #496]	; (8001ca8 <MX_GPIO_Init+0x29c>)
 8001ab8:	f043 0320 	orr.w	r3, r3, #32
 8001abc:	6313      	str	r3, [r2, #48]	; 0x30
 8001abe:	4b7a      	ldr	r3, [pc, #488]	; (8001ca8 <MX_GPIO_Init+0x29c>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	f003 0320 	and.w	r3, r3, #32
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	4b76      	ldr	r3, [pc, #472]	; (8001ca8 <MX_GPIO_Init+0x29c>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	4a75      	ldr	r2, [pc, #468]	; (8001ca8 <MX_GPIO_Init+0x29c>)
 8001ad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ada:	4b73      	ldr	r3, [pc, #460]	; (8001ca8 <MX_GPIO_Init+0x29c>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ae2:	60bb      	str	r3, [r7, #8]
 8001ae4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	607b      	str	r3, [r7, #4]
 8001aea:	4b6f      	ldr	r3, [pc, #444]	; (8001ca8 <MX_GPIO_Init+0x29c>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	4a6e      	ldr	r2, [pc, #440]	; (8001ca8 <MX_GPIO_Init+0x29c>)
 8001af0:	f043 0308 	orr.w	r3, r3, #8
 8001af4:	6313      	str	r3, [r2, #48]	; 0x30
 8001af6:	4b6c      	ldr	r3, [pc, #432]	; (8001ca8 <MX_GPIO_Init+0x29c>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	f003 0308 	and.w	r3, r3, #8
 8001afe:	607b      	str	r3, [r7, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin
 8001b02:	2200      	movs	r2, #0
 8001b04:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 8001b08:	4868      	ldr	r0, [pc, #416]	; (8001cac <MX_GPIO_Init+0x2a0>)
 8001b0a:	f002 fb47 	bl	800419c <HAL_GPIO_WritePin>
                          |COL5_Pin|COL6_Pin|COL7_Pin|COL8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2101      	movs	r1, #1
 8001b12:	4867      	ldr	r0, [pc, #412]	; (8001cb0 <MX_GPIO_Init+0x2a4>)
 8001b14:	f002 fb42 	bl	800419c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|FND6_Pin|FND5_Pin|FND8_Pin
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f644 41ff 	movw	r1, #19711	; 0x4cff
 8001b1e:	4865      	ldr	r0, [pc, #404]	; (8001cb4 <MX_GPIO_Init+0x2a8>)
 8001b20:	f002 fb3c 	bl	800419c <HAL_GPIO_WritePin>
                          |FND4_Pin|LD3_Pin|FND3_Pin|FND2_Pin
                          |FND1_Pin|FND7_Pin|LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, GPIO_PIN_RESET);
 8001b24:	2200      	movs	r2, #0
 8001b26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b2a:	4863      	ldr	r0, [pc, #396]	; (8001cb8 <MX_GPIO_Init+0x2ac>)
 8001b2c:	f002 fb36 	bl	800419c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin
 8001b30:	2200      	movs	r2, #0
 8001b32:	f647 01ff 	movw	r1, #30975	; 0x78ff
 8001b36:	4861      	ldr	r0, [pc, #388]	; (8001cbc <MX_GPIO_Init+0x2b0>)
 8001b38:	f002 fb30 	bl	800419c <HAL_GPIO_WritePin>
                          |ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin
                          |ROW5_Pin|ROW6_Pin|ROW7_Pin|ROW8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	2140      	movs	r1, #64	; 0x40
 8001b40:	485f      	ldr	r0, [pc, #380]	; (8001cc0 <MX_GPIO_Init+0x2b4>)
 8001b42:	f002 fb2b 	bl	800419c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : COL1_Pin COL2_Pin COL3_Pin COL4_Pin
                           COL5_Pin COL6_Pin COL7_Pin COL8_Pin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin
 8001b46:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24
                          |COL5_Pin|COL6_Pin|COL7_Pin|COL8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b54:	2300      	movs	r3, #0
 8001b56:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4853      	ldr	r0, [pc, #332]	; (8001cac <MX_GPIO_Init+0x2a0>)
 8001b60:	f002 f958 	bl	8003e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_Btn_Pin PHOTO0_Pin PHOTO1_Pin PHOTO2_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin|PHOTO0_Pin|PHOTO1_Pin|PHOTO2_Pin;
 8001b64:	f242 030d 	movw	r3, #8205	; 0x200d
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b6a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4852      	ldr	r0, [pc, #328]	; (8001cc4 <MX_GPIO_Init+0x2b8>)
 8001b7c:	f002 f94a 	bl	8003e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 8001b80:	2301      	movs	r3, #1
 8001b82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b84:	2301      	movs	r3, #1
 8001b86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8001b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b94:	4619      	mov	r1, r3
 8001b96:	4846      	ldr	r0, [pc, #280]	; (8001cb0 <MX_GPIO_Init+0x2a4>)
 8001b98:	f002 f93c 	bl	8003e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin FND6_Pin FND5_Pin FND8_Pin
                           FND4_Pin LD3_Pin FND3_Pin FND2_Pin
                           FND1_Pin FND7_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|FND6_Pin|FND5_Pin|FND8_Pin
 8001b9c:	f644 43ff 	movw	r3, #19711	; 0x4cff
 8001ba0:	627b      	str	r3, [r7, #36]	; 0x24
                          |FND4_Pin|LD3_Pin|FND3_Pin|FND2_Pin
                          |FND1_Pin|FND7_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001baa:	2300      	movs	r3, #0
 8001bac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	483f      	ldr	r0, [pc, #252]	; (8001cb4 <MX_GPIO_Init+0x2a8>)
 8001bb6:	f002 f92d 	bl	8003e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULTRASONIC_TRIGGER_Pin */
  GPIO_InitStruct.Pin = ULTRASONIC_TRIGGER_Pin;
 8001bba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ULTRASONIC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 8001bcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4839      	ldr	r0, [pc, #228]	; (8001cb8 <MX_GPIO_Init+0x2ac>)
 8001bd4:	f002 f91e 	bl	8003e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PHOTO4_Pin */
  GPIO_InitStruct.Pin = PHOTO4_Pin;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bdc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001be0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PHOTO4_GPIO_Port, &GPIO_InitStruct);
 8001be6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bea:	4619      	mov	r1, r3
 8001bec:	4834      	ldr	r0, [pc, #208]	; (8001cc0 <MX_GPIO_Init+0x2b4>)
 8001bee:	f002 f911 	bl	8003e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON2_Pin BUTTON1_Pin BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON2_Pin|BUTTON1_Pin|BUTTON0_Pin;
 8001bf2:	f44f 4354 	mov.w	r3, #54272	; 0xd400
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c04:	4619      	mov	r1, r3
 8001c06:	4829      	ldr	r0, [pc, #164]	; (8001cac <MX_GPIO_Init+0x2a0>)
 8001c08:	f002 f904 	bl	8003e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_Pin IN2_Pin IN3_Pin IN4_Pin
                           ROW1_Pin ROW2_Pin ROW3_Pin ROW4_Pin
                           ROW5_Pin ROW6_Pin ROW7_Pin ROW8_Pin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin
 8001c0c:	f647 03ff 	movw	r3, #30975	; 0x78ff
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24
                          |ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin
                          |ROW5_Pin|ROW6_Pin|ROW7_Pin|ROW8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c12:	2301      	movs	r3, #1
 8001c14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c22:	4619      	mov	r1, r3
 8001c24:	4825      	ldr	r0, [pc, #148]	; (8001cbc <MX_GPIO_Init+0x2b0>)
 8001c26:	f002 f8f5 	bl	8003e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001c2a:	2340      	movs	r3, #64	; 0x40
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c36:	2300      	movs	r3, #0
 8001c38:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c3e:	4619      	mov	r1, r3
 8001c40:	481f      	ldr	r0, [pc, #124]	; (8001cc0 <MX_GPIO_Init+0x2b4>)
 8001c42:	f002 f8e7 	bl	8003e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001c46:	2380      	movs	r3, #128	; 0x80
 8001c48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c56:	4619      	mov	r1, r3
 8001c58:	4819      	ldr	r0, [pc, #100]	; (8001cc0 <MX_GPIO_Init+0x2b4>)
 8001c5a:	f002 f8db 	bl	8003e14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2105      	movs	r1, #5
 8001c62:	2006      	movs	r0, #6
 8001c64:	f001 fcf2 	bl	800364c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001c68:	2006      	movs	r0, #6
 8001c6a:	f001 fd0b 	bl	8003684 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	2105      	movs	r1, #5
 8001c72:	2007      	movs	r0, #7
 8001c74:	f001 fcea 	bl	800364c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001c78:	2007      	movs	r0, #7
 8001c7a:	f001 fd03 	bl	8003684 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001c7e:	2200      	movs	r2, #0
 8001c80:	2105      	movs	r1, #5
 8001c82:	2008      	movs	r0, #8
 8001c84:	f001 fce2 	bl	800364c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001c88:	2008      	movs	r0, #8
 8001c8a:	f001 fcfb 	bl	8003684 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2105      	movs	r1, #5
 8001c92:	2009      	movs	r0, #9
 8001c94:	f001 fcda 	bl	800364c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001c98:	2009      	movs	r0, #9
 8001c9a:	f001 fcf3 	bl	8003684 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c9e:	bf00      	nop
 8001ca0:	3738      	adds	r7, #56	; 0x38
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	40020000 	.word	0x40020000
 8001cb4:	40020400 	.word	0x40020400
 8001cb8:	40021400 	.word	0x40021400
 8001cbc:	40020c00 	.word	0x40020c00
 8001cc0:	40021800 	.word	0x40021800
 8001cc4:	40020800 	.word	0x40020800

08001cc8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001cd0:	2001      	movs	r0, #1
 8001cd2:	f007 faab 	bl	800922c <osDelay>
 8001cd6:	e7fb      	b.n	8001cd0 <StartDefaultTask+0x8>

08001cd8 <Task1_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task1_func */
void Task1_func(void *argument)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task1_func */
  /* Infinite loop */
  for(;;)
  {
	dotmatrix_main();
 8001ce0:	f7fe fd5a 	bl	8000798 <dotmatrix_main>
    osDelay(1);
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	f007 faa1 	bl	800922c <osDelay>
	dotmatrix_main();
 8001cea:	e7f9      	b.n	8001ce0 <Task1_func+0x8>

08001cec <Task2_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task2_func */
void Task2_func(void *argument)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2_func */
  /* Infinite loop */
  for(;;)
  {
	stepmotor_main();
 8001cf4:	f7fe fe62 	bl	80009bc <stepmotor_main>
    osDelay(1);
 8001cf8:	2001      	movs	r0, #1
 8001cfa:	f007 fa97 	bl	800922c <osDelay>
	stepmotor_main();
 8001cfe:	e7f9      	b.n	8001cf4 <Task2_func+0x8>

08001d00 <Task3_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task3_func */
void Task3_func(void *argument)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task3_func */
  /* Infinite loop */
  for(;;)
  {
	fnd1digit_main();
 8001d08:	f7ff f852 	bl	8000db0 <fnd1digit_main>
    osDelay(1);
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	f007 fa8d 	bl	800922c <osDelay>
	fnd1digit_main();
 8001d12:	e7f9      	b.n	8001d08 <Task3_func+0x8>

08001d14 <Task4_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task4_func */
void Task4_func(void *argument)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task4_func */
  /* Infinite loop */
  for(;;)
  {
	  if (adcValue[0] < 3000)
 8001d1c:	4b15      	ldr	r3, [pc, #84]	; (8001d74 <Task4_func+0x60>)
 8001d1e:	881b      	ldrh	r3, [r3, #0]
 8001d20:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d810      	bhi.n	8001d4a <Task4_func+0x36>
	  {
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001d28:	2101      	movs	r1, #1
 8001d2a:	4813      	ldr	r0, [pc, #76]	; (8001d78 <Task4_func+0x64>)
 8001d2c:	f002 fa4f 	bl	80041ce <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8001d30:	2180      	movs	r1, #128	; 0x80
 8001d32:	4811      	ldr	r0, [pc, #68]	; (8001d78 <Task4_func+0x64>)
 8001d34:	f002 fa4b 	bl	80041ce <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001d38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d3c:	480e      	ldr	r0, [pc, #56]	; (8001d78 <Task4_func+0x64>)
 8001d3e:	f002 fa46 	bl	80041ce <HAL_GPIO_TogglePin>
		  HAL_Delay(100);
 8001d42:	2064      	movs	r0, #100	; 0x64
 8001d44:	f000 ff1a 	bl	8002b7c <HAL_Delay>
 8001d48:	e010      	b.n	8001d6c <Task4_func+0x58>
	  }
	  else
	  {
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	480a      	ldr	r0, [pc, #40]	; (8001d78 <Task4_func+0x64>)
 8001d4e:	f002 fa3e 	bl	80041ce <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8001d52:	2180      	movs	r1, #128	; 0x80
 8001d54:	4808      	ldr	r0, [pc, #32]	; (8001d78 <Task4_func+0x64>)
 8001d56:	f002 fa3a 	bl	80041ce <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001d5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d5e:	4806      	ldr	r0, [pc, #24]	; (8001d78 <Task4_func+0x64>)
 8001d60:	f002 fa35 	bl	80041ce <HAL_GPIO_TogglePin>
		  HAL_Delay(1000);
 8001d64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d68:	f000 ff08 	bl	8002b7c <HAL_Delay>
	  }
	//i2c_lcd_main();
    osDelay(1);
 8001d6c:	2001      	movs	r0, #1
 8001d6e:	f007 fa5d 	bl	800922c <osDelay>
	  if (adcValue[0] < 3000)
 8001d72:	e7d3      	b.n	8001d1c <Task4_func+0x8>
 8001d74:	20000be4 	.word	0x20000be4
 8001d78:	40020400 	.word	0x40020400

08001d7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a09      	ldr	r2, [pc, #36]	; (8001db0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d101      	bne.n	8001d92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d8e:	f000 fed5 	bl	8002b3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM10)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a07      	ldr	r2, [pc, #28]	; (8001db4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d104      	bne.n	8001da6 <HAL_TIM_PeriodElapsedCallback+0x2a>
  	{
  		TIM10_10ms_counter++;  // 10ms timer counter
 8001d9c:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	3301      	adds	r3, #1
 8001da2:	4a05      	ldr	r2, [pc, #20]	; (8001db8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001da4:	6013      	str	r3, [r2, #0]
  	}
  /* USER CODE END Callback 1 */
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40001000 	.word	0x40001000
 8001db4:	40014400 	.word	0x40014400
 8001db8:	20000be0 	.word	0x20000be0

08001dbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dc0:	b672      	cpsid	i
}
 8001dc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dc4:	e7fe      	b.n	8001dc4 <Error_Handler+0x8>
	...

08001dc8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	607b      	str	r3, [r7, #4]
 8001dd2:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <HAL_MspInit+0x54>)
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd6:	4a11      	ldr	r2, [pc, #68]	; (8001e1c <HAL_MspInit+0x54>)
 8001dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dde:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <HAL_MspInit+0x54>)
 8001de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001de6:	607b      	str	r3, [r7, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	603b      	str	r3, [r7, #0]
 8001dee:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <HAL_MspInit+0x54>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	4a0a      	ldr	r2, [pc, #40]	; (8001e1c <HAL_MspInit+0x54>)
 8001df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001df8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dfa:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <HAL_MspInit+0x54>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e02:	603b      	str	r3, [r7, #0]
 8001e04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e06:	2200      	movs	r2, #0
 8001e08:	210f      	movs	r1, #15
 8001e0a:	f06f 0001 	mvn.w	r0, #1
 8001e0e:	f001 fc1d 	bl	800364c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40023800 	.word	0x40023800

08001e20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08a      	sub	sp, #40	; 0x28
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e28:	f107 0314 	add.w	r3, r7, #20
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	60da      	str	r2, [r3, #12]
 8001e36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a1b      	ldr	r2, [pc, #108]	; (8001eac <HAL_ADC_MspInit+0x8c>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d12f      	bne.n	8001ea2 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	613b      	str	r3, [r7, #16]
 8001e46:	4b1a      	ldr	r3, [pc, #104]	; (8001eb0 <HAL_ADC_MspInit+0x90>)
 8001e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4a:	4a19      	ldr	r2, [pc, #100]	; (8001eb0 <HAL_ADC_MspInit+0x90>)
 8001e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e50:	6453      	str	r3, [r2, #68]	; 0x44
 8001e52:	4b17      	ldr	r3, [pc, #92]	; (8001eb0 <HAL_ADC_MspInit+0x90>)
 8001e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5a:	613b      	str	r3, [r7, #16]
 8001e5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	4b13      	ldr	r3, [pc, #76]	; (8001eb0 <HAL_ADC_MspInit+0x90>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	4a12      	ldr	r2, [pc, #72]	; (8001eb0 <HAL_ADC_MspInit+0x90>)
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6e:	4b10      	ldr	r3, [pc, #64]	; (8001eb0 <HAL_ADC_MspInit+0x90>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e7a:	2310      	movs	r3, #16
 8001e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e86:	f107 0314 	add.w	r3, r7, #20
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4809      	ldr	r0, [pc, #36]	; (8001eb4 <HAL_ADC_MspInit+0x94>)
 8001e8e:	f001 ffc1 	bl	8003e14 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001e92:	2200      	movs	r2, #0
 8001e94:	2105      	movs	r1, #5
 8001e96:	2012      	movs	r0, #18
 8001e98:	f001 fbd8 	bl	800364c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001e9c:	2012      	movs	r0, #18
 8001e9e:	f001 fbf1 	bl	8003684 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ea2:	bf00      	nop
 8001ea4:	3728      	adds	r7, #40	; 0x28
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40012000 	.word	0x40012000
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	40020000 	.word	0x40020000

08001eb8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08e      	sub	sp, #56	; 0x38
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	609a      	str	r2, [r3, #8]
 8001ecc:	60da      	str	r2, [r3, #12]
 8001ece:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a55      	ldr	r2, [pc, #340]	; (800202c <HAL_ETH_MspInit+0x174>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	f040 80a4 	bne.w	8002024 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001edc:	2300      	movs	r3, #0
 8001ede:	623b      	str	r3, [r7, #32]
 8001ee0:	4b53      	ldr	r3, [pc, #332]	; (8002030 <HAL_ETH_MspInit+0x178>)
 8001ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee4:	4a52      	ldr	r2, [pc, #328]	; (8002030 <HAL_ETH_MspInit+0x178>)
 8001ee6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001eea:	6313      	str	r3, [r2, #48]	; 0x30
 8001eec:	4b50      	ldr	r3, [pc, #320]	; (8002030 <HAL_ETH_MspInit+0x178>)
 8001eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef4:	623b      	str	r3, [r7, #32]
 8001ef6:	6a3b      	ldr	r3, [r7, #32]
 8001ef8:	2300      	movs	r3, #0
 8001efa:	61fb      	str	r3, [r7, #28]
 8001efc:	4b4c      	ldr	r3, [pc, #304]	; (8002030 <HAL_ETH_MspInit+0x178>)
 8001efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f00:	4a4b      	ldr	r2, [pc, #300]	; (8002030 <HAL_ETH_MspInit+0x178>)
 8001f02:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001f06:	6313      	str	r3, [r2, #48]	; 0x30
 8001f08:	4b49      	ldr	r3, [pc, #292]	; (8002030 <HAL_ETH_MspInit+0x178>)
 8001f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f10:	61fb      	str	r3, [r7, #28]
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	2300      	movs	r3, #0
 8001f16:	61bb      	str	r3, [r7, #24]
 8001f18:	4b45      	ldr	r3, [pc, #276]	; (8002030 <HAL_ETH_MspInit+0x178>)
 8001f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1c:	4a44      	ldr	r2, [pc, #272]	; (8002030 <HAL_ETH_MspInit+0x178>)
 8001f1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f22:	6313      	str	r3, [r2, #48]	; 0x30
 8001f24:	4b42      	ldr	r3, [pc, #264]	; (8002030 <HAL_ETH_MspInit+0x178>)
 8001f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f2c:	61bb      	str	r3, [r7, #24]
 8001f2e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f30:	2300      	movs	r3, #0
 8001f32:	617b      	str	r3, [r7, #20]
 8001f34:	4b3e      	ldr	r3, [pc, #248]	; (8002030 <HAL_ETH_MspInit+0x178>)
 8001f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f38:	4a3d      	ldr	r2, [pc, #244]	; (8002030 <HAL_ETH_MspInit+0x178>)
 8001f3a:	f043 0304 	orr.w	r3, r3, #4
 8001f3e:	6313      	str	r3, [r2, #48]	; 0x30
 8001f40:	4b3b      	ldr	r3, [pc, #236]	; (8002030 <HAL_ETH_MspInit+0x178>)
 8001f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	617b      	str	r3, [r7, #20]
 8001f4a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	613b      	str	r3, [r7, #16]
 8001f50:	4b37      	ldr	r3, [pc, #220]	; (8002030 <HAL_ETH_MspInit+0x178>)
 8001f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f54:	4a36      	ldr	r2, [pc, #216]	; (8002030 <HAL_ETH_MspInit+0x178>)
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5c:	4b34      	ldr	r3, [pc, #208]	; (8002030 <HAL_ETH_MspInit+0x178>)
 8001f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	4b30      	ldr	r3, [pc, #192]	; (8002030 <HAL_ETH_MspInit+0x178>)
 8001f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f70:	4a2f      	ldr	r2, [pc, #188]	; (8002030 <HAL_ETH_MspInit+0x178>)
 8001f72:	f043 0302 	orr.w	r3, r3, #2
 8001f76:	6313      	str	r3, [r2, #48]	; 0x30
 8001f78:	4b2d      	ldr	r3, [pc, #180]	; (8002030 <HAL_ETH_MspInit+0x178>)
 8001f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f84:	2300      	movs	r3, #0
 8001f86:	60bb      	str	r3, [r7, #8]
 8001f88:	4b29      	ldr	r3, [pc, #164]	; (8002030 <HAL_ETH_MspInit+0x178>)
 8001f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8c:	4a28      	ldr	r2, [pc, #160]	; (8002030 <HAL_ETH_MspInit+0x178>)
 8001f8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f92:	6313      	str	r3, [r2, #48]	; 0x30
 8001f94:	4b26      	ldr	r3, [pc, #152]	; (8002030 <HAL_ETH_MspInit+0x178>)
 8001f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f9c:	60bb      	str	r3, [r7, #8]
 8001f9e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001fa0:	2332      	movs	r3, #50	; 0x32
 8001fa2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fac:	2303      	movs	r3, #3
 8001fae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001fb0:	230b      	movs	r3, #11
 8001fb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fb8:	4619      	mov	r1, r3
 8001fba:	481e      	ldr	r0, [pc, #120]	; (8002034 <HAL_ETH_MspInit+0x17c>)
 8001fbc:	f001 ff2a 	bl	8003e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001fc0:	2386      	movs	r3, #134	; 0x86
 8001fc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001fd0:	230b      	movs	r3, #11
 8001fd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4817      	ldr	r0, [pc, #92]	; (8002038 <HAL_ETH_MspInit+0x180>)
 8001fdc:	f001 ff1a 	bl	8003e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001fe0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fe4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ff2:	230b      	movs	r3, #11
 8001ff4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001ff6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	480f      	ldr	r0, [pc, #60]	; (800203c <HAL_ETH_MspInit+0x184>)
 8001ffe:	f001 ff09 	bl	8003e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002002:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002006:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002008:	2302      	movs	r3, #2
 800200a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200c:	2300      	movs	r3, #0
 800200e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002010:	2303      	movs	r3, #3
 8002012:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002014:	230b      	movs	r3, #11
 8002016:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800201c:	4619      	mov	r1, r3
 800201e:	4808      	ldr	r0, [pc, #32]	; (8002040 <HAL_ETH_MspInit+0x188>)
 8002020:	f001 fef8 	bl	8003e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002024:	bf00      	nop
 8002026:	3738      	adds	r7, #56	; 0x38
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40028000 	.word	0x40028000
 8002030:	40023800 	.word	0x40023800
 8002034:	40020800 	.word	0x40020800
 8002038:	40020000 	.word	0x40020000
 800203c:	40020400 	.word	0x40020400
 8002040:	40021800 	.word	0x40021800

08002044 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b08a      	sub	sp, #40	; 0x28
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204c:	f107 0314 	add.w	r3, r7, #20
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	60da      	str	r2, [r3, #12]
 800205a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a19      	ldr	r2, [pc, #100]	; (80020c8 <HAL_I2C_MspInit+0x84>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d12c      	bne.n	80020c0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	613b      	str	r3, [r7, #16]
 800206a:	4b18      	ldr	r3, [pc, #96]	; (80020cc <HAL_I2C_MspInit+0x88>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	4a17      	ldr	r2, [pc, #92]	; (80020cc <HAL_I2C_MspInit+0x88>)
 8002070:	f043 0302 	orr.w	r3, r3, #2
 8002074:	6313      	str	r3, [r2, #48]	; 0x30
 8002076:	4b15      	ldr	r3, [pc, #84]	; (80020cc <HAL_I2C_MspInit+0x88>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	613b      	str	r3, [r7, #16]
 8002080:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002082:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002086:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002088:	2312      	movs	r3, #18
 800208a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208c:	2300      	movs	r3, #0
 800208e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002090:	2303      	movs	r3, #3
 8002092:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002094:	2304      	movs	r3, #4
 8002096:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002098:	f107 0314 	add.w	r3, r7, #20
 800209c:	4619      	mov	r1, r3
 800209e:	480c      	ldr	r0, [pc, #48]	; (80020d0 <HAL_I2C_MspInit+0x8c>)
 80020a0:	f001 feb8 	bl	8003e14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020a4:	2300      	movs	r3, #0
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	4b08      	ldr	r3, [pc, #32]	; (80020cc <HAL_I2C_MspInit+0x88>)
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	4a07      	ldr	r2, [pc, #28]	; (80020cc <HAL_I2C_MspInit+0x88>)
 80020ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020b2:	6413      	str	r3, [r2, #64]	; 0x40
 80020b4:	4b05      	ldr	r3, [pc, #20]	; (80020cc <HAL_I2C_MspInit+0x88>)
 80020b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80020c0:	bf00      	nop
 80020c2:	3728      	adds	r7, #40	; 0x28
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40005400 	.word	0x40005400
 80020cc:	40023800 	.word	0x40023800
 80020d0:	40020400 	.word	0x40020400

080020d4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b08e      	sub	sp, #56	; 0x38
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020dc:	f107 0308 	add.w	r3, r7, #8
 80020e0:	2230      	movs	r2, #48	; 0x30
 80020e2:	2100      	movs	r1, #0
 80020e4:	4618      	mov	r0, r3
 80020e6:	f009 fe72 	bl	800bdce <memset>
  if(hrtc->Instance==RTC)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a0c      	ldr	r2, [pc, #48]	; (8002120 <HAL_RTC_MspInit+0x4c>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d111      	bne.n	8002118 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80020f4:	2320      	movs	r3, #32
 80020f6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80020f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020fc:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020fe:	f107 0308 	add.w	r3, r7, #8
 8002102:	4618      	mov	r0, r3
 8002104:	f003 fb44 	bl	8005790 <HAL_RCCEx_PeriphCLKConfig>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800210e:	f7ff fe55 	bl	8001dbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002112:	4b04      	ldr	r3, [pc, #16]	; (8002124 <HAL_RTC_MspInit+0x50>)
 8002114:	2201      	movs	r2, #1
 8002116:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002118:	bf00      	nop
 800211a:	3738      	adds	r7, #56	; 0x38
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40002800 	.word	0x40002800
 8002124:	42470e3c 	.word	0x42470e3c

08002128 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002138:	d115      	bne.n	8002166 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <HAL_TIM_PWM_MspInit+0x48>)
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	4a0b      	ldr	r2, [pc, #44]	; (8002170 <HAL_TIM_PWM_MspInit+0x48>)
 8002144:	f043 0301 	orr.w	r3, r3, #1
 8002148:	6413      	str	r3, [r2, #64]	; 0x40
 800214a:	4b09      	ldr	r3, [pc, #36]	; (8002170 <HAL_TIM_PWM_MspInit+0x48>)
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002156:	2200      	movs	r2, #0
 8002158:	2105      	movs	r1, #5
 800215a:	201c      	movs	r0, #28
 800215c:	f001 fa76 	bl	800364c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002160:	201c      	movs	r0, #28
 8002162:	f001 fa8f 	bl	8003684 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002166:	bf00      	nop
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40023800 	.word	0x40023800

08002174 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b08a      	sub	sp, #40	; 0x28
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800217c:	f107 0314 	add.w	r3, r7, #20
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	605a      	str	r2, [r3, #4]
 8002186:	609a      	str	r2, [r3, #8]
 8002188:	60da      	str	r2, [r3, #12]
 800218a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a1d      	ldr	r2, [pc, #116]	; (8002208 <HAL_TIM_IC_MspInit+0x94>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d133      	bne.n	80021fe <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	613b      	str	r3, [r7, #16]
 800219a:	4b1c      	ldr	r3, [pc, #112]	; (800220c <HAL_TIM_IC_MspInit+0x98>)
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	4a1b      	ldr	r2, [pc, #108]	; (800220c <HAL_TIM_IC_MspInit+0x98>)
 80021a0:	f043 0302 	orr.w	r3, r3, #2
 80021a4:	6413      	str	r3, [r2, #64]	; 0x40
 80021a6:	4b19      	ldr	r3, [pc, #100]	; (800220c <HAL_TIM_IC_MspInit+0x98>)
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	613b      	str	r3, [r7, #16]
 80021b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	4b15      	ldr	r3, [pc, #84]	; (800220c <HAL_TIM_IC_MspInit+0x98>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	4a14      	ldr	r2, [pc, #80]	; (800220c <HAL_TIM_IC_MspInit+0x98>)
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	6313      	str	r3, [r2, #48]	; 0x30
 80021c2:	4b12      	ldr	r3, [pc, #72]	; (800220c <HAL_TIM_IC_MspInit+0x98>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ULTRASONIC_TIM3_CH1_Pin;
 80021ce:	2340      	movs	r3, #64	; 0x40
 80021d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d2:	2302      	movs	r3, #2
 80021d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d6:	2300      	movs	r3, #0
 80021d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021da:	2300      	movs	r3, #0
 80021dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021de:	2302      	movs	r3, #2
 80021e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ULTRASONIC_TIM3_CH1_GPIO_Port, &GPIO_InitStruct);
 80021e2:	f107 0314 	add.w	r3, r7, #20
 80021e6:	4619      	mov	r1, r3
 80021e8:	4809      	ldr	r0, [pc, #36]	; (8002210 <HAL_TIM_IC_MspInit+0x9c>)
 80021ea:	f001 fe13 	bl	8003e14 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80021ee:	2200      	movs	r2, #0
 80021f0:	2105      	movs	r1, #5
 80021f2:	201d      	movs	r0, #29
 80021f4:	f001 fa2a 	bl	800364c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80021f8:	201d      	movs	r0, #29
 80021fa:	f001 fa43 	bl	8003684 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80021fe:	bf00      	nop
 8002200:	3728      	adds	r7, #40	; 0x28
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40000400 	.word	0x40000400
 800220c:	40023800 	.word	0x40023800
 8002210:	40020000 	.word	0x40020000

08002214 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a38      	ldr	r2, [pc, #224]	; (8002304 <HAL_TIM_Base_MspInit+0xf0>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d116      	bne.n	8002254 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	617b      	str	r3, [r7, #20]
 800222a:	4b37      	ldr	r3, [pc, #220]	; (8002308 <HAL_TIM_Base_MspInit+0xf4>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	4a36      	ldr	r2, [pc, #216]	; (8002308 <HAL_TIM_Base_MspInit+0xf4>)
 8002230:	f043 0304 	orr.w	r3, r3, #4
 8002234:	6413      	str	r3, [r2, #64]	; 0x40
 8002236:	4b34      	ldr	r3, [pc, #208]	; (8002308 <HAL_TIM_Base_MspInit+0xf4>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	f003 0304 	and.w	r3, r3, #4
 800223e:	617b      	str	r3, [r7, #20]
 8002240:	697b      	ldr	r3, [r7, #20]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002242:	2200      	movs	r2, #0
 8002244:	2105      	movs	r1, #5
 8002246:	201e      	movs	r0, #30
 8002248:	f001 fa00 	bl	800364c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800224c:	201e      	movs	r0, #30
 800224e:	f001 fa19 	bl	8003684 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002252:	e052      	b.n	80022fa <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM5)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a2c      	ldr	r2, [pc, #176]	; (800230c <HAL_TIM_Base_MspInit+0xf8>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d116      	bne.n	800228c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800225e:	2300      	movs	r3, #0
 8002260:	613b      	str	r3, [r7, #16]
 8002262:	4b29      	ldr	r3, [pc, #164]	; (8002308 <HAL_TIM_Base_MspInit+0xf4>)
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	4a28      	ldr	r2, [pc, #160]	; (8002308 <HAL_TIM_Base_MspInit+0xf4>)
 8002268:	f043 0308 	orr.w	r3, r3, #8
 800226c:	6413      	str	r3, [r2, #64]	; 0x40
 800226e:	4b26      	ldr	r3, [pc, #152]	; (8002308 <HAL_TIM_Base_MspInit+0xf4>)
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	f003 0308 	and.w	r3, r3, #8
 8002276:	613b      	str	r3, [r7, #16]
 8002278:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 800227a:	2200      	movs	r2, #0
 800227c:	2105      	movs	r1, #5
 800227e:	2032      	movs	r0, #50	; 0x32
 8002280:	f001 f9e4 	bl	800364c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002284:	2032      	movs	r0, #50	; 0x32
 8002286:	f001 f9fd 	bl	8003684 <HAL_NVIC_EnableIRQ>
}
 800228a:	e036      	b.n	80022fa <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM10)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a1f      	ldr	r2, [pc, #124]	; (8002310 <HAL_TIM_Base_MspInit+0xfc>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d116      	bne.n	80022c4 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	4b1b      	ldr	r3, [pc, #108]	; (8002308 <HAL_TIM_Base_MspInit+0xf4>)
 800229c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229e:	4a1a      	ldr	r2, [pc, #104]	; (8002308 <HAL_TIM_Base_MspInit+0xf4>)
 80022a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022a4:	6453      	str	r3, [r2, #68]	; 0x44
 80022a6:	4b18      	ldr	r3, [pc, #96]	; (8002308 <HAL_TIM_Base_MspInit+0xf4>)
 80022a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80022b2:	2200      	movs	r2, #0
 80022b4:	2105      	movs	r1, #5
 80022b6:	2019      	movs	r0, #25
 80022b8:	f001 f9c8 	bl	800364c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80022bc:	2019      	movs	r0, #25
 80022be:	f001 f9e1 	bl	8003684 <HAL_NVIC_EnableIRQ>
}
 80022c2:	e01a      	b.n	80022fa <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM11)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a12      	ldr	r2, [pc, #72]	; (8002314 <HAL_TIM_Base_MspInit+0x100>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d115      	bne.n	80022fa <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	60bb      	str	r3, [r7, #8]
 80022d2:	4b0d      	ldr	r3, [pc, #52]	; (8002308 <HAL_TIM_Base_MspInit+0xf4>)
 80022d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d6:	4a0c      	ldr	r2, [pc, #48]	; (8002308 <HAL_TIM_Base_MspInit+0xf4>)
 80022d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022dc:	6453      	str	r3, [r2, #68]	; 0x44
 80022de:	4b0a      	ldr	r3, [pc, #40]	; (8002308 <HAL_TIM_Base_MspInit+0xf4>)
 80022e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022e6:	60bb      	str	r3, [r7, #8]
 80022e8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 80022ea:	2200      	movs	r2, #0
 80022ec:	2105      	movs	r1, #5
 80022ee:	201a      	movs	r0, #26
 80022f0:	f001 f9ac 	bl	800364c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80022f4:	201a      	movs	r0, #26
 80022f6:	f001 f9c5 	bl	8003684 <HAL_NVIC_EnableIRQ>
}
 80022fa:	bf00      	nop
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40000800 	.word	0x40000800
 8002308:	40023800 	.word	0x40023800
 800230c:	40000c00 	.word	0x40000c00
 8002310:	40014400 	.word	0x40014400
 8002314:	40014800 	.word	0x40014800

08002318 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b08a      	sub	sp, #40	; 0x28
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002320:	f107 0314 	add.w	r3, r7, #20
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	60da      	str	r2, [r3, #12]
 800232e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002338:	d11e      	bne.n	8002378 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	613b      	str	r3, [r7, #16]
 800233e:	4b22      	ldr	r3, [pc, #136]	; (80023c8 <HAL_TIM_MspPostInit+0xb0>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	4a21      	ldr	r2, [pc, #132]	; (80023c8 <HAL_TIM_MspPostInit+0xb0>)
 8002344:	f043 0301 	orr.w	r3, r3, #1
 8002348:	6313      	str	r3, [r2, #48]	; 0x30
 800234a:	4b1f      	ldr	r3, [pc, #124]	; (80023c8 <HAL_TIM_MspPostInit+0xb0>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	613b      	str	r3, [r7, #16]
 8002354:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM2_CH1_SERVO_Pin;
 8002356:	2320      	movs	r3, #32
 8002358:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235a:	2302      	movs	r3, #2
 800235c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235e:	2300      	movs	r3, #0
 8002360:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002362:	2300      	movs	r3, #0
 8002364:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002366:	2301      	movs	r3, #1
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM2_CH1_SERVO_GPIO_Port, &GPIO_InitStruct);
 800236a:	f107 0314 	add.w	r3, r7, #20
 800236e:	4619      	mov	r1, r3
 8002370:	4816      	ldr	r0, [pc, #88]	; (80023cc <HAL_TIM_MspPostInit+0xb4>)
 8002372:	f001 fd4f 	bl	8003e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002376:	e022      	b.n	80023be <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a14      	ldr	r2, [pc, #80]	; (80023d0 <HAL_TIM_MspPostInit+0xb8>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d11d      	bne.n	80023be <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	4b10      	ldr	r3, [pc, #64]	; (80023c8 <HAL_TIM_MspPostInit+0xb0>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	4a0f      	ldr	r2, [pc, #60]	; (80023c8 <HAL_TIM_MspPostInit+0xb0>)
 800238c:	f043 0301 	orr.w	r3, r3, #1
 8002390:	6313      	str	r3, [r2, #48]	; 0x30
 8002392:	4b0d      	ldr	r3, [pc, #52]	; (80023c8 <HAL_TIM_MspPostInit+0xb0>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800239e:	2308      	movs	r3, #8
 80023a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a2:	2302      	movs	r3, #2
 80023a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023aa:	2300      	movs	r3, #0
 80023ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80023ae:	2302      	movs	r3, #2
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b2:	f107 0314 	add.w	r3, r7, #20
 80023b6:	4619      	mov	r1, r3
 80023b8:	4804      	ldr	r0, [pc, #16]	; (80023cc <HAL_TIM_MspPostInit+0xb4>)
 80023ba:	f001 fd2b 	bl	8003e14 <HAL_GPIO_Init>
}
 80023be:	bf00      	nop
 80023c0:	3728      	adds	r7, #40	; 0x28
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40023800 	.word	0x40023800
 80023cc:	40020000 	.word	0x40020000
 80023d0:	40000c00 	.word	0x40000c00

080023d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b08c      	sub	sp, #48	; 0x30
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023dc:	f107 031c 	add.w	r3, r7, #28
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	609a      	str	r2, [r3, #8]
 80023e8:	60da      	str	r2, [r3, #12]
 80023ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a3a      	ldr	r2, [pc, #232]	; (80024dc <HAL_UART_MspInit+0x108>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d135      	bne.n	8002462 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	61bb      	str	r3, [r7, #24]
 80023fa:	4b39      	ldr	r3, [pc, #228]	; (80024e0 <HAL_UART_MspInit+0x10c>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	4a38      	ldr	r2, [pc, #224]	; (80024e0 <HAL_UART_MspInit+0x10c>)
 8002400:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002404:	6413      	str	r3, [r2, #64]	; 0x40
 8002406:	4b36      	ldr	r3, [pc, #216]	; (80024e0 <HAL_UART_MspInit+0x10c>)
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800240e:	61bb      	str	r3, [r7, #24]
 8002410:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	617b      	str	r3, [r7, #20]
 8002416:	4b32      	ldr	r3, [pc, #200]	; (80024e0 <HAL_UART_MspInit+0x10c>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	4a31      	ldr	r2, [pc, #196]	; (80024e0 <HAL_UART_MspInit+0x10c>)
 800241c:	f043 0308 	orr.w	r3, r3, #8
 8002420:	6313      	str	r3, [r2, #48]	; 0x30
 8002422:	4b2f      	ldr	r3, [pc, #188]	; (80024e0 <HAL_UART_MspInit+0x10c>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	617b      	str	r3, [r7, #20]
 800242c:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800242e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002432:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002434:	2302      	movs	r3, #2
 8002436:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002438:	2300      	movs	r3, #0
 800243a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800243c:	2303      	movs	r3, #3
 800243e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002440:	2307      	movs	r3, #7
 8002442:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002444:	f107 031c 	add.w	r3, r7, #28
 8002448:	4619      	mov	r1, r3
 800244a:	4826      	ldr	r0, [pc, #152]	; (80024e4 <HAL_UART_MspInit+0x110>)
 800244c:	f001 fce2 	bl	8003e14 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002450:	2200      	movs	r2, #0
 8002452:	2105      	movs	r1, #5
 8002454:	2027      	movs	r0, #39	; 0x27
 8002456:	f001 f8f9 	bl	800364c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800245a:	2027      	movs	r0, #39	; 0x27
 800245c:	f001 f912 	bl	8003684 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002460:	e038      	b.n	80024d4 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART6)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a20      	ldr	r2, [pc, #128]	; (80024e8 <HAL_UART_MspInit+0x114>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d133      	bne.n	80024d4 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART6_CLK_ENABLE();
 800246c:	2300      	movs	r3, #0
 800246e:	613b      	str	r3, [r7, #16]
 8002470:	4b1b      	ldr	r3, [pc, #108]	; (80024e0 <HAL_UART_MspInit+0x10c>)
 8002472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002474:	4a1a      	ldr	r2, [pc, #104]	; (80024e0 <HAL_UART_MspInit+0x10c>)
 8002476:	f043 0320 	orr.w	r3, r3, #32
 800247a:	6453      	str	r3, [r2, #68]	; 0x44
 800247c:	4b18      	ldr	r3, [pc, #96]	; (80024e0 <HAL_UART_MspInit+0x10c>)
 800247e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002480:	f003 0320 	and.w	r3, r3, #32
 8002484:	613b      	str	r3, [r7, #16]
 8002486:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002488:	2300      	movs	r3, #0
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	4b14      	ldr	r3, [pc, #80]	; (80024e0 <HAL_UART_MspInit+0x10c>)
 800248e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002490:	4a13      	ldr	r2, [pc, #76]	; (80024e0 <HAL_UART_MspInit+0x10c>)
 8002492:	f043 0304 	orr.w	r3, r3, #4
 8002496:	6313      	str	r3, [r2, #48]	; 0x30
 8002498:	4b11      	ldr	r3, [pc, #68]	; (80024e0 <HAL_UART_MspInit+0x10c>)
 800249a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	60fb      	str	r3, [r7, #12]
 80024a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024a4:	23c0      	movs	r3, #192	; 0xc0
 80024a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a8:	2302      	movs	r3, #2
 80024aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ac:	2300      	movs	r3, #0
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b0:	2303      	movs	r3, #3
 80024b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80024b4:	2308      	movs	r3, #8
 80024b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024b8:	f107 031c 	add.w	r3, r7, #28
 80024bc:	4619      	mov	r1, r3
 80024be:	480b      	ldr	r0, [pc, #44]	; (80024ec <HAL_UART_MspInit+0x118>)
 80024c0:	f001 fca8 	bl	8003e14 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80024c4:	2200      	movs	r2, #0
 80024c6:	2105      	movs	r1, #5
 80024c8:	2047      	movs	r0, #71	; 0x47
 80024ca:	f001 f8bf 	bl	800364c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80024ce:	2047      	movs	r0, #71	; 0x47
 80024d0:	f001 f8d8 	bl	8003684 <HAL_NVIC_EnableIRQ>
}
 80024d4:	bf00      	nop
 80024d6:	3730      	adds	r7, #48	; 0x30
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40004800 	.word	0x40004800
 80024e0:	40023800 	.word	0x40023800
 80024e4:	40020c00 	.word	0x40020c00
 80024e8:	40011400 	.word	0x40011400
 80024ec:	40020800 	.word	0x40020800

080024f0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b08a      	sub	sp, #40	; 0x28
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f8:	f107 0314 	add.w	r3, r7, #20
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	605a      	str	r2, [r3, #4]
 8002502:	609a      	str	r2, [r3, #8]
 8002504:	60da      	str	r2, [r3, #12]
 8002506:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002510:	d13f      	bne.n	8002592 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002512:	2300      	movs	r3, #0
 8002514:	613b      	str	r3, [r7, #16]
 8002516:	4b21      	ldr	r3, [pc, #132]	; (800259c <HAL_PCD_MspInit+0xac>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	4a20      	ldr	r2, [pc, #128]	; (800259c <HAL_PCD_MspInit+0xac>)
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	6313      	str	r3, [r2, #48]	; 0x30
 8002522:	4b1e      	ldr	r3, [pc, #120]	; (800259c <HAL_PCD_MspInit+0xac>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	613b      	str	r3, [r7, #16]
 800252c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800252e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002532:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002534:	2302      	movs	r3, #2
 8002536:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002538:	2300      	movs	r3, #0
 800253a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800253c:	2303      	movs	r3, #3
 800253e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002540:	230a      	movs	r3, #10
 8002542:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002544:	f107 0314 	add.w	r3, r7, #20
 8002548:	4619      	mov	r1, r3
 800254a:	4815      	ldr	r0, [pc, #84]	; (80025a0 <HAL_PCD_MspInit+0xb0>)
 800254c:	f001 fc62 	bl	8003e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002550:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002554:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002556:	2300      	movs	r3, #0
 8002558:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255a:	2300      	movs	r3, #0
 800255c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800255e:	f107 0314 	add.w	r3, r7, #20
 8002562:	4619      	mov	r1, r3
 8002564:	480e      	ldr	r0, [pc, #56]	; (80025a0 <HAL_PCD_MspInit+0xb0>)
 8002566:	f001 fc55 	bl	8003e14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800256a:	4b0c      	ldr	r3, [pc, #48]	; (800259c <HAL_PCD_MspInit+0xac>)
 800256c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800256e:	4a0b      	ldr	r2, [pc, #44]	; (800259c <HAL_PCD_MspInit+0xac>)
 8002570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002574:	6353      	str	r3, [r2, #52]	; 0x34
 8002576:	2300      	movs	r3, #0
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	4b08      	ldr	r3, [pc, #32]	; (800259c <HAL_PCD_MspInit+0xac>)
 800257c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257e:	4a07      	ldr	r2, [pc, #28]	; (800259c <HAL_PCD_MspInit+0xac>)
 8002580:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002584:	6453      	str	r3, [r2, #68]	; 0x44
 8002586:	4b05      	ldr	r3, [pc, #20]	; (800259c <HAL_PCD_MspInit+0xac>)
 8002588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002592:	bf00      	nop
 8002594:	3728      	adds	r7, #40	; 0x28
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40023800 	.word	0x40023800
 80025a0:	40020000 	.word	0x40020000

080025a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b08e      	sub	sp, #56	; 0x38
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80025ac:	2300      	movs	r3, #0
 80025ae:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80025b0:	2300      	movs	r3, #0
 80025b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80025b4:	2300      	movs	r3, #0
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	4b33      	ldr	r3, [pc, #204]	; (8002688 <HAL_InitTick+0xe4>)
 80025ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025bc:	4a32      	ldr	r2, [pc, #200]	; (8002688 <HAL_InitTick+0xe4>)
 80025be:	f043 0310 	orr.w	r3, r3, #16
 80025c2:	6413      	str	r3, [r2, #64]	; 0x40
 80025c4:	4b30      	ldr	r3, [pc, #192]	; (8002688 <HAL_InitTick+0xe4>)
 80025c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c8:	f003 0310 	and.w	r3, r3, #16
 80025cc:	60fb      	str	r3, [r7, #12]
 80025ce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80025d0:	f107 0210 	add.w	r2, r7, #16
 80025d4:	f107 0314 	add.w	r3, r7, #20
 80025d8:	4611      	mov	r1, r2
 80025da:	4618      	mov	r0, r3
 80025dc:	f003 f8a6 	bl	800572c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80025e0:	6a3b      	ldr	r3, [r7, #32]
 80025e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80025e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d103      	bne.n	80025f2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80025ea:	f003 f877 	bl	80056dc <HAL_RCC_GetPCLK1Freq>
 80025ee:	6378      	str	r0, [r7, #52]	; 0x34
 80025f0:	e004      	b.n	80025fc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80025f2:	f003 f873 	bl	80056dc <HAL_RCC_GetPCLK1Freq>
 80025f6:	4603      	mov	r3, r0
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80025fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025fe:	4a23      	ldr	r2, [pc, #140]	; (800268c <HAL_InitTick+0xe8>)
 8002600:	fba2 2303 	umull	r2, r3, r2, r3
 8002604:	0c9b      	lsrs	r3, r3, #18
 8002606:	3b01      	subs	r3, #1
 8002608:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800260a:	4b21      	ldr	r3, [pc, #132]	; (8002690 <HAL_InitTick+0xec>)
 800260c:	4a21      	ldr	r2, [pc, #132]	; (8002694 <HAL_InitTick+0xf0>)
 800260e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002610:	4b1f      	ldr	r3, [pc, #124]	; (8002690 <HAL_InitTick+0xec>)
 8002612:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002616:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002618:	4a1d      	ldr	r2, [pc, #116]	; (8002690 <HAL_InitTick+0xec>)
 800261a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800261c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800261e:	4b1c      	ldr	r3, [pc, #112]	; (8002690 <HAL_InitTick+0xec>)
 8002620:	2200      	movs	r2, #0
 8002622:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002624:	4b1a      	ldr	r3, [pc, #104]	; (8002690 <HAL_InitTick+0xec>)
 8002626:	2200      	movs	r2, #0
 8002628:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800262a:	4b19      	ldr	r3, [pc, #100]	; (8002690 <HAL_InitTick+0xec>)
 800262c:	2200      	movs	r2, #0
 800262e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002630:	4817      	ldr	r0, [pc, #92]	; (8002690 <HAL_InitTick+0xec>)
 8002632:	f003 fca2 	bl	8005f7a <HAL_TIM_Base_Init>
 8002636:	4603      	mov	r3, r0
 8002638:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800263c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002640:	2b00      	cmp	r3, #0
 8002642:	d11b      	bne.n	800267c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002644:	4812      	ldr	r0, [pc, #72]	; (8002690 <HAL_InitTick+0xec>)
 8002646:	f003 fce7 	bl	8006018 <HAL_TIM_Base_Start_IT>
 800264a:	4603      	mov	r3, r0
 800264c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002650:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002654:	2b00      	cmp	r3, #0
 8002656:	d111      	bne.n	800267c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002658:	2036      	movs	r0, #54	; 0x36
 800265a:	f001 f813 	bl	8003684 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2b0f      	cmp	r3, #15
 8002662:	d808      	bhi.n	8002676 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002664:	2200      	movs	r2, #0
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	2036      	movs	r0, #54	; 0x36
 800266a:	f000 ffef 	bl	800364c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800266e:	4a0a      	ldr	r2, [pc, #40]	; (8002698 <HAL_InitTick+0xf4>)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6013      	str	r3, [r2, #0]
 8002674:	e002      	b.n	800267c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800267c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002680:	4618      	mov	r0, r3
 8002682:	3738      	adds	r7, #56	; 0x38
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40023800 	.word	0x40023800
 800268c:	431bde83 	.word	0x431bde83
 8002690:	20000bf4 	.word	0x20000bf4
 8002694:	40001000 	.word	0x40001000
 8002698:	200000a4 	.word	0x200000a4

0800269c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026a0:	e7fe      	b.n	80026a0 <NMI_Handler+0x4>

080026a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026a2:	b480      	push	{r7}
 80026a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026a6:	e7fe      	b.n	80026a6 <HardFault_Handler+0x4>

080026a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026ac:	e7fe      	b.n	80026ac <MemManage_Handler+0x4>

080026ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026ae:	b480      	push	{r7}
 80026b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026b2:	e7fe      	b.n	80026b2 <BusFault_Handler+0x4>

080026b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026b8:	e7fe      	b.n	80026b8 <UsageFault_Handler+0x4>

080026ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026ba:	b480      	push	{r7}
 80026bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026be:	bf00      	nop
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PHOTO0_Pin);
 80026cc:	2001      	movs	r0, #1
 80026ce:	f001 fd99 	bl	8004204 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80026d2:	bf00      	nop
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PHOTO4_Pin);
 80026da:	2002      	movs	r0, #2
 80026dc:	f001 fd92 	bl	8004204 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80026e0:	bf00      	nop
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PHOTO1_Pin);
 80026e8:	2004      	movs	r0, #4
 80026ea:	f001 fd8b 	bl	8004204 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80026ee:	bf00      	nop
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PHOTO2_Pin);
 80026f6:	2008      	movs	r0, #8
 80026f8:	f001 fd84 	bl	8004204 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80026fc:	bf00      	nop
 80026fe:	bd80      	pop	{r7, pc}

08002700 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002704:	4802      	ldr	r0, [pc, #8]	; (8002710 <ADC_IRQHandler+0x10>)
 8002706:	f000 fb7f 	bl	8002e08 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800270a:	bf00      	nop
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	20000318 	.word	0x20000318

08002714 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002718:	4802      	ldr	r0, [pc, #8]	; (8002724 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800271a:	f004 f893 	bl	8006844 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800271e:	bf00      	nop
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	200005a4 	.word	0x200005a4

08002728 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800272c:	4802      	ldr	r0, [pc, #8]	; (8002738 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800272e:	f004 f889 	bl	8006844 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002732:	bf00      	nop
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	200005ec 	.word	0x200005ec

0800273c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002740:	4802      	ldr	r0, [pc, #8]	; (800274c <TIM2_IRQHandler+0x10>)
 8002742:	f004 f87f 	bl	8006844 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002746:	bf00      	nop
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	20000484 	.word	0x20000484

08002750 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002754:	4802      	ldr	r0, [pc, #8]	; (8002760 <TIM3_IRQHandler+0x10>)
 8002756:	f004 f875 	bl	8006844 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800275a:	bf00      	nop
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	200004cc 	.word	0x200004cc

08002764 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002768:	4802      	ldr	r0, [pc, #8]	; (8002774 <TIM4_IRQHandler+0x10>)
 800276a:	f004 f86b 	bl	8006844 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800276e:	bf00      	nop
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	20000514 	.word	0x20000514

08002778 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800277c:	4802      	ldr	r0, [pc, #8]	; (8002788 <USART3_IRQHandler+0x10>)
 800277e:	f005 f9cb 	bl	8007b18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002782:	bf00      	nop
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	20000634 	.word	0x20000634

0800278c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002790:	4802      	ldr	r0, [pc, #8]	; (800279c <TIM5_IRQHandler+0x10>)
 8002792:	f004 f857 	bl	8006844 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	2000055c 	.word	0x2000055c

080027a0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80027a4:	4802      	ldr	r0, [pc, #8]	; (80027b0 <TIM6_DAC_IRQHandler+0x10>)
 80027a6:	f004 f84d 	bl	8006844 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80027aa:	bf00      	nop
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	20000bf4 	.word	0x20000bf4

080027b4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80027b8:	4802      	ldr	r0, [pc, #8]	; (80027c4 <USART6_IRQHandler+0x10>)
 80027ba:	f005 f9ad 	bl	8007b18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80027be:	bf00      	nop
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	20000678 	.word	0x20000678

080027c8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]
 80027d8:	e00a      	b.n	80027f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80027da:	f3af 8000 	nop.w
 80027de:	4601      	mov	r1, r0
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	1c5a      	adds	r2, r3, #1
 80027e4:	60ba      	str	r2, [r7, #8]
 80027e6:	b2ca      	uxtb	r2, r1
 80027e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	3301      	adds	r3, #1
 80027ee:	617b      	str	r3, [r7, #20]
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	dbf0      	blt.n	80027da <_read+0x12>
  }

  return len;
 80027f8:	687b      	ldr	r3, [r7, #4]
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3718      	adds	r7, #24
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b086      	sub	sp, #24
 8002806:	af00      	add	r7, sp, #0
 8002808:	60f8      	str	r0, [r7, #12]
 800280a:	60b9      	str	r1, [r7, #8]
 800280c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800280e:	2300      	movs	r3, #0
 8002810:	617b      	str	r3, [r7, #20]
 8002812:	e009      	b.n	8002828 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	1c5a      	adds	r2, r3, #1
 8002818:	60ba      	str	r2, [r7, #8]
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	4618      	mov	r0, r3
 800281e:	f7fe fbd1 	bl	8000fc4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	3301      	adds	r3, #1
 8002826:	617b      	str	r3, [r7, #20]
 8002828:	697a      	ldr	r2, [r7, #20]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	429a      	cmp	r2, r3
 800282e:	dbf1      	blt.n	8002814 <_write+0x12>
  }
  return len;
 8002830:	687b      	ldr	r3, [r7, #4]
}
 8002832:	4618      	mov	r0, r3
 8002834:	3718      	adds	r7, #24
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <_close>:

int _close(int file)
{
 800283a:	b480      	push	{r7}
 800283c:	b083      	sub	sp, #12
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002842:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002846:	4618      	mov	r0, r3
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
 800285a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002862:	605a      	str	r2, [r3, #4]
  return 0;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <_isatty>:

int _isatty(int file)
{
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800287a:	2301      	movs	r3, #1
}
 800287c:	4618      	mov	r0, r3
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
	...

080028a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028ac:	4a14      	ldr	r2, [pc, #80]	; (8002900 <_sbrk+0x5c>)
 80028ae:	4b15      	ldr	r3, [pc, #84]	; (8002904 <_sbrk+0x60>)
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028b8:	4b13      	ldr	r3, [pc, #76]	; (8002908 <_sbrk+0x64>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d102      	bne.n	80028c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028c0:	4b11      	ldr	r3, [pc, #68]	; (8002908 <_sbrk+0x64>)
 80028c2:	4a12      	ldr	r2, [pc, #72]	; (800290c <_sbrk+0x68>)
 80028c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028c6:	4b10      	ldr	r3, [pc, #64]	; (8002908 <_sbrk+0x64>)
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4413      	add	r3, r2
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d207      	bcs.n	80028e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028d4:	f009 f94a 	bl	800bb6c <__errno>
 80028d8:	4603      	mov	r3, r0
 80028da:	220c      	movs	r2, #12
 80028dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028de:	f04f 33ff 	mov.w	r3, #4294967295
 80028e2:	e009      	b.n	80028f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028e4:	4b08      	ldr	r3, [pc, #32]	; (8002908 <_sbrk+0x64>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028ea:	4b07      	ldr	r3, [pc, #28]	; (8002908 <_sbrk+0x64>)
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4413      	add	r3, r2
 80028f2:	4a05      	ldr	r2, [pc, #20]	; (8002908 <_sbrk+0x64>)
 80028f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028f6:	68fb      	ldr	r3, [r7, #12]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3718      	adds	r7, #24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	20030000 	.word	0x20030000
 8002904:	00000400 	.word	0x00000400
 8002908:	20000c3c 	.word	0x20000c3c
 800290c:	200056d0 	.word	0x200056d0

08002910 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002914:	4b06      	ldr	r3, [pc, #24]	; (8002930 <SystemInit+0x20>)
 8002916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800291a:	4a05      	ldr	r2, [pc, #20]	; (8002930 <SystemInit+0x20>)
 800291c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002920:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002924:	bf00      	nop
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	e000ed00 	.word	0xe000ed00

08002934 <HAL_UART_RxCpltCallback>:
volatile unsigned char bt_rx_buff[COMMAND_LENGTH];  // UART6으로부터 수신된 char를 저장하는 공간(\n을 만날때 까지)
volatile int bt_rx_index=0;  // bt rx_buff의 save위치
volatile int bt_newline_detect_flag=0;  // new line을 만났을때의 indicator 예) ledallon\n

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
	if (huart == &huart3)   // comport master와 연결된 uart
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a32      	ldr	r2, [pc, #200]	; (8002a08 <HAL_UART_RxCpltCallback+0xd4>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d12c      	bne.n	800299e <HAL_UART_RxCpltCallback+0x6a>
	{
		if (rx_index < COMMAND_LENGTH) // 현재까지 들어온 byte가 40byte를 넘지 않으면
 8002944:	4b31      	ldr	r3, [pc, #196]	; (8002a0c <HAL_UART_RxCpltCallback+0xd8>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2b27      	cmp	r3, #39	; 0x27
 800294a:	dc1d      	bgt.n	8002988 <HAL_UART_RxCpltCallback+0x54>
		{
			if (rx_data == '\n' || rx_data == '\r')
 800294c:	4b30      	ldr	r3, [pc, #192]	; (8002a10 <HAL_UART_RxCpltCallback+0xdc>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b0a      	cmp	r3, #10
 8002952:	d003      	beq.n	800295c <HAL_UART_RxCpltCallback+0x28>
 8002954:	4b2e      	ldr	r3, [pc, #184]	; (8002a10 <HAL_UART_RxCpltCallback+0xdc>)
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	2b0d      	cmp	r3, #13
 800295a:	d10b      	bne.n	8002974 <HAL_UART_RxCpltCallback+0x40>
			{
				rx_buff[rx_index] = 0; // '\0'
 800295c:	4b2b      	ldr	r3, [pc, #172]	; (8002a0c <HAL_UART_RxCpltCallback+0xd8>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a2c      	ldr	r2, [pc, #176]	; (8002a14 <HAL_UART_RxCpltCallback+0xe0>)
 8002962:	2100      	movs	r1, #0
 8002964:	54d1      	strb	r1, [r2, r3]
				newline_detect_flag=1;   // new line을 만났다는 flag를 set한다.
 8002966:	4b2c      	ldr	r3, [pc, #176]	; (8002a18 <HAL_UART_RxCpltCallback+0xe4>)
 8002968:	2201      	movs	r2, #1
 800296a:	601a      	str	r2, [r3, #0]
				rx_index=0;   // 다음 message저장을 위해서 rx_index값을 0으로 한다.
 800296c:	4b27      	ldr	r3, [pc, #156]	; (8002a0c <HAL_UART_RxCpltCallback+0xd8>)
 800296e:	2200      	movs	r2, #0
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	e00f      	b.n	8002994 <HAL_UART_RxCpltCallback+0x60>
			}
			else
			{
				rx_buff[rx_index++]=rx_data;
 8002974:	4b25      	ldr	r3, [pc, #148]	; (8002a0c <HAL_UART_RxCpltCallback+0xd8>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	1c5a      	adds	r2, r3, #1
 800297a:	4924      	ldr	r1, [pc, #144]	; (8002a0c <HAL_UART_RxCpltCallback+0xd8>)
 800297c:	600a      	str	r2, [r1, #0]
 800297e:	4a24      	ldr	r2, [pc, #144]	; (8002a10 <HAL_UART_RxCpltCallback+0xdc>)
 8002980:	7811      	ldrb	r1, [r2, #0]
 8002982:	4a24      	ldr	r2, [pc, #144]	; (8002a14 <HAL_UART_RxCpltCallback+0xe0>)
 8002984:	54d1      	strb	r1, [r2, r3]
 8002986:	e005      	b.n	8002994 <HAL_UART_RxCpltCallback+0x60>
			}

		}
		else
		{
			rx_index=0;
 8002988:	4b20      	ldr	r3, [pc, #128]	; (8002a0c <HAL_UART_RxCpltCallback+0xd8>)
 800298a:	2200      	movs	r2, #0
 800298c:	601a      	str	r2, [r3, #0]
			printf("Message Overflow !!!!\n");
 800298e:	4823      	ldr	r0, [pc, #140]	; (8002a1c <HAL_UART_RxCpltCallback+0xe8>)
 8002990:	f009 fb28 	bl	800bfe4 <puts>
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해줘야 다음 INT가 발생이 된다.
		HAL_UART_Receive_IT(&huart3, &rx_data, 1);
 8002994:	2201      	movs	r2, #1
 8002996:	491e      	ldr	r1, [pc, #120]	; (8002a10 <HAL_UART_RxCpltCallback+0xdc>)
 8002998:	481b      	ldr	r0, [pc, #108]	; (8002a08 <HAL_UART_RxCpltCallback+0xd4>)
 800299a:	f005 f88c 	bl	8007ab6 <HAL_UART_Receive_IT>
	}

	if (huart == &huart6)   // BT 와 연결된 uart
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a1f      	ldr	r2, [pc, #124]	; (8002a20 <HAL_UART_RxCpltCallback+0xec>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d12c      	bne.n	8002a00 <HAL_UART_RxCpltCallback+0xcc>
	{
		if (bt_rx_index < COMMAND_LENGTH) // 현재까지 들어온 byte가 40byte를 넘지 않으면
 80029a6:	4b1f      	ldr	r3, [pc, #124]	; (8002a24 <HAL_UART_RxCpltCallback+0xf0>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2b27      	cmp	r3, #39	; 0x27
 80029ac:	dc1d      	bgt.n	80029ea <HAL_UART_RxCpltCallback+0xb6>
		{
			if (bt_rx_data == '\n' || bt_rx_data == '\r')
 80029ae:	4b1e      	ldr	r3, [pc, #120]	; (8002a28 <HAL_UART_RxCpltCallback+0xf4>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	2b0a      	cmp	r3, #10
 80029b4:	d003      	beq.n	80029be <HAL_UART_RxCpltCallback+0x8a>
 80029b6:	4b1c      	ldr	r3, [pc, #112]	; (8002a28 <HAL_UART_RxCpltCallback+0xf4>)
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2b0d      	cmp	r3, #13
 80029bc:	d10b      	bne.n	80029d6 <HAL_UART_RxCpltCallback+0xa2>
			{
				bt_rx_buff[rx_index] = 0; // '\0'
 80029be:	4b13      	ldr	r3, [pc, #76]	; (8002a0c <HAL_UART_RxCpltCallback+0xd8>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a1a      	ldr	r2, [pc, #104]	; (8002a2c <HAL_UART_RxCpltCallback+0xf8>)
 80029c4:	2100      	movs	r1, #0
 80029c6:	54d1      	strb	r1, [r2, r3]
				bt_newline_detect_flag=1;   // new line을 만났다는 flag를 set한다.
 80029c8:	4b19      	ldr	r3, [pc, #100]	; (8002a30 <HAL_UART_RxCpltCallback+0xfc>)
 80029ca:	2201      	movs	r2, #1
 80029cc:	601a      	str	r2, [r3, #0]
				bt_rx_index=0;   // 다음 message저장을 위해서 rx_index값을 0으로 한다.
 80029ce:	4b15      	ldr	r3, [pc, #84]	; (8002a24 <HAL_UART_RxCpltCallback+0xf0>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	e00f      	b.n	80029f6 <HAL_UART_RxCpltCallback+0xc2>
			}
			else
			{
				bt_rx_buff[bt_rx_index++]=bt_rx_data;
 80029d6:	4b13      	ldr	r3, [pc, #76]	; (8002a24 <HAL_UART_RxCpltCallback+0xf0>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	1c5a      	adds	r2, r3, #1
 80029dc:	4911      	ldr	r1, [pc, #68]	; (8002a24 <HAL_UART_RxCpltCallback+0xf0>)
 80029de:	600a      	str	r2, [r1, #0]
 80029e0:	4a11      	ldr	r2, [pc, #68]	; (8002a28 <HAL_UART_RxCpltCallback+0xf4>)
 80029e2:	7811      	ldrb	r1, [r2, #0]
 80029e4:	4a11      	ldr	r2, [pc, #68]	; (8002a2c <HAL_UART_RxCpltCallback+0xf8>)
 80029e6:	54d1      	strb	r1, [r2, r3]
 80029e8:	e005      	b.n	80029f6 <HAL_UART_RxCpltCallback+0xc2>
			}

		}
		else
		{
			bt_rx_index=0;
 80029ea:	4b0e      	ldr	r3, [pc, #56]	; (8002a24 <HAL_UART_RxCpltCallback+0xf0>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
			printf("BT Message Overflow !!!!\n");
 80029f0:	4810      	ldr	r0, [pc, #64]	; (8002a34 <HAL_UART_RxCpltCallback+0x100>)
 80029f2:	f009 faf7 	bl	800bfe4 <puts>
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해줘야 다음 INT가 발생이 된다.
		HAL_UART_Receive_IT(&huart6, &bt_rx_data, 1);
 80029f6:	2201      	movs	r2, #1
 80029f8:	490b      	ldr	r1, [pc, #44]	; (8002a28 <HAL_UART_RxCpltCallback+0xf4>)
 80029fa:	4809      	ldr	r0, [pc, #36]	; (8002a20 <HAL_UART_RxCpltCallback+0xec>)
 80029fc:	f005 f85b 	bl	8007ab6 <HAL_UART_Receive_IT>
	}
}
 8002a00:	bf00      	nop
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	20000634 	.word	0x20000634
 8002a0c:	20000c68 	.word	0x20000c68
 8002a10:	20000bdc 	.word	0x20000bdc
 8002a14:	20000c40 	.word	0x20000c40
 8002a18:	20000c6c 	.word	0x20000c6c
 8002a1c:	0800cdec 	.word	0x0800cdec
 8002a20:	20000678 	.word	0x20000678
 8002a24:	20000c98 	.word	0x20000c98
 8002a28:	20000bdd 	.word	0x20000bdd
 8002a2c:	20000c70 	.word	0x20000c70
 8002a30:	20000c9c 	.word	0x20000c9c
 8002a34:	0800ce04 	.word	0x0800ce04

08002a38 <HAL_TIM_IC_CaptureCallback>:
// 1. Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_tim.c에 가서
//  HAL_TIM_IC_CaptureCallback를 잘라내기를 해서 이곳으로 가져 온다.
// 2. 초음파 센서의 ECHO핀의 상승 에지와 하강에지 발생시 이곳으로 들어 온다.
volatile uint8_t  is_first_capture=0;  // 0:상승에지 1:하강에지
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a13      	ldr	r2, [pc, #76]	; (8002a94 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d11f      	bne.n	8002a8a <HAL_TIM_IC_CaptureCallback+0x52>
	{
		if (is_first_capture == 0)   // 상승에지
 8002a4a:	4b13      	ldr	r3, [pc, #76]	; (8002a98 <HAL_TIM_IC_CaptureCallback+0x60>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d107      	bne.n	8002a64 <HAL_TIM_IC_CaptureCallback+0x2c>
		{
			__HAL_TIM_SET_COUNTER(htim,0);   // clear H/W counter
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	625a      	str	r2, [r3, #36]	; 0x24
			is_first_capture=1;  // 상승에지를 만났다는 flag변수 indicator를 set
 8002a5c:	4b0e      	ldr	r3, [pc, #56]	; (8002a98 <HAL_TIM_IC_CaptureCallback+0x60>)
 8002a5e:	2201      	movs	r2, #1
 8002a60:	701a      	strb	r2, [r3, #0]
			is_first_capture=0;  // 다음 echo 펄스를 count하기 위해 변수 초기화
			distance=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // 현재까지 count한 펄스수를 읽어 온다.
			ic_cpt_finish_flag=1;   // 초음파 측정 완료
		}
	}
}
 8002a62:	e012      	b.n	8002a8a <HAL_TIM_IC_CaptureCallback+0x52>
		else if (is_first_capture == 1)   // 하강 에지를 만나면
 8002a64:	4b0c      	ldr	r3, [pc, #48]	; (8002a98 <HAL_TIM_IC_CaptureCallback+0x60>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d10d      	bne.n	8002a8a <HAL_TIM_IC_CaptureCallback+0x52>
			is_first_capture=0;  // 다음 echo 펄스를 count하기 위해 변수 초기화
 8002a6e:	4b0a      	ldr	r3, [pc, #40]	; (8002a98 <HAL_TIM_IC_CaptureCallback+0x60>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	701a      	strb	r2, [r3, #0]
			distance=HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // 현재까지 count한 펄스수를 읽어 온다.
 8002a74:	2100      	movs	r1, #0
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f004 fa12 	bl	8006ea0 <HAL_TIM_ReadCapturedValue>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	461a      	mov	r2, r3
 8002a80:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <HAL_TIM_IC_CaptureCallback+0x64>)
 8002a82:	601a      	str	r2, [r3, #0]
			ic_cpt_finish_flag=1;   // 초음파 측정 완료
 8002a84:	4b06      	ldr	r3, [pc, #24]	; (8002aa0 <HAL_TIM_IC_CaptureCallback+0x68>)
 8002a86:	2201      	movs	r2, #1
 8002a88:	601a      	str	r2, [r3, #0]
}
 8002a8a:	bf00      	nop
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40000400 	.word	0x40000400
 8002a98:	20000ca8 	.word	0x20000ca8
 8002a9c:	20000ca0 	.word	0x20000ca0
 8002aa0:	20000ca4 	.word	0x20000ca4

08002aa4 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 

  ldr   sp, =_estack       /* set stack pointer */
 8002aa4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002adc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002aa8:	480d      	ldr	r0, [pc, #52]	; (8002ae0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002aaa:	490e      	ldr	r1, [pc, #56]	; (8002ae4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002aac:	4a0e      	ldr	r2, [pc, #56]	; (8002ae8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ab0:	e002      	b.n	8002ab8 <LoopCopyDataInit>

08002ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ab6:	3304      	adds	r3, #4

08002ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002abc:	d3f9      	bcc.n	8002ab2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002abe:	4a0b      	ldr	r2, [pc, #44]	; (8002aec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ac0:	4c0b      	ldr	r4, [pc, #44]	; (8002af0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ac4:	e001      	b.n	8002aca <LoopFillZerobss>

08002ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ac8:	3204      	adds	r2, #4

08002aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002acc:	d3fb      	bcc.n	8002ac6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ace:	f7ff ff1f 	bl	8002910 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ad2:	f009 f947 	bl	800bd64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ad6:	f7fe fb0b 	bl	80010f0 <main>
  bx  lr    
 8002ada:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002adc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ae4:	20000114 	.word	0x20000114
  ldr r2, =_sidata
 8002ae8:	0800d040 	.word	0x0800d040
  ldr r2, =_sbss
 8002aec:	20000114 	.word	0x20000114
  ldr r4, =_ebss
 8002af0:	200056d0 	.word	0x200056d0

08002af4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002af4:	e7fe      	b.n	8002af4 <CAN1_RX0_IRQHandler>
	...

08002af8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002afc:	4b0e      	ldr	r3, [pc, #56]	; (8002b38 <HAL_Init+0x40>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a0d      	ldr	r2, [pc, #52]	; (8002b38 <HAL_Init+0x40>)
 8002b02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b08:	4b0b      	ldr	r3, [pc, #44]	; (8002b38 <HAL_Init+0x40>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a0a      	ldr	r2, [pc, #40]	; (8002b38 <HAL_Init+0x40>)
 8002b0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b14:	4b08      	ldr	r3, [pc, #32]	; (8002b38 <HAL_Init+0x40>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a07      	ldr	r2, [pc, #28]	; (8002b38 <HAL_Init+0x40>)
 8002b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b20:	2003      	movs	r0, #3
 8002b22:	f000 fd88 	bl	8003636 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b26:	200f      	movs	r0, #15
 8002b28:	f7ff fd3c 	bl	80025a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b2c:	f7ff f94c 	bl	8001dc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	40023c00 	.word	0x40023c00

08002b3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b40:	4b06      	ldr	r3, [pc, #24]	; (8002b5c <HAL_IncTick+0x20>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	461a      	mov	r2, r3
 8002b46:	4b06      	ldr	r3, [pc, #24]	; (8002b60 <HAL_IncTick+0x24>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	4a04      	ldr	r2, [pc, #16]	; (8002b60 <HAL_IncTick+0x24>)
 8002b4e:	6013      	str	r3, [r2, #0]
}
 8002b50:	bf00      	nop
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	200000a8 	.word	0x200000a8
 8002b60:	20000cac 	.word	0x20000cac

08002b64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  return uwTick;
 8002b68:	4b03      	ldr	r3, [pc, #12]	; (8002b78 <HAL_GetTick+0x14>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	20000cac 	.word	0x20000cac

08002b7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b84:	f7ff ffee 	bl	8002b64 <HAL_GetTick>
 8002b88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b94:	d005      	beq.n	8002ba2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b96:	4b0a      	ldr	r3, [pc, #40]	; (8002bc0 <HAL_Delay+0x44>)
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ba2:	bf00      	nop
 8002ba4:	f7ff ffde 	bl	8002b64 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d8f7      	bhi.n	8002ba4 <HAL_Delay+0x28>
  {
  }
}
 8002bb4:	bf00      	nop
 8002bb6:	bf00      	nop
 8002bb8:	3710      	adds	r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	200000a8 	.word	0x200000a8

08002bc4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e033      	b.n	8002c42 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d109      	bne.n	8002bf6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f7ff f91c 	bl	8001e20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	f003 0310 	and.w	r3, r3, #16
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d118      	bne.n	8002c34 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c0a:	f023 0302 	bic.w	r3, r3, #2
 8002c0e:	f043 0202 	orr.w	r2, r3, #2
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 fb5a 	bl	80032d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	f023 0303 	bic.w	r3, r3, #3
 8002c2a:	f043 0201 	orr.w	r2, r3, #1
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	641a      	str	r2, [r3, #64]	; 0x40
 8002c32:	e001      	b.n	8002c38 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
	...

08002c4c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002c54:	2300      	movs	r3, #0
 8002c56:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d101      	bne.n	8002c66 <HAL_ADC_Start_IT+0x1a>
 8002c62:	2302      	movs	r3, #2
 8002c64:	e0bd      	b.n	8002de2 <HAL_ADC_Start_IT+0x196>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d018      	beq.n	8002cae <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689a      	ldr	r2, [r3, #8]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f042 0201 	orr.w	r2, r2, #1
 8002c8a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c8c:	4b58      	ldr	r3, [pc, #352]	; (8002df0 <HAL_ADC_Start_IT+0x1a4>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a58      	ldr	r2, [pc, #352]	; (8002df4 <HAL_ADC_Start_IT+0x1a8>)
 8002c92:	fba2 2303 	umull	r2, r3, r2, r3
 8002c96:	0c9a      	lsrs	r2, r3, #18
 8002c98:	4613      	mov	r3, r2
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	4413      	add	r3, r2
 8002c9e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002ca0:	e002      	b.n	8002ca8 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1f9      	bne.n	8002ca2 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	f040 8085 	bne.w	8002dc8 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002cc6:	f023 0301 	bic.w	r3, r3, #1
 8002cca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d007      	beq.n	8002cf0 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ce8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cfc:	d106      	bne.n	8002d0c <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d02:	f023 0206 	bic.w	r2, r3, #6
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	645a      	str	r2, [r3, #68]	; 0x44
 8002d0a:	e002      	b.n	8002d12 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d1a:	4b37      	ldr	r3, [pc, #220]	; (8002df8 <HAL_ADC_Start_IT+0x1ac>)
 8002d1c:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002d26:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	6812      	ldr	r2, [r2, #0]
 8002d32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d36:	f043 0320 	orr.w	r3, r3, #32
 8002d3a:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f003 031f 	and.w	r3, r3, #31
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d12a      	bne.n	8002d9e <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a2b      	ldr	r2, [pc, #172]	; (8002dfc <HAL_ADC_Start_IT+0x1b0>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d015      	beq.n	8002d7e <HAL_ADC_Start_IT+0x132>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a2a      	ldr	r2, [pc, #168]	; (8002e00 <HAL_ADC_Start_IT+0x1b4>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d105      	bne.n	8002d68 <HAL_ADC_Start_IT+0x11c>
 8002d5c:	4b26      	ldr	r3, [pc, #152]	; (8002df8 <HAL_ADC_Start_IT+0x1ac>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f003 031f 	and.w	r3, r3, #31
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00a      	beq.n	8002d7e <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a25      	ldr	r2, [pc, #148]	; (8002e04 <HAL_ADC_Start_IT+0x1b8>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d136      	bne.n	8002de0 <HAL_ADC_Start_IT+0x194>
 8002d72:	4b21      	ldr	r3, [pc, #132]	; (8002df8 <HAL_ADC_Start_IT+0x1ac>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f003 0310 	and.w	r3, r3, #16
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d130      	bne.n	8002de0 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d129      	bne.n	8002de0 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689a      	ldr	r2, [r3, #8]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d9a:	609a      	str	r2, [r3, #8]
 8002d9c:	e020      	b.n	8002de0 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a16      	ldr	r2, [pc, #88]	; (8002dfc <HAL_ADC_Start_IT+0x1b0>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d11b      	bne.n	8002de0 <HAL_ADC_Start_IT+0x194>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d114      	bne.n	8002de0 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	689a      	ldr	r2, [r3, #8]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002dc4:	609a      	str	r2, [r3, #8]
 8002dc6:	e00b      	b.n	8002de0 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dcc:	f043 0210 	orr.w	r2, r3, #16
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd8:	f043 0201 	orr.w	r2, r3, #1
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3714      	adds	r7, #20
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	200000a0 	.word	0x200000a0
 8002df4:	431bde83 	.word	0x431bde83
 8002df8:	40012300 	.word	0x40012300
 8002dfc:	40012000 	.word	0x40012000
 8002e00:	40012100 	.word	0x40012100
 8002e04:	40012200 	.word	0x40012200

08002e08 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	617b      	str	r3, [r7, #20]
 8002e14:	2300      	movs	r3, #0
 8002e16:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	f003 0320 	and.w	r3, r3, #32
 8002e36:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d049      	beq.n	8002ed2 <HAL_ADC_IRQHandler+0xca>
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d046      	beq.n	8002ed2 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e48:	f003 0310 	and.w	r3, r3, #16
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d105      	bne.n	8002e5c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d12b      	bne.n	8002ec2 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d127      	bne.n	8002ec2 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e78:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d006      	beq.n	8002e8e <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d119      	bne.n	8002ec2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	685a      	ldr	r2, [r3, #4]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 0220 	bic.w	r2, r2, #32
 8002e9c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d105      	bne.n	8002ec2 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	f043 0201 	orr.w	r2, r3, #1
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7fe f8f6 	bl	80010b4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f06f 0212 	mvn.w	r2, #18
 8002ed0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d057      	beq.n	8002f98 <HAL_ADC_IRQHandler+0x190>
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d054      	beq.n	8002f98 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	f003 0310 	and.w	r3, r3, #16
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d105      	bne.n	8002f06 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d139      	bne.n	8002f88 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d006      	beq.n	8002f30 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d12b      	bne.n	8002f88 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d124      	bne.n	8002f88 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d11d      	bne.n	8002f88 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d119      	bne.n	8002f88 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	685a      	ldr	r2, [r3, #4]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f62:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f68:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d105      	bne.n	8002f88 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f80:	f043 0201 	orr.w	r2, r3, #1
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 fa9d 	bl	80034c8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f06f 020c 	mvn.w	r2, #12
 8002f96:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa6:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d017      	beq.n	8002fde <HAL_ADC_IRQHandler+0x1d6>
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d014      	beq.n	8002fde <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d10d      	bne.n	8002fde <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f837 	bl	8003042 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f06f 0201 	mvn.w	r2, #1
 8002fdc:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f003 0320 	and.w	r3, r3, #32
 8002fe4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fec:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d015      	beq.n	8003020 <HAL_ADC_IRQHandler+0x218>
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d012      	beq.n	8003020 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffe:	f043 0202 	orr.w	r2, r3, #2
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f06f 0220 	mvn.w	r2, #32
 800300e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 f820 	bl	8003056 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f06f 0220 	mvn.w	r2, #32
 800301e:	601a      	str	r2, [r3, #0]
  }
}
 8003020:	bf00      	nop
 8003022:	3718      	adds	r7, #24
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003036:	4618      	mov	r0, r3
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003042:	b480      	push	{r7}
 8003044:	b083      	sub	sp, #12
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003056:	b480      	push	{r7}
 8003058:	b083      	sub	sp, #12
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
	...

0800306c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003076:	2300      	movs	r3, #0
 8003078:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003080:	2b01      	cmp	r3, #1
 8003082:	d101      	bne.n	8003088 <HAL_ADC_ConfigChannel+0x1c>
 8003084:	2302      	movs	r3, #2
 8003086:	e113      	b.n	80032b0 <HAL_ADC_ConfigChannel+0x244>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2b09      	cmp	r3, #9
 8003096:	d925      	bls.n	80030e4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68d9      	ldr	r1, [r3, #12]
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	461a      	mov	r2, r3
 80030a6:	4613      	mov	r3, r2
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	4413      	add	r3, r2
 80030ac:	3b1e      	subs	r3, #30
 80030ae:	2207      	movs	r2, #7
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	43da      	mvns	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	400a      	ands	r2, r1
 80030bc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68d9      	ldr	r1, [r3, #12]
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	4618      	mov	r0, r3
 80030d0:	4603      	mov	r3, r0
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	4403      	add	r3, r0
 80030d6:	3b1e      	subs	r3, #30
 80030d8:	409a      	lsls	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	430a      	orrs	r2, r1
 80030e0:	60da      	str	r2, [r3, #12]
 80030e2:	e022      	b.n	800312a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6919      	ldr	r1, [r3, #16]
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	461a      	mov	r2, r3
 80030f2:	4613      	mov	r3, r2
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	4413      	add	r3, r2
 80030f8:	2207      	movs	r2, #7
 80030fa:	fa02 f303 	lsl.w	r3, r2, r3
 80030fe:	43da      	mvns	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	400a      	ands	r2, r1
 8003106:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6919      	ldr	r1, [r3, #16]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	689a      	ldr	r2, [r3, #8]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	b29b      	uxth	r3, r3
 8003118:	4618      	mov	r0, r3
 800311a:	4603      	mov	r3, r0
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	4403      	add	r3, r0
 8003120:	409a      	lsls	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	430a      	orrs	r2, r1
 8003128:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b06      	cmp	r3, #6
 8003130:	d824      	bhi.n	800317c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	4613      	mov	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4413      	add	r3, r2
 8003142:	3b05      	subs	r3, #5
 8003144:	221f      	movs	r2, #31
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
 800314a:	43da      	mvns	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	400a      	ands	r2, r1
 8003152:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	b29b      	uxth	r3, r3
 8003160:	4618      	mov	r0, r3
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	4613      	mov	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4413      	add	r3, r2
 800316c:	3b05      	subs	r3, #5
 800316e:	fa00 f203 	lsl.w	r2, r0, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	635a      	str	r2, [r3, #52]	; 0x34
 800317a:	e04c      	b.n	8003216 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	2b0c      	cmp	r3, #12
 8003182:	d824      	bhi.n	80031ce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	4613      	mov	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4413      	add	r3, r2
 8003194:	3b23      	subs	r3, #35	; 0x23
 8003196:	221f      	movs	r2, #31
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	43da      	mvns	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	400a      	ands	r2, r1
 80031a4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	4618      	mov	r0, r3
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	4613      	mov	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	3b23      	subs	r3, #35	; 0x23
 80031c0:	fa00 f203 	lsl.w	r2, r0, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	631a      	str	r2, [r3, #48]	; 0x30
 80031cc:	e023      	b.n	8003216 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	4613      	mov	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4413      	add	r3, r2
 80031de:	3b41      	subs	r3, #65	; 0x41
 80031e0:	221f      	movs	r2, #31
 80031e2:	fa02 f303 	lsl.w	r3, r2, r3
 80031e6:	43da      	mvns	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	400a      	ands	r2, r1
 80031ee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	4618      	mov	r0, r3
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685a      	ldr	r2, [r3, #4]
 8003202:	4613      	mov	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	3b41      	subs	r3, #65	; 0x41
 800320a:	fa00 f203 	lsl.w	r2, r0, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	430a      	orrs	r2, r1
 8003214:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003216:	4b29      	ldr	r3, [pc, #164]	; (80032bc <HAL_ADC_ConfigChannel+0x250>)
 8003218:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a28      	ldr	r2, [pc, #160]	; (80032c0 <HAL_ADC_ConfigChannel+0x254>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d10f      	bne.n	8003244 <HAL_ADC_ConfigChannel+0x1d8>
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2b12      	cmp	r3, #18
 800322a:	d10b      	bne.n	8003244 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a1d      	ldr	r2, [pc, #116]	; (80032c0 <HAL_ADC_ConfigChannel+0x254>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d12b      	bne.n	80032a6 <HAL_ADC_ConfigChannel+0x23a>
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a1c      	ldr	r2, [pc, #112]	; (80032c4 <HAL_ADC_ConfigChannel+0x258>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d003      	beq.n	8003260 <HAL_ADC_ConfigChannel+0x1f4>
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2b11      	cmp	r3, #17
 800325e:	d122      	bne.n	80032a6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a11      	ldr	r2, [pc, #68]	; (80032c4 <HAL_ADC_ConfigChannel+0x258>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d111      	bne.n	80032a6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003282:	4b11      	ldr	r3, [pc, #68]	; (80032c8 <HAL_ADC_ConfigChannel+0x25c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a11      	ldr	r2, [pc, #68]	; (80032cc <HAL_ADC_ConfigChannel+0x260>)
 8003288:	fba2 2303 	umull	r2, r3, r2, r3
 800328c:	0c9a      	lsrs	r2, r3, #18
 800328e:	4613      	mov	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	4413      	add	r3, r2
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003298:	e002      	b.n	80032a0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	3b01      	subs	r3, #1
 800329e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d1f9      	bne.n	800329a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3714      	adds	r7, #20
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr
 80032bc:	40012300 	.word	0x40012300
 80032c0:	40012000 	.word	0x40012000
 80032c4:	10000012 	.word	0x10000012
 80032c8:	200000a0 	.word	0x200000a0
 80032cc:	431bde83 	.word	0x431bde83

080032d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032d8:	4b79      	ldr	r3, [pc, #484]	; (80034c0 <ADC_Init+0x1f0>)
 80032da:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	685a      	ldr	r2, [r3, #4]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	431a      	orrs	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003304:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6859      	ldr	r1, [r3, #4]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	021a      	lsls	r2, r3, #8
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	685a      	ldr	r2, [r3, #4]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003328:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6859      	ldr	r1, [r3, #4]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	430a      	orrs	r2, r1
 800333a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	689a      	ldr	r2, [r3, #8]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800334a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6899      	ldr	r1, [r3, #8]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68da      	ldr	r2, [r3, #12]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	430a      	orrs	r2, r1
 800335c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003362:	4a58      	ldr	r2, [pc, #352]	; (80034c4 <ADC_Init+0x1f4>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d022      	beq.n	80033ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689a      	ldr	r2, [r3, #8]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003376:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6899      	ldr	r1, [r3, #8]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	430a      	orrs	r2, r1
 8003388:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003398:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6899      	ldr	r1, [r3, #8]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	430a      	orrs	r2, r1
 80033aa:	609a      	str	r2, [r3, #8]
 80033ac:	e00f      	b.n	80033ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80033cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 0202 	bic.w	r2, r2, #2
 80033dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6899      	ldr	r1, [r3, #8]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	7e1b      	ldrb	r3, [r3, #24]
 80033e8:	005a      	lsls	r2, r3, #1
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d01b      	beq.n	8003434 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800340a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800341a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6859      	ldr	r1, [r3, #4]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003426:	3b01      	subs	r3, #1
 8003428:	035a      	lsls	r2, r3, #13
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	430a      	orrs	r2, r1
 8003430:	605a      	str	r2, [r3, #4]
 8003432:	e007      	b.n	8003444 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685a      	ldr	r2, [r3, #4]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003442:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003452:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	3b01      	subs	r3, #1
 8003460:	051a      	lsls	r2, r3, #20
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	430a      	orrs	r2, r1
 8003468:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003478:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	6899      	ldr	r1, [r3, #8]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003486:	025a      	lsls	r2, r3, #9
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689a      	ldr	r2, [r3, #8]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800349e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6899      	ldr	r1, [r3, #8]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	029a      	lsls	r2, r3, #10
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	609a      	str	r2, [r3, #8]
}
 80034b4:	bf00      	nop
 80034b6:	3714      	adds	r7, #20
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr
 80034c0:	40012300 	.word	0x40012300
 80034c4:	0f000001 	.word	0x0f000001

080034c8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f003 0307 	and.w	r3, r3, #7
 80034ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034ec:	4b0c      	ldr	r3, [pc, #48]	; (8003520 <__NVIC_SetPriorityGrouping+0x44>)
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034f2:	68ba      	ldr	r2, [r7, #8]
 80034f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034f8:	4013      	ands	r3, r2
 80034fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003504:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800350c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800350e:	4a04      	ldr	r2, [pc, #16]	; (8003520 <__NVIC_SetPriorityGrouping+0x44>)
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	60d3      	str	r3, [r2, #12]
}
 8003514:	bf00      	nop
 8003516:	3714      	adds	r7, #20
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr
 8003520:	e000ed00 	.word	0xe000ed00

08003524 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003528:	4b04      	ldr	r3, [pc, #16]	; (800353c <__NVIC_GetPriorityGrouping+0x18>)
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	0a1b      	lsrs	r3, r3, #8
 800352e:	f003 0307 	and.w	r3, r3, #7
}
 8003532:	4618      	mov	r0, r3
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	e000ed00 	.word	0xe000ed00

08003540 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	4603      	mov	r3, r0
 8003548:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800354a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800354e:	2b00      	cmp	r3, #0
 8003550:	db0b      	blt.n	800356a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003552:	79fb      	ldrb	r3, [r7, #7]
 8003554:	f003 021f 	and.w	r2, r3, #31
 8003558:	4907      	ldr	r1, [pc, #28]	; (8003578 <__NVIC_EnableIRQ+0x38>)
 800355a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800355e:	095b      	lsrs	r3, r3, #5
 8003560:	2001      	movs	r0, #1
 8003562:	fa00 f202 	lsl.w	r2, r0, r2
 8003566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800356a:	bf00      	nop
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	e000e100 	.word	0xe000e100

0800357c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	4603      	mov	r3, r0
 8003584:	6039      	str	r1, [r7, #0]
 8003586:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800358c:	2b00      	cmp	r3, #0
 800358e:	db0a      	blt.n	80035a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	b2da      	uxtb	r2, r3
 8003594:	490c      	ldr	r1, [pc, #48]	; (80035c8 <__NVIC_SetPriority+0x4c>)
 8003596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800359a:	0112      	lsls	r2, r2, #4
 800359c:	b2d2      	uxtb	r2, r2
 800359e:	440b      	add	r3, r1
 80035a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035a4:	e00a      	b.n	80035bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	b2da      	uxtb	r2, r3
 80035aa:	4908      	ldr	r1, [pc, #32]	; (80035cc <__NVIC_SetPriority+0x50>)
 80035ac:	79fb      	ldrb	r3, [r7, #7]
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	3b04      	subs	r3, #4
 80035b4:	0112      	lsls	r2, r2, #4
 80035b6:	b2d2      	uxtb	r2, r2
 80035b8:	440b      	add	r3, r1
 80035ba:	761a      	strb	r2, [r3, #24]
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	e000e100 	.word	0xe000e100
 80035cc:	e000ed00 	.word	0xe000ed00

080035d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b089      	sub	sp, #36	; 0x24
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f003 0307 	and.w	r3, r3, #7
 80035e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	f1c3 0307 	rsb	r3, r3, #7
 80035ea:	2b04      	cmp	r3, #4
 80035ec:	bf28      	it	cs
 80035ee:	2304      	movcs	r3, #4
 80035f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	3304      	adds	r3, #4
 80035f6:	2b06      	cmp	r3, #6
 80035f8:	d902      	bls.n	8003600 <NVIC_EncodePriority+0x30>
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	3b03      	subs	r3, #3
 80035fe:	e000      	b.n	8003602 <NVIC_EncodePriority+0x32>
 8003600:	2300      	movs	r3, #0
 8003602:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003604:	f04f 32ff 	mov.w	r2, #4294967295
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	43da      	mvns	r2, r3
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	401a      	ands	r2, r3
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003618:	f04f 31ff 	mov.w	r1, #4294967295
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	fa01 f303 	lsl.w	r3, r1, r3
 8003622:	43d9      	mvns	r1, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003628:	4313      	orrs	r3, r2
         );
}
 800362a:	4618      	mov	r0, r3
 800362c:	3724      	adds	r7, #36	; 0x24
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr

08003636 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b082      	sub	sp, #8
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7ff ff4c 	bl	80034dc <__NVIC_SetPriorityGrouping>
}
 8003644:	bf00      	nop
 8003646:	3708      	adds	r7, #8
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	4603      	mov	r3, r0
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
 8003658:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800365a:	2300      	movs	r3, #0
 800365c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800365e:	f7ff ff61 	bl	8003524 <__NVIC_GetPriorityGrouping>
 8003662:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	68b9      	ldr	r1, [r7, #8]
 8003668:	6978      	ldr	r0, [r7, #20]
 800366a:	f7ff ffb1 	bl	80035d0 <NVIC_EncodePriority>
 800366e:	4602      	mov	r2, r0
 8003670:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003674:	4611      	mov	r1, r2
 8003676:	4618      	mov	r0, r3
 8003678:	f7ff ff80 	bl	800357c <__NVIC_SetPriority>
}
 800367c:	bf00      	nop
 800367e:	3718      	adds	r7, #24
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	4603      	mov	r3, r0
 800368c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800368e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003692:	4618      	mov	r0, r3
 8003694:	f7ff ff54 	bl	8003540 <__NVIC_EnableIRQ>
}
 8003698:	bf00      	nop
 800369a:	3708      	adds	r7, #8
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80036ae:	f7ff fa59 	bl	8002b64 <HAL_GetTick>
 80036b2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d008      	beq.n	80036d2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2280      	movs	r2, #128	; 0x80
 80036c4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e052      	b.n	8003778 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 0216 	bic.w	r2, r2, #22
 80036e0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	695a      	ldr	r2, [r3, #20]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036f0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d103      	bne.n	8003702 <HAL_DMA_Abort+0x62>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d007      	beq.n	8003712 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 0208 	bic.w	r2, r2, #8
 8003710:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 0201 	bic.w	r2, r2, #1
 8003720:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003722:	e013      	b.n	800374c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003724:	f7ff fa1e 	bl	8002b64 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b05      	cmp	r3, #5
 8003730:	d90c      	bls.n	800374c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2220      	movs	r2, #32
 8003736:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2203      	movs	r2, #3
 800373c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e015      	b.n	8003778 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1e4      	bne.n	8003724 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800375e:	223f      	movs	r2, #63	; 0x3f
 8003760:	409a      	lsls	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d004      	beq.n	800379e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2280      	movs	r2, #128	; 0x80
 8003798:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e00c      	b.n	80037b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2205      	movs	r2, #5
 80037a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 0201 	bic.w	r2, r2, #1
 80037b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e06c      	b.n	80038b0 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d106      	bne.n	80037ee <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2223      	movs	r2, #35	; 0x23
 80037e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7fe fb65 	bl	8001eb8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ee:	2300      	movs	r3, #0
 80037f0:	60bb      	str	r3, [r7, #8]
 80037f2:	4b31      	ldr	r3, [pc, #196]	; (80038b8 <HAL_ETH_Init+0xf4>)
 80037f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f6:	4a30      	ldr	r2, [pc, #192]	; (80038b8 <HAL_ETH_Init+0xf4>)
 80037f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037fc:	6453      	str	r3, [r2, #68]	; 0x44
 80037fe:	4b2e      	ldr	r3, [pc, #184]	; (80038b8 <HAL_ETH_Init+0xf4>)
 8003800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003806:	60bb      	str	r3, [r7, #8]
 8003808:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800380a:	4b2c      	ldr	r3, [pc, #176]	; (80038bc <HAL_ETH_Init+0xf8>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	4a2b      	ldr	r2, [pc, #172]	; (80038bc <HAL_ETH_Init+0xf8>)
 8003810:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003814:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003816:	4b29      	ldr	r3, [pc, #164]	; (80038bc <HAL_ETH_Init+0xf8>)
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	4927      	ldr	r1, [pc, #156]	; (80038bc <HAL_ETH_Init+0xf8>)
 8003820:	4313      	orrs	r3, r2
 8003822:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003824:	4b25      	ldr	r3, [pc, #148]	; (80038bc <HAL_ETH_Init+0xf8>)
 8003826:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	6812      	ldr	r2, [r2, #0]
 8003836:	f043 0301 	orr.w	r3, r3, #1
 800383a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800383e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003840:	f7ff f990 	bl	8002b64 <HAL_GetTick>
 8003844:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003846:	e011      	b.n	800386c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003848:	f7ff f98c 	bl	8002b64 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003856:	d909      	bls.n	800386c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2204      	movs	r2, #4
 800385c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	22e0      	movs	r2, #224	; 0xe0
 8003864:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e021      	b.n	80038b0 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1e4      	bne.n	8003848 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f958 	bl	8003b34 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 f9ff 	bl	8003c88 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 fa55 	bl	8003d3a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	461a      	mov	r2, r3
 8003896:	2100      	movs	r1, #0
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 f9bd 	bl	8003c18 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2210      	movs	r2, #16
 80038aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80038ae:	2300      	movs	r3, #0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3710      	adds	r7, #16
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	40023800 	.word	0x40023800
 80038bc:	40013800 	.word	0x40013800

080038c0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	4b51      	ldr	r3, [pc, #324]	; (8003a1c <ETH_SetMACConfig+0x15c>)
 80038d6:	4013      	ands	r3, r2
 80038d8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	7c1b      	ldrb	r3, [r3, #16]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d102      	bne.n	80038e8 <ETH_SetMACConfig+0x28>
 80038e2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80038e6:	e000      	b.n	80038ea <ETH_SetMACConfig+0x2a>
 80038e8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	7c5b      	ldrb	r3, [r3, #17]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d102      	bne.n	80038f8 <ETH_SetMACConfig+0x38>
 80038f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80038f6:	e000      	b.n	80038fa <ETH_SetMACConfig+0x3a>
 80038f8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80038fa:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003900:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	7fdb      	ldrb	r3, [r3, #31]
 8003906:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003908:	431a      	orrs	r2, r3
                        macconf->Speed |
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800390e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	7f92      	ldrb	r2, [r2, #30]
 8003914:	2a00      	cmp	r2, #0
 8003916:	d102      	bne.n	800391e <ETH_SetMACConfig+0x5e>
 8003918:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800391c:	e000      	b.n	8003920 <ETH_SetMACConfig+0x60>
 800391e:	2200      	movs	r2, #0
                        macconf->Speed |
 8003920:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	7f1b      	ldrb	r3, [r3, #28]
 8003926:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003928:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800392e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	791b      	ldrb	r3, [r3, #4]
 8003934:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003936:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800393e:	2a00      	cmp	r2, #0
 8003940:	d102      	bne.n	8003948 <ETH_SetMACConfig+0x88>
 8003942:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003946:	e000      	b.n	800394a <ETH_SetMACConfig+0x8a>
 8003948:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800394a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	7bdb      	ldrb	r3, [r3, #15]
 8003950:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003952:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003958:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003960:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003962:	4313      	orrs	r3, r2
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	4313      	orrs	r3, r2
 8003968:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800397a:	2001      	movs	r0, #1
 800397c:	f7ff f8fe 	bl	8002b7c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003996:	4013      	ands	r3, r2
 8003998:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800399e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80039a6:	2a00      	cmp	r2, #0
 80039a8:	d101      	bne.n	80039ae <ETH_SetMACConfig+0xee>
 80039aa:	2280      	movs	r2, #128	; 0x80
 80039ac:	e000      	b.n	80039b0 <ETH_SetMACConfig+0xf0>
 80039ae:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80039b0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80039b6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80039be:	2a01      	cmp	r2, #1
 80039c0:	d101      	bne.n	80039c6 <ETH_SetMACConfig+0x106>
 80039c2:	2208      	movs	r2, #8
 80039c4:	e000      	b.n	80039c8 <ETH_SetMACConfig+0x108>
 80039c6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80039c8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80039d0:	2a01      	cmp	r2, #1
 80039d2:	d101      	bne.n	80039d8 <ETH_SetMACConfig+0x118>
 80039d4:	2204      	movs	r2, #4
 80039d6:	e000      	b.n	80039da <ETH_SetMACConfig+0x11a>
 80039d8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80039da:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80039e2:	2a01      	cmp	r2, #1
 80039e4:	d101      	bne.n	80039ea <ETH_SetMACConfig+0x12a>
 80039e6:	2202      	movs	r2, #2
 80039e8:	e000      	b.n	80039ec <ETH_SetMACConfig+0x12c>
 80039ea:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80039ec:	4313      	orrs	r3, r2
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a04:	2001      	movs	r0, #1
 8003a06:	f7ff f8b9 	bl	8002b7c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	619a      	str	r2, [r3, #24]
}
 8003a12:	bf00      	nop
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	ff20810f 	.word	0xff20810f

08003a20 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	4b3d      	ldr	r3, [pc, #244]	; (8003b30 <ETH_SetDMAConfig+0x110>)
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	7b1b      	ldrb	r3, [r3, #12]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d102      	bne.n	8003a4c <ETH_SetDMAConfig+0x2c>
 8003a46:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003a4a:	e000      	b.n	8003a4e <ETH_SetDMAConfig+0x2e>
 8003a4c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	7b5b      	ldrb	r3, [r3, #13]
 8003a52:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003a54:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003a56:	683a      	ldr	r2, [r7, #0]
 8003a58:	7f52      	ldrb	r2, [r2, #29]
 8003a5a:	2a00      	cmp	r2, #0
 8003a5c:	d102      	bne.n	8003a64 <ETH_SetDMAConfig+0x44>
 8003a5e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003a62:	e000      	b.n	8003a66 <ETH_SetDMAConfig+0x46>
 8003a64:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003a66:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	7b9b      	ldrb	r3, [r3, #14]
 8003a6c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003a6e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003a74:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	7f1b      	ldrb	r3, [r3, #28]
 8003a7a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003a7c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	7f9b      	ldrb	r3, [r3, #30]
 8003a82:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003a84:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003a8a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a92:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003a94:	4313      	orrs	r3, r2
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ab6:	2001      	movs	r0, #1
 8003ab8:	f7ff f860 	bl	8002b7c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	791b      	ldrb	r3, [r3, #4]
 8003ace:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003ad4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003ada:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003ae0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003ae8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003aea:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003af2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003af8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	6812      	ldr	r2, [r2, #0]
 8003afe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b02:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003b06:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b14:	2001      	movs	r0, #1
 8003b16:	f7ff f831 	bl	8002b7c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b22:	461a      	mov	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6013      	str	r3, [r2, #0]
}
 8003b28:	bf00      	nop
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	f8de3f23 	.word	0xf8de3f23

08003b34 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b0a6      	sub	sp, #152	; 0x98
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003b42:	2301      	movs	r3, #1
 8003b44:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003b52:	2301      	movs	r3, #1
 8003b54:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003b64:	2300      	movs	r3, #0
 8003b66:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003b70:	2300      	movs	r3, #0
 8003b72:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003b74:	2300      	movs	r3, #0
 8003b76:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003b84:	2300      	movs	r3, #0
 8003b86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003b90:	2300      	movs	r3, #0
 8003b92:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003b96:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003b9a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003b9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ba0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003ba8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003bac:	4619      	mov	r1, r3
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7ff fe86 	bl	80038c0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003be0:	2301      	movs	r3, #1
 8003be2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003be4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003be8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003bea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003bee:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003bf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bf4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003c00:	2300      	movs	r3, #0
 8003c02:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003c04:	f107 0308 	add.w	r3, r7, #8
 8003c08:	4619      	mov	r1, r3
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7ff ff08 	bl	8003a20 <ETH_SetDMAConfig>
}
 8003c10:	bf00      	nop
 8003c12:	3798      	adds	r7, #152	; 0x98
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b087      	sub	sp, #28
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	3305      	adds	r3, #5
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	021b      	lsls	r3, r3, #8
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	3204      	adds	r2, #4
 8003c30:	7812      	ldrb	r2, [r2, #0]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	4b11      	ldr	r3, [pc, #68]	; (8003c80 <ETH_MACAddressConfig+0x68>)
 8003c3a:	4413      	add	r3, r2
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	3303      	adds	r3, #3
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	061a      	lsls	r2, r3, #24
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	3302      	adds	r3, #2
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	041b      	lsls	r3, r3, #16
 8003c52:	431a      	orrs	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	3301      	adds	r3, #1
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	021b      	lsls	r3, r3, #8
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	7812      	ldrb	r2, [r2, #0]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003c66:	68ba      	ldr	r2, [r7, #8]
 8003c68:	4b06      	ldr	r3, [pc, #24]	; (8003c84 <ETH_MACAddressConfig+0x6c>)
 8003c6a:	4413      	add	r3, r2
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	6013      	str	r3, [r2, #0]
}
 8003c72:	bf00      	nop
 8003c74:	371c      	adds	r7, #28
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	40028040 	.word	0x40028040
 8003c84:	40028044 	.word	0x40028044

08003c88 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003c90:	2300      	movs	r3, #0
 8003c92:	60fb      	str	r3, [r7, #12]
 8003c94:	e03e      	b.n	8003d14 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	68d9      	ldr	r1, [r3, #12]
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	440b      	add	r3, r1
 8003ca6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	2200      	movs	r2, #0
 8003cac:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003cc0:	68b9      	ldr	r1, [r7, #8]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	3206      	adds	r2, #6
 8003cc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d80c      	bhi.n	8003cf8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68d9      	ldr	r1, [r3, #12]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	1c5a      	adds	r2, r3, #1
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	4413      	add	r3, r2
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	440b      	add	r3, r1
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	60da      	str	r2, [r3, #12]
 8003cf6:	e004      	b.n	8003d02 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	3301      	adds	r3, #1
 8003d12:	60fb      	str	r3, [r7, #12]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2b03      	cmp	r3, #3
 8003d18:	d9bd      	bls.n	8003c96 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	68da      	ldr	r2, [r3, #12]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d2c:	611a      	str	r2, [r3, #16]
}
 8003d2e:	bf00      	nop
 8003d30:	3714      	adds	r7, #20
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b085      	sub	sp, #20
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003d42:	2300      	movs	r3, #0
 8003d44:	60fb      	str	r3, [r7, #12]
 8003d46:	e046      	b.n	8003dd6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6919      	ldr	r1, [r3, #16]
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	4413      	add	r3, r2
 8003d54:	00db      	lsls	r3, r3, #3
 8003d56:	440b      	add	r3, r1
 8003d58:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	2200      	movs	r2, #0
 8003d64:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	2200      	movs	r2, #0
 8003d76:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003d84:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003d8c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003d9a:	68b9      	ldr	r1, [r7, #8]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	3212      	adds	r2, #18
 8003da2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d80c      	bhi.n	8003dc6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6919      	ldr	r1, [r3, #16]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	1c5a      	adds	r2, r3, #1
 8003db4:	4613      	mov	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	4413      	add	r3, r2
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	440b      	add	r3, r1
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	60da      	str	r2, [r3, #12]
 8003dc4:	e004      	b.n	8003dd0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	60fb      	str	r3, [r7, #12]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2b03      	cmp	r3, #3
 8003dda:	d9b5      	bls.n	8003d48 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	691a      	ldr	r2, [r3, #16]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e06:	60da      	str	r2, [r3, #12]
}
 8003e08:	bf00      	nop
 8003e0a:	3714      	adds	r7, #20
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b089      	sub	sp, #36	; 0x24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e22:	2300      	movs	r3, #0
 8003e24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e26:	2300      	movs	r3, #0
 8003e28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	61fb      	str	r3, [r7, #28]
 8003e2e:	e177      	b.n	8004120 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e30:	2201      	movs	r2, #1
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	fa02 f303 	lsl.w	r3, r2, r3
 8003e38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	4013      	ands	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	f040 8166 	bne.w	800411a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f003 0303 	and.w	r3, r3, #3
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d005      	beq.n	8003e66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d130      	bne.n	8003ec8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	2203      	movs	r2, #3
 8003e72:	fa02 f303 	lsl.w	r3, r2, r3
 8003e76:	43db      	mvns	r3, r3
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	68da      	ldr	r2, [r3, #12]
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	005b      	lsls	r3, r3, #1
 8003e86:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea4:	43db      	mvns	r3, r3
 8003ea6:	69ba      	ldr	r2, [r7, #24]
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	091b      	lsrs	r3, r3, #4
 8003eb2:	f003 0201 	and.w	r2, r3, #1
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f003 0303 	and.w	r3, r3, #3
 8003ed0:	2b03      	cmp	r3, #3
 8003ed2:	d017      	beq.n	8003f04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	2203      	movs	r2, #3
 8003ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee4:	43db      	mvns	r3, r3
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	689a      	ldr	r2, [r3, #8]
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f003 0303 	and.w	r3, r3, #3
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d123      	bne.n	8003f58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	08da      	lsrs	r2, r3, #3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	3208      	adds	r2, #8
 8003f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	f003 0307 	and.w	r3, r3, #7
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	220f      	movs	r2, #15
 8003f28:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2c:	43db      	mvns	r3, r3
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	4013      	ands	r3, r2
 8003f32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	691a      	ldr	r2, [r3, #16]
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	f003 0307 	and.w	r3, r3, #7
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	fa02 f303 	lsl.w	r3, r2, r3
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	08da      	lsrs	r2, r3, #3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	3208      	adds	r2, #8
 8003f52:	69b9      	ldr	r1, [r7, #24]
 8003f54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	2203      	movs	r2, #3
 8003f64:	fa02 f303 	lsl.w	r3, r2, r3
 8003f68:	43db      	mvns	r3, r3
 8003f6a:	69ba      	ldr	r2, [r7, #24]
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f003 0203 	and.w	r2, r3, #3
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	005b      	lsls	r3, r3, #1
 8003f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f000 80c0 	beq.w	800411a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	60fb      	str	r3, [r7, #12]
 8003f9e:	4b66      	ldr	r3, [pc, #408]	; (8004138 <HAL_GPIO_Init+0x324>)
 8003fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa2:	4a65      	ldr	r2, [pc, #404]	; (8004138 <HAL_GPIO_Init+0x324>)
 8003fa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8003faa:	4b63      	ldr	r3, [pc, #396]	; (8004138 <HAL_GPIO_Init+0x324>)
 8003fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fb2:	60fb      	str	r3, [r7, #12]
 8003fb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fb6:	4a61      	ldr	r2, [pc, #388]	; (800413c <HAL_GPIO_Init+0x328>)
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	089b      	lsrs	r3, r3, #2
 8003fbc:	3302      	adds	r3, #2
 8003fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	f003 0303 	and.w	r3, r3, #3
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	220f      	movs	r2, #15
 8003fce:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd2:	43db      	mvns	r3, r3
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a58      	ldr	r2, [pc, #352]	; (8004140 <HAL_GPIO_Init+0x32c>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d037      	beq.n	8004052 <HAL_GPIO_Init+0x23e>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a57      	ldr	r2, [pc, #348]	; (8004144 <HAL_GPIO_Init+0x330>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d031      	beq.n	800404e <HAL_GPIO_Init+0x23a>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a56      	ldr	r2, [pc, #344]	; (8004148 <HAL_GPIO_Init+0x334>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d02b      	beq.n	800404a <HAL_GPIO_Init+0x236>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a55      	ldr	r2, [pc, #340]	; (800414c <HAL_GPIO_Init+0x338>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d025      	beq.n	8004046 <HAL_GPIO_Init+0x232>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a54      	ldr	r2, [pc, #336]	; (8004150 <HAL_GPIO_Init+0x33c>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d01f      	beq.n	8004042 <HAL_GPIO_Init+0x22e>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a53      	ldr	r2, [pc, #332]	; (8004154 <HAL_GPIO_Init+0x340>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d019      	beq.n	800403e <HAL_GPIO_Init+0x22a>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a52      	ldr	r2, [pc, #328]	; (8004158 <HAL_GPIO_Init+0x344>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d013      	beq.n	800403a <HAL_GPIO_Init+0x226>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a51      	ldr	r2, [pc, #324]	; (800415c <HAL_GPIO_Init+0x348>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d00d      	beq.n	8004036 <HAL_GPIO_Init+0x222>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a50      	ldr	r2, [pc, #320]	; (8004160 <HAL_GPIO_Init+0x34c>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d007      	beq.n	8004032 <HAL_GPIO_Init+0x21e>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a4f      	ldr	r2, [pc, #316]	; (8004164 <HAL_GPIO_Init+0x350>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d101      	bne.n	800402e <HAL_GPIO_Init+0x21a>
 800402a:	2309      	movs	r3, #9
 800402c:	e012      	b.n	8004054 <HAL_GPIO_Init+0x240>
 800402e:	230a      	movs	r3, #10
 8004030:	e010      	b.n	8004054 <HAL_GPIO_Init+0x240>
 8004032:	2308      	movs	r3, #8
 8004034:	e00e      	b.n	8004054 <HAL_GPIO_Init+0x240>
 8004036:	2307      	movs	r3, #7
 8004038:	e00c      	b.n	8004054 <HAL_GPIO_Init+0x240>
 800403a:	2306      	movs	r3, #6
 800403c:	e00a      	b.n	8004054 <HAL_GPIO_Init+0x240>
 800403e:	2305      	movs	r3, #5
 8004040:	e008      	b.n	8004054 <HAL_GPIO_Init+0x240>
 8004042:	2304      	movs	r3, #4
 8004044:	e006      	b.n	8004054 <HAL_GPIO_Init+0x240>
 8004046:	2303      	movs	r3, #3
 8004048:	e004      	b.n	8004054 <HAL_GPIO_Init+0x240>
 800404a:	2302      	movs	r3, #2
 800404c:	e002      	b.n	8004054 <HAL_GPIO_Init+0x240>
 800404e:	2301      	movs	r3, #1
 8004050:	e000      	b.n	8004054 <HAL_GPIO_Init+0x240>
 8004052:	2300      	movs	r3, #0
 8004054:	69fa      	ldr	r2, [r7, #28]
 8004056:	f002 0203 	and.w	r2, r2, #3
 800405a:	0092      	lsls	r2, r2, #2
 800405c:	4093      	lsls	r3, r2
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	4313      	orrs	r3, r2
 8004062:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004064:	4935      	ldr	r1, [pc, #212]	; (800413c <HAL_GPIO_Init+0x328>)
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	089b      	lsrs	r3, r3, #2
 800406a:	3302      	adds	r3, #2
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004072:	4b3d      	ldr	r3, [pc, #244]	; (8004168 <HAL_GPIO_Init+0x354>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	43db      	mvns	r3, r3
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	4013      	ands	r3, r2
 8004080:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800408e:	69ba      	ldr	r2, [r7, #24]
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	4313      	orrs	r3, r2
 8004094:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004096:	4a34      	ldr	r2, [pc, #208]	; (8004168 <HAL_GPIO_Init+0x354>)
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800409c:	4b32      	ldr	r3, [pc, #200]	; (8004168 <HAL_GPIO_Init+0x354>)
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	43db      	mvns	r3, r3
 80040a6:	69ba      	ldr	r2, [r7, #24]
 80040a8:	4013      	ands	r3, r2
 80040aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d003      	beq.n	80040c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	4313      	orrs	r3, r2
 80040be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040c0:	4a29      	ldr	r2, [pc, #164]	; (8004168 <HAL_GPIO_Init+0x354>)
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80040c6:	4b28      	ldr	r3, [pc, #160]	; (8004168 <HAL_GPIO_Init+0x354>)
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	43db      	mvns	r3, r3
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	4013      	ands	r3, r2
 80040d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d003      	beq.n	80040ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80040e2:	69ba      	ldr	r2, [r7, #24]
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040ea:	4a1f      	ldr	r2, [pc, #124]	; (8004168 <HAL_GPIO_Init+0x354>)
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040f0:	4b1d      	ldr	r3, [pc, #116]	; (8004168 <HAL_GPIO_Init+0x354>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	43db      	mvns	r3, r3
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	4013      	ands	r3, r2
 80040fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d003      	beq.n	8004114 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	4313      	orrs	r3, r2
 8004112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004114:	4a14      	ldr	r2, [pc, #80]	; (8004168 <HAL_GPIO_Init+0x354>)
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	3301      	adds	r3, #1
 800411e:	61fb      	str	r3, [r7, #28]
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	2b0f      	cmp	r3, #15
 8004124:	f67f ae84 	bls.w	8003e30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004128:	bf00      	nop
 800412a:	bf00      	nop
 800412c:	3724      	adds	r7, #36	; 0x24
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	40023800 	.word	0x40023800
 800413c:	40013800 	.word	0x40013800
 8004140:	40020000 	.word	0x40020000
 8004144:	40020400 	.word	0x40020400
 8004148:	40020800 	.word	0x40020800
 800414c:	40020c00 	.word	0x40020c00
 8004150:	40021000 	.word	0x40021000
 8004154:	40021400 	.word	0x40021400
 8004158:	40021800 	.word	0x40021800
 800415c:	40021c00 	.word	0x40021c00
 8004160:	40022000 	.word	0x40022000
 8004164:	40022400 	.word	0x40022400
 8004168:	40013c00 	.word	0x40013c00

0800416c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	460b      	mov	r3, r1
 8004176:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	691a      	ldr	r2, [r3, #16]
 800417c:	887b      	ldrh	r3, [r7, #2]
 800417e:	4013      	ands	r3, r2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d002      	beq.n	800418a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004184:	2301      	movs	r3, #1
 8004186:	73fb      	strb	r3, [r7, #15]
 8004188:	e001      	b.n	800418e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800418a:	2300      	movs	r3, #0
 800418c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800418e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004190:	4618      	mov	r0, r3
 8004192:	3714      	adds	r7, #20
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	460b      	mov	r3, r1
 80041a6:	807b      	strh	r3, [r7, #2]
 80041a8:	4613      	mov	r3, r2
 80041aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041ac:	787b      	ldrb	r3, [r7, #1]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d003      	beq.n	80041ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041b2:	887a      	ldrh	r2, [r7, #2]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80041b8:	e003      	b.n	80041c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80041ba:	887b      	ldrh	r3, [r7, #2]
 80041bc:	041a      	lsls	r2, r3, #16
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	619a      	str	r2, [r3, #24]
}
 80041c2:	bf00      	nop
 80041c4:	370c      	adds	r7, #12
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr

080041ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041ce:	b480      	push	{r7}
 80041d0:	b085      	sub	sp, #20
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
 80041d6:	460b      	mov	r3, r1
 80041d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80041e0:	887a      	ldrh	r2, [r7, #2]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	4013      	ands	r3, r2
 80041e6:	041a      	lsls	r2, r3, #16
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	43d9      	mvns	r1, r3
 80041ec:	887b      	ldrh	r3, [r7, #2]
 80041ee:	400b      	ands	r3, r1
 80041f0:	431a      	orrs	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	619a      	str	r2, [r3, #24]
}
 80041f6:	bf00      	nop
 80041f8:	3714      	adds	r7, #20
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
	...

08004204 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	4603      	mov	r3, r0
 800420c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800420e:	4b08      	ldr	r3, [pc, #32]	; (8004230 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004210:	695a      	ldr	r2, [r3, #20]
 8004212:	88fb      	ldrh	r3, [r7, #6]
 8004214:	4013      	ands	r3, r2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d006      	beq.n	8004228 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800421a:	4a05      	ldr	r2, [pc, #20]	; (8004230 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800421c:	88fb      	ldrh	r3, [r7, #6]
 800421e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004220:	88fb      	ldrh	r3, [r7, #6]
 8004222:	4618      	mov	r0, r3
 8004224:	f7fc fef8 	bl	8001018 <HAL_GPIO_EXTI_Callback>
  }
}
 8004228:	bf00      	nop
 800422a:	3708      	adds	r7, #8
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	40013c00 	.word	0x40013c00

08004234 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e12b      	b.n	800449e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d106      	bne.n	8004260 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f7fd fef2 	bl	8002044 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2224      	movs	r2, #36	; 0x24
 8004264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f022 0201 	bic.w	r2, r2, #1
 8004276:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004286:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004296:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004298:	f001 fa20 	bl	80056dc <HAL_RCC_GetPCLK1Freq>
 800429c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	4a81      	ldr	r2, [pc, #516]	; (80044a8 <HAL_I2C_Init+0x274>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d807      	bhi.n	80042b8 <HAL_I2C_Init+0x84>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	4a80      	ldr	r2, [pc, #512]	; (80044ac <HAL_I2C_Init+0x278>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	bf94      	ite	ls
 80042b0:	2301      	movls	r3, #1
 80042b2:	2300      	movhi	r3, #0
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	e006      	b.n	80042c6 <HAL_I2C_Init+0x92>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	4a7d      	ldr	r2, [pc, #500]	; (80044b0 <HAL_I2C_Init+0x27c>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	bf94      	ite	ls
 80042c0:	2301      	movls	r3, #1
 80042c2:	2300      	movhi	r3, #0
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e0e7      	b.n	800449e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	4a78      	ldr	r2, [pc, #480]	; (80044b4 <HAL_I2C_Init+0x280>)
 80042d2:	fba2 2303 	umull	r2, r3, r2, r3
 80042d6:	0c9b      	lsrs	r3, r3, #18
 80042d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	6a1b      	ldr	r3, [r3, #32]
 80042f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	4a6a      	ldr	r2, [pc, #424]	; (80044a8 <HAL_I2C_Init+0x274>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d802      	bhi.n	8004308 <HAL_I2C_Init+0xd4>
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	3301      	adds	r3, #1
 8004306:	e009      	b.n	800431c <HAL_I2C_Init+0xe8>
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800430e:	fb02 f303 	mul.w	r3, r2, r3
 8004312:	4a69      	ldr	r2, [pc, #420]	; (80044b8 <HAL_I2C_Init+0x284>)
 8004314:	fba2 2303 	umull	r2, r3, r2, r3
 8004318:	099b      	lsrs	r3, r3, #6
 800431a:	3301      	adds	r3, #1
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	6812      	ldr	r2, [r2, #0]
 8004320:	430b      	orrs	r3, r1
 8004322:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	69db      	ldr	r3, [r3, #28]
 800432a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800432e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	495c      	ldr	r1, [pc, #368]	; (80044a8 <HAL_I2C_Init+0x274>)
 8004338:	428b      	cmp	r3, r1
 800433a:	d819      	bhi.n	8004370 <HAL_I2C_Init+0x13c>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	1e59      	subs	r1, r3, #1
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	fbb1 f3f3 	udiv	r3, r1, r3
 800434a:	1c59      	adds	r1, r3, #1
 800434c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004350:	400b      	ands	r3, r1
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00a      	beq.n	800436c <HAL_I2C_Init+0x138>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	1e59      	subs	r1, r3, #1
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	005b      	lsls	r3, r3, #1
 8004360:	fbb1 f3f3 	udiv	r3, r1, r3
 8004364:	3301      	adds	r3, #1
 8004366:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800436a:	e051      	b.n	8004410 <HAL_I2C_Init+0x1dc>
 800436c:	2304      	movs	r3, #4
 800436e:	e04f      	b.n	8004410 <HAL_I2C_Init+0x1dc>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d111      	bne.n	800439c <HAL_I2C_Init+0x168>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	1e58      	subs	r0, r3, #1
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6859      	ldr	r1, [r3, #4]
 8004380:	460b      	mov	r3, r1
 8004382:	005b      	lsls	r3, r3, #1
 8004384:	440b      	add	r3, r1
 8004386:	fbb0 f3f3 	udiv	r3, r0, r3
 800438a:	3301      	adds	r3, #1
 800438c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004390:	2b00      	cmp	r3, #0
 8004392:	bf0c      	ite	eq
 8004394:	2301      	moveq	r3, #1
 8004396:	2300      	movne	r3, #0
 8004398:	b2db      	uxtb	r3, r3
 800439a:	e012      	b.n	80043c2 <HAL_I2C_Init+0x18e>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	1e58      	subs	r0, r3, #1
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6859      	ldr	r1, [r3, #4]
 80043a4:	460b      	mov	r3, r1
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	440b      	add	r3, r1
 80043aa:	0099      	lsls	r1, r3, #2
 80043ac:	440b      	add	r3, r1
 80043ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80043b2:	3301      	adds	r3, #1
 80043b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	bf0c      	ite	eq
 80043bc:	2301      	moveq	r3, #1
 80043be:	2300      	movne	r3, #0
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <HAL_I2C_Init+0x196>
 80043c6:	2301      	movs	r3, #1
 80043c8:	e022      	b.n	8004410 <HAL_I2C_Init+0x1dc>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10e      	bne.n	80043f0 <HAL_I2C_Init+0x1bc>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	1e58      	subs	r0, r3, #1
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6859      	ldr	r1, [r3, #4]
 80043da:	460b      	mov	r3, r1
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	440b      	add	r3, r1
 80043e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80043e4:	3301      	adds	r3, #1
 80043e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043ee:	e00f      	b.n	8004410 <HAL_I2C_Init+0x1dc>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	1e58      	subs	r0, r3, #1
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6859      	ldr	r1, [r3, #4]
 80043f8:	460b      	mov	r3, r1
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	440b      	add	r3, r1
 80043fe:	0099      	lsls	r1, r3, #2
 8004400:	440b      	add	r3, r1
 8004402:	fbb0 f3f3 	udiv	r3, r0, r3
 8004406:	3301      	adds	r3, #1
 8004408:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800440c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004410:	6879      	ldr	r1, [r7, #4]
 8004412:	6809      	ldr	r1, [r1, #0]
 8004414:	4313      	orrs	r3, r2
 8004416:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	69da      	ldr	r2, [r3, #28]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	431a      	orrs	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	430a      	orrs	r2, r1
 8004432:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800443e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	6911      	ldr	r1, [r2, #16]
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	68d2      	ldr	r2, [r2, #12]
 800444a:	4311      	orrs	r1, r2
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	6812      	ldr	r2, [r2, #0]
 8004450:	430b      	orrs	r3, r1
 8004452:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	695a      	ldr	r2, [r3, #20]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	431a      	orrs	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	430a      	orrs	r2, r1
 800446e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f042 0201 	orr.w	r2, r2, #1
 800447e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2220      	movs	r2, #32
 800448a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	000186a0 	.word	0x000186a0
 80044ac:	001e847f 	.word	0x001e847f
 80044b0:	003d08ff 	.word	0x003d08ff
 80044b4:	431bde83 	.word	0x431bde83
 80044b8:	10624dd3 	.word	0x10624dd3

080044bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b088      	sub	sp, #32
 80044c0:	af02      	add	r7, sp, #8
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	607a      	str	r2, [r7, #4]
 80044c6:	461a      	mov	r2, r3
 80044c8:	460b      	mov	r3, r1
 80044ca:	817b      	strh	r3, [r7, #10]
 80044cc:	4613      	mov	r3, r2
 80044ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80044d0:	f7fe fb48 	bl	8002b64 <HAL_GetTick>
 80044d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b20      	cmp	r3, #32
 80044e0:	f040 80e0 	bne.w	80046a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	9300      	str	r3, [sp, #0]
 80044e8:	2319      	movs	r3, #25
 80044ea:	2201      	movs	r2, #1
 80044ec:	4970      	ldr	r1, [pc, #448]	; (80046b0 <HAL_I2C_Master_Transmit+0x1f4>)
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f000 f964 	bl	80047bc <I2C_WaitOnFlagUntilTimeout>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d001      	beq.n	80044fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80044fa:	2302      	movs	r3, #2
 80044fc:	e0d3      	b.n	80046a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004504:	2b01      	cmp	r3, #1
 8004506:	d101      	bne.n	800450c <HAL_I2C_Master_Transmit+0x50>
 8004508:	2302      	movs	r3, #2
 800450a:	e0cc      	b.n	80046a6 <HAL_I2C_Master_Transmit+0x1ea>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b01      	cmp	r3, #1
 8004520:	d007      	beq.n	8004532 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f042 0201 	orr.w	r2, r2, #1
 8004530:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004540:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2221      	movs	r2, #33	; 0x21
 8004546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2210      	movs	r2, #16
 800454e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	893a      	ldrh	r2, [r7, #8]
 8004562:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004568:	b29a      	uxth	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	4a50      	ldr	r2, [pc, #320]	; (80046b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8004572:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004574:	8979      	ldrh	r1, [r7, #10]
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	6a3a      	ldr	r2, [r7, #32]
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f000 f89c 	bl	80046b8 <I2C_MasterRequestWrite>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d001      	beq.n	800458a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e08d      	b.n	80046a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800458a:	2300      	movs	r3, #0
 800458c:	613b      	str	r3, [r7, #16]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	695b      	ldr	r3, [r3, #20]
 8004594:	613b      	str	r3, [r7, #16]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	613b      	str	r3, [r7, #16]
 800459e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80045a0:	e066      	b.n	8004670 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	6a39      	ldr	r1, [r7, #32]
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f000 f9de 	bl	8004968 <I2C_WaitOnTXEFlagUntilTimeout>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00d      	beq.n	80045ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b6:	2b04      	cmp	r3, #4
 80045b8:	d107      	bne.n	80045ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e06b      	b.n	80046a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d2:	781a      	ldrb	r2, [r3, #0]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045de:	1c5a      	adds	r2, r3, #1
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	3b01      	subs	r3, #1
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f6:	3b01      	subs	r3, #1
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	f003 0304 	and.w	r3, r3, #4
 8004608:	2b04      	cmp	r3, #4
 800460a:	d11b      	bne.n	8004644 <HAL_I2C_Master_Transmit+0x188>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004610:	2b00      	cmp	r3, #0
 8004612:	d017      	beq.n	8004644 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004618:	781a      	ldrb	r2, [r3, #0]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004624:	1c5a      	adds	r2, r3, #1
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800462e:	b29b      	uxth	r3, r3
 8004630:	3b01      	subs	r3, #1
 8004632:	b29a      	uxth	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800463c:	3b01      	subs	r3, #1
 800463e:	b29a      	uxth	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	6a39      	ldr	r1, [r7, #32]
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f000 f9ce 	bl	80049ea <I2C_WaitOnBTFFlagUntilTimeout>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00d      	beq.n	8004670 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004658:	2b04      	cmp	r3, #4
 800465a:	d107      	bne.n	800466c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800466a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e01a      	b.n	80046a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004674:	2b00      	cmp	r3, #0
 8004676:	d194      	bne.n	80045a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004686:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2220      	movs	r2, #32
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80046a0:	2300      	movs	r3, #0
 80046a2:	e000      	b.n	80046a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80046a4:	2302      	movs	r3, #2
  }
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3718      	adds	r7, #24
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	00100002 	.word	0x00100002
 80046b4:	ffff0000 	.word	0xffff0000

080046b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b088      	sub	sp, #32
 80046bc:	af02      	add	r7, sp, #8
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	607a      	str	r2, [r7, #4]
 80046c2:	603b      	str	r3, [r7, #0]
 80046c4:	460b      	mov	r3, r1
 80046c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	2b08      	cmp	r3, #8
 80046d2:	d006      	beq.n	80046e2 <I2C_MasterRequestWrite+0x2a>
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d003      	beq.n	80046e2 <I2C_MasterRequestWrite+0x2a>
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046e0:	d108      	bne.n	80046f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046f0:	601a      	str	r2, [r3, #0]
 80046f2:	e00b      	b.n	800470c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f8:	2b12      	cmp	r3, #18
 80046fa:	d107      	bne.n	800470c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800470a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	9300      	str	r3, [sp, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	f000 f84f 	bl	80047bc <I2C_WaitOnFlagUntilTimeout>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d00d      	beq.n	8004740 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800472e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004732:	d103      	bne.n	800473c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f44f 7200 	mov.w	r2, #512	; 0x200
 800473a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e035      	b.n	80047ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004748:	d108      	bne.n	800475c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800474a:	897b      	ldrh	r3, [r7, #10]
 800474c:	b2db      	uxtb	r3, r3
 800474e:	461a      	mov	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004758:	611a      	str	r2, [r3, #16]
 800475a:	e01b      	b.n	8004794 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800475c:	897b      	ldrh	r3, [r7, #10]
 800475e:	11db      	asrs	r3, r3, #7
 8004760:	b2db      	uxtb	r3, r3
 8004762:	f003 0306 	and.w	r3, r3, #6
 8004766:	b2db      	uxtb	r3, r3
 8004768:	f063 030f 	orn	r3, r3, #15
 800476c:	b2da      	uxtb	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	490e      	ldr	r1, [pc, #56]	; (80047b4 <I2C_MasterRequestWrite+0xfc>)
 800477a:	68f8      	ldr	r0, [r7, #12]
 800477c:	f000 f875 	bl	800486a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e010      	b.n	80047ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800478a:	897b      	ldrh	r3, [r7, #10]
 800478c:	b2da      	uxtb	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	4907      	ldr	r1, [pc, #28]	; (80047b8 <I2C_MasterRequestWrite+0x100>)
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	f000 f865 	bl	800486a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d001      	beq.n	80047aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e000      	b.n	80047ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3718      	adds	r7, #24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	00010008 	.word	0x00010008
 80047b8:	00010002 	.word	0x00010002

080047bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	603b      	str	r3, [r7, #0]
 80047c8:	4613      	mov	r3, r2
 80047ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047cc:	e025      	b.n	800481a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d4:	d021      	beq.n	800481a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047d6:	f7fe f9c5 	bl	8002b64 <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d302      	bcc.n	80047ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d116      	bne.n	800481a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2220      	movs	r2, #32
 80047f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004806:	f043 0220 	orr.w	r2, r3, #32
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e023      	b.n	8004862 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	0c1b      	lsrs	r3, r3, #16
 800481e:	b2db      	uxtb	r3, r3
 8004820:	2b01      	cmp	r3, #1
 8004822:	d10d      	bne.n	8004840 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	43da      	mvns	r2, r3
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	4013      	ands	r3, r2
 8004830:	b29b      	uxth	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	bf0c      	ite	eq
 8004836:	2301      	moveq	r3, #1
 8004838:	2300      	movne	r3, #0
 800483a:	b2db      	uxtb	r3, r3
 800483c:	461a      	mov	r2, r3
 800483e:	e00c      	b.n	800485a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	43da      	mvns	r2, r3
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	4013      	ands	r3, r2
 800484c:	b29b      	uxth	r3, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	bf0c      	ite	eq
 8004852:	2301      	moveq	r3, #1
 8004854:	2300      	movne	r3, #0
 8004856:	b2db      	uxtb	r3, r3
 8004858:	461a      	mov	r2, r3
 800485a:	79fb      	ldrb	r3, [r7, #7]
 800485c:	429a      	cmp	r2, r3
 800485e:	d0b6      	beq.n	80047ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800486a:	b580      	push	{r7, lr}
 800486c:	b084      	sub	sp, #16
 800486e:	af00      	add	r7, sp, #0
 8004870:	60f8      	str	r0, [r7, #12]
 8004872:	60b9      	str	r1, [r7, #8]
 8004874:	607a      	str	r2, [r7, #4]
 8004876:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004878:	e051      	b.n	800491e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	695b      	ldr	r3, [r3, #20]
 8004880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004884:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004888:	d123      	bne.n	80048d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004898:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048a2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2220      	movs	r2, #32
 80048ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048be:	f043 0204 	orr.w	r2, r3, #4
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e046      	b.n	8004960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d8:	d021      	beq.n	800491e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048da:	f7fe f943 	bl	8002b64 <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d302      	bcc.n	80048f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d116      	bne.n	800491e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2220      	movs	r2, #32
 80048fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490a:	f043 0220 	orr.w	r2, r3, #32
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e020      	b.n	8004960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	0c1b      	lsrs	r3, r3, #16
 8004922:	b2db      	uxtb	r3, r3
 8004924:	2b01      	cmp	r3, #1
 8004926:	d10c      	bne.n	8004942 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	43da      	mvns	r2, r3
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	4013      	ands	r3, r2
 8004934:	b29b      	uxth	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	bf14      	ite	ne
 800493a:	2301      	movne	r3, #1
 800493c:	2300      	moveq	r3, #0
 800493e:	b2db      	uxtb	r3, r3
 8004940:	e00b      	b.n	800495a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	43da      	mvns	r2, r3
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	4013      	ands	r3, r2
 800494e:	b29b      	uxth	r3, r3
 8004950:	2b00      	cmp	r3, #0
 8004952:	bf14      	ite	ne
 8004954:	2301      	movne	r3, #1
 8004956:	2300      	moveq	r3, #0
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d18d      	bne.n	800487a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3710      	adds	r7, #16
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004974:	e02d      	b.n	80049d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f000 f878 	bl	8004a6c <I2C_IsAcknowledgeFailed>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e02d      	b.n	80049e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498c:	d021      	beq.n	80049d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800498e:	f7fe f8e9 	bl	8002b64 <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	68ba      	ldr	r2, [r7, #8]
 800499a:	429a      	cmp	r2, r3
 800499c:	d302      	bcc.n	80049a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d116      	bne.n	80049d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2220      	movs	r2, #32
 80049ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	f043 0220 	orr.w	r2, r3, #32
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e007      	b.n	80049e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049dc:	2b80      	cmp	r3, #128	; 0x80
 80049de:	d1ca      	bne.n	8004976 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3710      	adds	r7, #16
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}

080049ea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b084      	sub	sp, #16
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	60f8      	str	r0, [r7, #12]
 80049f2:	60b9      	str	r1, [r7, #8]
 80049f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049f6:	e02d      	b.n	8004a54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f000 f837 	bl	8004a6c <I2C_IsAcknowledgeFailed>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d001      	beq.n	8004a08 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e02d      	b.n	8004a64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a0e:	d021      	beq.n	8004a54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a10:	f7fe f8a8 	bl	8002b64 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d302      	bcc.n	8004a26 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d116      	bne.n	8004a54 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2220      	movs	r2, #32
 8004a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a40:	f043 0220 	orr.w	r2, r3, #32
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e007      	b.n	8004a64 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	f003 0304 	and.w	r3, r3, #4
 8004a5e:	2b04      	cmp	r3, #4
 8004a60:	d1ca      	bne.n	80049f8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3710      	adds	r7, #16
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a82:	d11b      	bne.n	8004abc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a8c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2220      	movs	r2, #32
 8004a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa8:	f043 0204 	orr.w	r2, r3, #4
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e000      	b.n	8004abe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b083      	sub	sp, #12
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
 8004ad2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	2b20      	cmp	r3, #32
 8004ade:	d129      	bne.n	8004b34 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2224      	movs	r2, #36	; 0x24
 8004ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f022 0201 	bic.w	r2, r2, #1
 8004af6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f022 0210 	bic.w	r2, r2, #16
 8004b06:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	683a      	ldr	r2, [r7, #0]
 8004b14:	430a      	orrs	r2, r1
 8004b16:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f042 0201 	orr.w	r2, r2, #1
 8004b26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2220      	movs	r2, #32
 8004b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004b30:	2300      	movs	r3, #0
 8004b32:	e000      	b.n	8004b36 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004b34:	2302      	movs	r3, #2
  }
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	370c      	adds	r7, #12
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr

08004b42 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b42:	b480      	push	{r7}
 8004b44:	b085      	sub	sp, #20
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
 8004b4a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b20      	cmp	r3, #32
 8004b5a:	d12a      	bne.n	8004bb2 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2224      	movs	r2, #36	; 0x24
 8004b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f022 0201 	bic.w	r2, r2, #1
 8004b72:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004b7c:	89fb      	ldrh	r3, [r7, #14]
 8004b7e:	f023 030f 	bic.w	r3, r3, #15
 8004b82:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	89fb      	ldrh	r3, [r7, #14]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	89fa      	ldrh	r2, [r7, #14]
 8004b94:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f042 0201 	orr.w	r2, r2, #1
 8004ba4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2220      	movs	r2, #32
 8004baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	e000      	b.n	8004bb4 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004bb2:	2302      	movs	r3, #2
  }
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3714      	adds	r7, #20
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bc2:	b08f      	sub	sp, #60	; 0x3c
 8004bc4:	af0a      	add	r7, sp, #40	; 0x28
 8004bc6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d101      	bne.n	8004bd2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e10f      	b.n	8004df2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d106      	bne.n	8004bf2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f7fd fc7f 	bl	80024f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2203      	movs	r2, #3
 8004bf6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d102      	bne.n	8004c0c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4618      	mov	r0, r3
 8004c12:	f003 ff4a 	bl	8008aaa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	603b      	str	r3, [r7, #0]
 8004c1c:	687e      	ldr	r6, [r7, #4]
 8004c1e:	466d      	mov	r5, sp
 8004c20:	f106 0410 	add.w	r4, r6, #16
 8004c24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c2c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004c30:	e885 0003 	stmia.w	r5, {r0, r1}
 8004c34:	1d33      	adds	r3, r6, #4
 8004c36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c38:	6838      	ldr	r0, [r7, #0]
 8004c3a:	f003 fed5 	bl	80089e8 <USB_CoreInit>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d005      	beq.n	8004c50 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2202      	movs	r2, #2
 8004c48:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e0d0      	b.n	8004df2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2100      	movs	r1, #0
 8004c56:	4618      	mov	r0, r3
 8004c58:	f003 ff38 	bl	8008acc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	73fb      	strb	r3, [r7, #15]
 8004c60:	e04a      	b.n	8004cf8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004c62:	7bfa      	ldrb	r2, [r7, #15]
 8004c64:	6879      	ldr	r1, [r7, #4]
 8004c66:	4613      	mov	r3, r2
 8004c68:	00db      	lsls	r3, r3, #3
 8004c6a:	4413      	add	r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	440b      	add	r3, r1
 8004c70:	333d      	adds	r3, #61	; 0x3d
 8004c72:	2201      	movs	r2, #1
 8004c74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004c76:	7bfa      	ldrb	r2, [r7, #15]
 8004c78:	6879      	ldr	r1, [r7, #4]
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	00db      	lsls	r3, r3, #3
 8004c7e:	4413      	add	r3, r2
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	440b      	add	r3, r1
 8004c84:	333c      	adds	r3, #60	; 0x3c
 8004c86:	7bfa      	ldrb	r2, [r7, #15]
 8004c88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004c8a:	7bfa      	ldrb	r2, [r7, #15]
 8004c8c:	7bfb      	ldrb	r3, [r7, #15]
 8004c8e:	b298      	uxth	r0, r3
 8004c90:	6879      	ldr	r1, [r7, #4]
 8004c92:	4613      	mov	r3, r2
 8004c94:	00db      	lsls	r3, r3, #3
 8004c96:	4413      	add	r3, r2
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	440b      	add	r3, r1
 8004c9c:	3344      	adds	r3, #68	; 0x44
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004ca2:	7bfa      	ldrb	r2, [r7, #15]
 8004ca4:	6879      	ldr	r1, [r7, #4]
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	00db      	lsls	r3, r3, #3
 8004caa:	4413      	add	r3, r2
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	440b      	add	r3, r1
 8004cb0:	3340      	adds	r3, #64	; 0x40
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004cb6:	7bfa      	ldrb	r2, [r7, #15]
 8004cb8:	6879      	ldr	r1, [r7, #4]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	00db      	lsls	r3, r3, #3
 8004cbe:	4413      	add	r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	440b      	add	r3, r1
 8004cc4:	3348      	adds	r3, #72	; 0x48
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004cca:	7bfa      	ldrb	r2, [r7, #15]
 8004ccc:	6879      	ldr	r1, [r7, #4]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	00db      	lsls	r3, r3, #3
 8004cd2:	4413      	add	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	440b      	add	r3, r1
 8004cd8:	334c      	adds	r3, #76	; 0x4c
 8004cda:	2200      	movs	r2, #0
 8004cdc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004cde:	7bfa      	ldrb	r2, [r7, #15]
 8004ce0:	6879      	ldr	r1, [r7, #4]
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	00db      	lsls	r3, r3, #3
 8004ce6:	4413      	add	r3, r2
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	440b      	add	r3, r1
 8004cec:	3354      	adds	r3, #84	; 0x54
 8004cee:	2200      	movs	r2, #0
 8004cf0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cf2:	7bfb      	ldrb	r3, [r7, #15]
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	73fb      	strb	r3, [r7, #15]
 8004cf8:	7bfa      	ldrb	r2, [r7, #15]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d3af      	bcc.n	8004c62 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d02:	2300      	movs	r3, #0
 8004d04:	73fb      	strb	r3, [r7, #15]
 8004d06:	e044      	b.n	8004d92 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004d08:	7bfa      	ldrb	r2, [r7, #15]
 8004d0a:	6879      	ldr	r1, [r7, #4]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	00db      	lsls	r3, r3, #3
 8004d10:	4413      	add	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	440b      	add	r3, r1
 8004d16:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004d1e:	7bfa      	ldrb	r2, [r7, #15]
 8004d20:	6879      	ldr	r1, [r7, #4]
 8004d22:	4613      	mov	r3, r2
 8004d24:	00db      	lsls	r3, r3, #3
 8004d26:	4413      	add	r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	440b      	add	r3, r1
 8004d2c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004d30:	7bfa      	ldrb	r2, [r7, #15]
 8004d32:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004d34:	7bfa      	ldrb	r2, [r7, #15]
 8004d36:	6879      	ldr	r1, [r7, #4]
 8004d38:	4613      	mov	r3, r2
 8004d3a:	00db      	lsls	r3, r3, #3
 8004d3c:	4413      	add	r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	440b      	add	r3, r1
 8004d42:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004d46:	2200      	movs	r2, #0
 8004d48:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004d4a:	7bfa      	ldrb	r2, [r7, #15]
 8004d4c:	6879      	ldr	r1, [r7, #4]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	00db      	lsls	r3, r3, #3
 8004d52:	4413      	add	r3, r2
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	440b      	add	r3, r1
 8004d58:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004d60:	7bfa      	ldrb	r2, [r7, #15]
 8004d62:	6879      	ldr	r1, [r7, #4]
 8004d64:	4613      	mov	r3, r2
 8004d66:	00db      	lsls	r3, r3, #3
 8004d68:	4413      	add	r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	440b      	add	r3, r1
 8004d6e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004d72:	2200      	movs	r2, #0
 8004d74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004d76:	7bfa      	ldrb	r2, [r7, #15]
 8004d78:	6879      	ldr	r1, [r7, #4]
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	00db      	lsls	r3, r3, #3
 8004d7e:	4413      	add	r3, r2
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	440b      	add	r3, r1
 8004d84:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004d88:	2200      	movs	r2, #0
 8004d8a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d8c:	7bfb      	ldrb	r3, [r7, #15]
 8004d8e:	3301      	adds	r3, #1
 8004d90:	73fb      	strb	r3, [r7, #15]
 8004d92:	7bfa      	ldrb	r2, [r7, #15]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d3b5      	bcc.n	8004d08 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	603b      	str	r3, [r7, #0]
 8004da2:	687e      	ldr	r6, [r7, #4]
 8004da4:	466d      	mov	r5, sp
 8004da6:	f106 0410 	add.w	r4, r6, #16
 8004daa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004dac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004dae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004db0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004db2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004db6:	e885 0003 	stmia.w	r5, {r0, r1}
 8004dba:	1d33      	adds	r3, r6, #4
 8004dbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004dbe:	6838      	ldr	r0, [r7, #0]
 8004dc0:	f003 fed0 	bl	8008b64 <USB_DevInit>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d005      	beq.n	8004dd6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2202      	movs	r2, #2
 8004dce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e00d      	b.n	8004df2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2201      	movs	r2, #1
 8004de2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4618      	mov	r0, r3
 8004dec:	f004 f89b 	bl	8008f26 <USB_DevDisconnect>

  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004dfc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b086      	sub	sp, #24
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d101      	bne.n	8004e0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e267      	b.n	80052de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0301 	and.w	r3, r3, #1
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d075      	beq.n	8004f06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e1a:	4b88      	ldr	r3, [pc, #544]	; (800503c <HAL_RCC_OscConfig+0x240>)
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f003 030c 	and.w	r3, r3, #12
 8004e22:	2b04      	cmp	r3, #4
 8004e24:	d00c      	beq.n	8004e40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e26:	4b85      	ldr	r3, [pc, #532]	; (800503c <HAL_RCC_OscConfig+0x240>)
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e2e:	2b08      	cmp	r3, #8
 8004e30:	d112      	bne.n	8004e58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e32:	4b82      	ldr	r3, [pc, #520]	; (800503c <HAL_RCC_OscConfig+0x240>)
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e3e:	d10b      	bne.n	8004e58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e40:	4b7e      	ldr	r3, [pc, #504]	; (800503c <HAL_RCC_OscConfig+0x240>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d05b      	beq.n	8004f04 <HAL_RCC_OscConfig+0x108>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d157      	bne.n	8004f04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e242      	b.n	80052de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e60:	d106      	bne.n	8004e70 <HAL_RCC_OscConfig+0x74>
 8004e62:	4b76      	ldr	r3, [pc, #472]	; (800503c <HAL_RCC_OscConfig+0x240>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a75      	ldr	r2, [pc, #468]	; (800503c <HAL_RCC_OscConfig+0x240>)
 8004e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e6c:	6013      	str	r3, [r2, #0]
 8004e6e:	e01d      	b.n	8004eac <HAL_RCC_OscConfig+0xb0>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e78:	d10c      	bne.n	8004e94 <HAL_RCC_OscConfig+0x98>
 8004e7a:	4b70      	ldr	r3, [pc, #448]	; (800503c <HAL_RCC_OscConfig+0x240>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a6f      	ldr	r2, [pc, #444]	; (800503c <HAL_RCC_OscConfig+0x240>)
 8004e80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e84:	6013      	str	r3, [r2, #0]
 8004e86:	4b6d      	ldr	r3, [pc, #436]	; (800503c <HAL_RCC_OscConfig+0x240>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a6c      	ldr	r2, [pc, #432]	; (800503c <HAL_RCC_OscConfig+0x240>)
 8004e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e90:	6013      	str	r3, [r2, #0]
 8004e92:	e00b      	b.n	8004eac <HAL_RCC_OscConfig+0xb0>
 8004e94:	4b69      	ldr	r3, [pc, #420]	; (800503c <HAL_RCC_OscConfig+0x240>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a68      	ldr	r2, [pc, #416]	; (800503c <HAL_RCC_OscConfig+0x240>)
 8004e9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e9e:	6013      	str	r3, [r2, #0]
 8004ea0:	4b66      	ldr	r3, [pc, #408]	; (800503c <HAL_RCC_OscConfig+0x240>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a65      	ldr	r2, [pc, #404]	; (800503c <HAL_RCC_OscConfig+0x240>)
 8004ea6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004eaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d013      	beq.n	8004edc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eb4:	f7fd fe56 	bl	8002b64 <HAL_GetTick>
 8004eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eba:	e008      	b.n	8004ece <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ebc:	f7fd fe52 	bl	8002b64 <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	2b64      	cmp	r3, #100	; 0x64
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e207      	b.n	80052de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ece:	4b5b      	ldr	r3, [pc, #364]	; (800503c <HAL_RCC_OscConfig+0x240>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d0f0      	beq.n	8004ebc <HAL_RCC_OscConfig+0xc0>
 8004eda:	e014      	b.n	8004f06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004edc:	f7fd fe42 	bl	8002b64 <HAL_GetTick>
 8004ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ee2:	e008      	b.n	8004ef6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ee4:	f7fd fe3e 	bl	8002b64 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	2b64      	cmp	r3, #100	; 0x64
 8004ef0:	d901      	bls.n	8004ef6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e1f3      	b.n	80052de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ef6:	4b51      	ldr	r3, [pc, #324]	; (800503c <HAL_RCC_OscConfig+0x240>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d1f0      	bne.n	8004ee4 <HAL_RCC_OscConfig+0xe8>
 8004f02:	e000      	b.n	8004f06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0302 	and.w	r3, r3, #2
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d063      	beq.n	8004fda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f12:	4b4a      	ldr	r3, [pc, #296]	; (800503c <HAL_RCC_OscConfig+0x240>)
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f003 030c 	and.w	r3, r3, #12
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00b      	beq.n	8004f36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f1e:	4b47      	ldr	r3, [pc, #284]	; (800503c <HAL_RCC_OscConfig+0x240>)
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f26:	2b08      	cmp	r3, #8
 8004f28:	d11c      	bne.n	8004f64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f2a:	4b44      	ldr	r3, [pc, #272]	; (800503c <HAL_RCC_OscConfig+0x240>)
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d116      	bne.n	8004f64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f36:	4b41      	ldr	r3, [pc, #260]	; (800503c <HAL_RCC_OscConfig+0x240>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d005      	beq.n	8004f4e <HAL_RCC_OscConfig+0x152>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d001      	beq.n	8004f4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e1c7      	b.n	80052de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f4e:	4b3b      	ldr	r3, [pc, #236]	; (800503c <HAL_RCC_OscConfig+0x240>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	00db      	lsls	r3, r3, #3
 8004f5c:	4937      	ldr	r1, [pc, #220]	; (800503c <HAL_RCC_OscConfig+0x240>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f62:	e03a      	b.n	8004fda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d020      	beq.n	8004fae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f6c:	4b34      	ldr	r3, [pc, #208]	; (8005040 <HAL_RCC_OscConfig+0x244>)
 8004f6e:	2201      	movs	r2, #1
 8004f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f72:	f7fd fdf7 	bl	8002b64 <HAL_GetTick>
 8004f76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f78:	e008      	b.n	8004f8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f7a:	f7fd fdf3 	bl	8002b64 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d901      	bls.n	8004f8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e1a8      	b.n	80052de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f8c:	4b2b      	ldr	r3, [pc, #172]	; (800503c <HAL_RCC_OscConfig+0x240>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0302 	and.w	r3, r3, #2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d0f0      	beq.n	8004f7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f98:	4b28      	ldr	r3, [pc, #160]	; (800503c <HAL_RCC_OscConfig+0x240>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	00db      	lsls	r3, r3, #3
 8004fa6:	4925      	ldr	r1, [pc, #148]	; (800503c <HAL_RCC_OscConfig+0x240>)
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	600b      	str	r3, [r1, #0]
 8004fac:	e015      	b.n	8004fda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fae:	4b24      	ldr	r3, [pc, #144]	; (8005040 <HAL_RCC_OscConfig+0x244>)
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb4:	f7fd fdd6 	bl	8002b64 <HAL_GetTick>
 8004fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fba:	e008      	b.n	8004fce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fbc:	f7fd fdd2 	bl	8002b64 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d901      	bls.n	8004fce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e187      	b.n	80052de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fce:	4b1b      	ldr	r3, [pc, #108]	; (800503c <HAL_RCC_OscConfig+0x240>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d1f0      	bne.n	8004fbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0308 	and.w	r3, r3, #8
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d036      	beq.n	8005054 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d016      	beq.n	800501c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fee:	4b15      	ldr	r3, [pc, #84]	; (8005044 <HAL_RCC_OscConfig+0x248>)
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ff4:	f7fd fdb6 	bl	8002b64 <HAL_GetTick>
 8004ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ffa:	e008      	b.n	800500e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ffc:	f7fd fdb2 	bl	8002b64 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	2b02      	cmp	r3, #2
 8005008:	d901      	bls.n	800500e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e167      	b.n	80052de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800500e:	4b0b      	ldr	r3, [pc, #44]	; (800503c <HAL_RCC_OscConfig+0x240>)
 8005010:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b00      	cmp	r3, #0
 8005018:	d0f0      	beq.n	8004ffc <HAL_RCC_OscConfig+0x200>
 800501a:	e01b      	b.n	8005054 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800501c:	4b09      	ldr	r3, [pc, #36]	; (8005044 <HAL_RCC_OscConfig+0x248>)
 800501e:	2200      	movs	r2, #0
 8005020:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005022:	f7fd fd9f 	bl	8002b64 <HAL_GetTick>
 8005026:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005028:	e00e      	b.n	8005048 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800502a:	f7fd fd9b 	bl	8002b64 <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	2b02      	cmp	r3, #2
 8005036:	d907      	bls.n	8005048 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e150      	b.n	80052de <HAL_RCC_OscConfig+0x4e2>
 800503c:	40023800 	.word	0x40023800
 8005040:	42470000 	.word	0x42470000
 8005044:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005048:	4b88      	ldr	r3, [pc, #544]	; (800526c <HAL_RCC_OscConfig+0x470>)
 800504a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800504c:	f003 0302 	and.w	r3, r3, #2
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1ea      	bne.n	800502a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0304 	and.w	r3, r3, #4
 800505c:	2b00      	cmp	r3, #0
 800505e:	f000 8097 	beq.w	8005190 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005062:	2300      	movs	r3, #0
 8005064:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005066:	4b81      	ldr	r3, [pc, #516]	; (800526c <HAL_RCC_OscConfig+0x470>)
 8005068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d10f      	bne.n	8005092 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005072:	2300      	movs	r3, #0
 8005074:	60bb      	str	r3, [r7, #8]
 8005076:	4b7d      	ldr	r3, [pc, #500]	; (800526c <HAL_RCC_OscConfig+0x470>)
 8005078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507a:	4a7c      	ldr	r2, [pc, #496]	; (800526c <HAL_RCC_OscConfig+0x470>)
 800507c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005080:	6413      	str	r3, [r2, #64]	; 0x40
 8005082:	4b7a      	ldr	r3, [pc, #488]	; (800526c <HAL_RCC_OscConfig+0x470>)
 8005084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800508a:	60bb      	str	r3, [r7, #8]
 800508c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800508e:	2301      	movs	r3, #1
 8005090:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005092:	4b77      	ldr	r3, [pc, #476]	; (8005270 <HAL_RCC_OscConfig+0x474>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800509a:	2b00      	cmp	r3, #0
 800509c:	d118      	bne.n	80050d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800509e:	4b74      	ldr	r3, [pc, #464]	; (8005270 <HAL_RCC_OscConfig+0x474>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a73      	ldr	r2, [pc, #460]	; (8005270 <HAL_RCC_OscConfig+0x474>)
 80050a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050aa:	f7fd fd5b 	bl	8002b64 <HAL_GetTick>
 80050ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050b0:	e008      	b.n	80050c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050b2:	f7fd fd57 	bl	8002b64 <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d901      	bls.n	80050c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e10c      	b.n	80052de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050c4:	4b6a      	ldr	r3, [pc, #424]	; (8005270 <HAL_RCC_OscConfig+0x474>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d0f0      	beq.n	80050b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d106      	bne.n	80050e6 <HAL_RCC_OscConfig+0x2ea>
 80050d8:	4b64      	ldr	r3, [pc, #400]	; (800526c <HAL_RCC_OscConfig+0x470>)
 80050da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050dc:	4a63      	ldr	r2, [pc, #396]	; (800526c <HAL_RCC_OscConfig+0x470>)
 80050de:	f043 0301 	orr.w	r3, r3, #1
 80050e2:	6713      	str	r3, [r2, #112]	; 0x70
 80050e4:	e01c      	b.n	8005120 <HAL_RCC_OscConfig+0x324>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	2b05      	cmp	r3, #5
 80050ec:	d10c      	bne.n	8005108 <HAL_RCC_OscConfig+0x30c>
 80050ee:	4b5f      	ldr	r3, [pc, #380]	; (800526c <HAL_RCC_OscConfig+0x470>)
 80050f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f2:	4a5e      	ldr	r2, [pc, #376]	; (800526c <HAL_RCC_OscConfig+0x470>)
 80050f4:	f043 0304 	orr.w	r3, r3, #4
 80050f8:	6713      	str	r3, [r2, #112]	; 0x70
 80050fa:	4b5c      	ldr	r3, [pc, #368]	; (800526c <HAL_RCC_OscConfig+0x470>)
 80050fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fe:	4a5b      	ldr	r2, [pc, #364]	; (800526c <HAL_RCC_OscConfig+0x470>)
 8005100:	f043 0301 	orr.w	r3, r3, #1
 8005104:	6713      	str	r3, [r2, #112]	; 0x70
 8005106:	e00b      	b.n	8005120 <HAL_RCC_OscConfig+0x324>
 8005108:	4b58      	ldr	r3, [pc, #352]	; (800526c <HAL_RCC_OscConfig+0x470>)
 800510a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800510c:	4a57      	ldr	r2, [pc, #348]	; (800526c <HAL_RCC_OscConfig+0x470>)
 800510e:	f023 0301 	bic.w	r3, r3, #1
 8005112:	6713      	str	r3, [r2, #112]	; 0x70
 8005114:	4b55      	ldr	r3, [pc, #340]	; (800526c <HAL_RCC_OscConfig+0x470>)
 8005116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005118:	4a54      	ldr	r2, [pc, #336]	; (800526c <HAL_RCC_OscConfig+0x470>)
 800511a:	f023 0304 	bic.w	r3, r3, #4
 800511e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d015      	beq.n	8005154 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005128:	f7fd fd1c 	bl	8002b64 <HAL_GetTick>
 800512c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800512e:	e00a      	b.n	8005146 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005130:	f7fd fd18 	bl	8002b64 <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	f241 3288 	movw	r2, #5000	; 0x1388
 800513e:	4293      	cmp	r3, r2
 8005140:	d901      	bls.n	8005146 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e0cb      	b.n	80052de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005146:	4b49      	ldr	r3, [pc, #292]	; (800526c <HAL_RCC_OscConfig+0x470>)
 8005148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800514a:	f003 0302 	and.w	r3, r3, #2
 800514e:	2b00      	cmp	r3, #0
 8005150:	d0ee      	beq.n	8005130 <HAL_RCC_OscConfig+0x334>
 8005152:	e014      	b.n	800517e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005154:	f7fd fd06 	bl	8002b64 <HAL_GetTick>
 8005158:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800515a:	e00a      	b.n	8005172 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800515c:	f7fd fd02 	bl	8002b64 <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	f241 3288 	movw	r2, #5000	; 0x1388
 800516a:	4293      	cmp	r3, r2
 800516c:	d901      	bls.n	8005172 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e0b5      	b.n	80052de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005172:	4b3e      	ldr	r3, [pc, #248]	; (800526c <HAL_RCC_OscConfig+0x470>)
 8005174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005176:	f003 0302 	and.w	r3, r3, #2
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1ee      	bne.n	800515c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800517e:	7dfb      	ldrb	r3, [r7, #23]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d105      	bne.n	8005190 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005184:	4b39      	ldr	r3, [pc, #228]	; (800526c <HAL_RCC_OscConfig+0x470>)
 8005186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005188:	4a38      	ldr	r2, [pc, #224]	; (800526c <HAL_RCC_OscConfig+0x470>)
 800518a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800518e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	2b00      	cmp	r3, #0
 8005196:	f000 80a1 	beq.w	80052dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800519a:	4b34      	ldr	r3, [pc, #208]	; (800526c <HAL_RCC_OscConfig+0x470>)
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f003 030c 	and.w	r3, r3, #12
 80051a2:	2b08      	cmp	r3, #8
 80051a4:	d05c      	beq.n	8005260 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d141      	bne.n	8005232 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051ae:	4b31      	ldr	r3, [pc, #196]	; (8005274 <HAL_RCC_OscConfig+0x478>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051b4:	f7fd fcd6 	bl	8002b64 <HAL_GetTick>
 80051b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ba:	e008      	b.n	80051ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051bc:	f7fd fcd2 	bl	8002b64 <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d901      	bls.n	80051ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e087      	b.n	80052de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ce:	4b27      	ldr	r3, [pc, #156]	; (800526c <HAL_RCC_OscConfig+0x470>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1f0      	bne.n	80051bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	69da      	ldr	r2, [r3, #28]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	431a      	orrs	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e8:	019b      	lsls	r3, r3, #6
 80051ea:	431a      	orrs	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f0:	085b      	lsrs	r3, r3, #1
 80051f2:	3b01      	subs	r3, #1
 80051f4:	041b      	lsls	r3, r3, #16
 80051f6:	431a      	orrs	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fc:	061b      	lsls	r3, r3, #24
 80051fe:	491b      	ldr	r1, [pc, #108]	; (800526c <HAL_RCC_OscConfig+0x470>)
 8005200:	4313      	orrs	r3, r2
 8005202:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005204:	4b1b      	ldr	r3, [pc, #108]	; (8005274 <HAL_RCC_OscConfig+0x478>)
 8005206:	2201      	movs	r2, #1
 8005208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800520a:	f7fd fcab 	bl	8002b64 <HAL_GetTick>
 800520e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005210:	e008      	b.n	8005224 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005212:	f7fd fca7 	bl	8002b64 <HAL_GetTick>
 8005216:	4602      	mov	r2, r0
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	2b02      	cmp	r3, #2
 800521e:	d901      	bls.n	8005224 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e05c      	b.n	80052de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005224:	4b11      	ldr	r3, [pc, #68]	; (800526c <HAL_RCC_OscConfig+0x470>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d0f0      	beq.n	8005212 <HAL_RCC_OscConfig+0x416>
 8005230:	e054      	b.n	80052dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005232:	4b10      	ldr	r3, [pc, #64]	; (8005274 <HAL_RCC_OscConfig+0x478>)
 8005234:	2200      	movs	r2, #0
 8005236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005238:	f7fd fc94 	bl	8002b64 <HAL_GetTick>
 800523c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800523e:	e008      	b.n	8005252 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005240:	f7fd fc90 	bl	8002b64 <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	2b02      	cmp	r3, #2
 800524c:	d901      	bls.n	8005252 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e045      	b.n	80052de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005252:	4b06      	ldr	r3, [pc, #24]	; (800526c <HAL_RCC_OscConfig+0x470>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1f0      	bne.n	8005240 <HAL_RCC_OscConfig+0x444>
 800525e:	e03d      	b.n	80052dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	2b01      	cmp	r3, #1
 8005266:	d107      	bne.n	8005278 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e038      	b.n	80052de <HAL_RCC_OscConfig+0x4e2>
 800526c:	40023800 	.word	0x40023800
 8005270:	40007000 	.word	0x40007000
 8005274:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005278:	4b1b      	ldr	r3, [pc, #108]	; (80052e8 <HAL_RCC_OscConfig+0x4ec>)
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	2b01      	cmp	r3, #1
 8005284:	d028      	beq.n	80052d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005290:	429a      	cmp	r2, r3
 8005292:	d121      	bne.n	80052d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800529e:	429a      	cmp	r2, r3
 80052a0:	d11a      	bne.n	80052d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80052a8:	4013      	ands	r3, r2
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d111      	bne.n	80052d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052be:	085b      	lsrs	r3, r3, #1
 80052c0:	3b01      	subs	r3, #1
 80052c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d107      	bne.n	80052d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d001      	beq.n	80052dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e000      	b.n	80052de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3718      	adds	r7, #24
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	40023800 	.word	0x40023800

080052ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d101      	bne.n	8005300 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e0cc      	b.n	800549a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005300:	4b68      	ldr	r3, [pc, #416]	; (80054a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 030f 	and.w	r3, r3, #15
 8005308:	683a      	ldr	r2, [r7, #0]
 800530a:	429a      	cmp	r2, r3
 800530c:	d90c      	bls.n	8005328 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800530e:	4b65      	ldr	r3, [pc, #404]	; (80054a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005310:	683a      	ldr	r2, [r7, #0]
 8005312:	b2d2      	uxtb	r2, r2
 8005314:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005316:	4b63      	ldr	r3, [pc, #396]	; (80054a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 030f 	and.w	r3, r3, #15
 800531e:	683a      	ldr	r2, [r7, #0]
 8005320:	429a      	cmp	r2, r3
 8005322:	d001      	beq.n	8005328 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e0b8      	b.n	800549a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0302 	and.w	r3, r3, #2
 8005330:	2b00      	cmp	r3, #0
 8005332:	d020      	beq.n	8005376 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0304 	and.w	r3, r3, #4
 800533c:	2b00      	cmp	r3, #0
 800533e:	d005      	beq.n	800534c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005340:	4b59      	ldr	r3, [pc, #356]	; (80054a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	4a58      	ldr	r2, [pc, #352]	; (80054a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005346:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800534a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0308 	and.w	r3, r3, #8
 8005354:	2b00      	cmp	r3, #0
 8005356:	d005      	beq.n	8005364 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005358:	4b53      	ldr	r3, [pc, #332]	; (80054a8 <HAL_RCC_ClockConfig+0x1bc>)
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	4a52      	ldr	r2, [pc, #328]	; (80054a8 <HAL_RCC_ClockConfig+0x1bc>)
 800535e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005362:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005364:	4b50      	ldr	r3, [pc, #320]	; (80054a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	494d      	ldr	r1, [pc, #308]	; (80054a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005372:	4313      	orrs	r3, r2
 8005374:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0301 	and.w	r3, r3, #1
 800537e:	2b00      	cmp	r3, #0
 8005380:	d044      	beq.n	800540c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	2b01      	cmp	r3, #1
 8005388:	d107      	bne.n	800539a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800538a:	4b47      	ldr	r3, [pc, #284]	; (80054a8 <HAL_RCC_ClockConfig+0x1bc>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d119      	bne.n	80053ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e07f      	b.n	800549a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d003      	beq.n	80053aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053a6:	2b03      	cmp	r3, #3
 80053a8:	d107      	bne.n	80053ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053aa:	4b3f      	ldr	r3, [pc, #252]	; (80054a8 <HAL_RCC_ClockConfig+0x1bc>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d109      	bne.n	80053ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e06f      	b.n	800549a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053ba:	4b3b      	ldr	r3, [pc, #236]	; (80054a8 <HAL_RCC_ClockConfig+0x1bc>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0302 	and.w	r3, r3, #2
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d101      	bne.n	80053ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e067      	b.n	800549a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053ca:	4b37      	ldr	r3, [pc, #220]	; (80054a8 <HAL_RCC_ClockConfig+0x1bc>)
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f023 0203 	bic.w	r2, r3, #3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	4934      	ldr	r1, [pc, #208]	; (80054a8 <HAL_RCC_ClockConfig+0x1bc>)
 80053d8:	4313      	orrs	r3, r2
 80053da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053dc:	f7fd fbc2 	bl	8002b64 <HAL_GetTick>
 80053e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053e2:	e00a      	b.n	80053fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053e4:	f7fd fbbe 	bl	8002b64 <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d901      	bls.n	80053fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e04f      	b.n	800549a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053fa:	4b2b      	ldr	r3, [pc, #172]	; (80054a8 <HAL_RCC_ClockConfig+0x1bc>)
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f003 020c 	and.w	r2, r3, #12
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	429a      	cmp	r2, r3
 800540a:	d1eb      	bne.n	80053e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800540c:	4b25      	ldr	r3, [pc, #148]	; (80054a4 <HAL_RCC_ClockConfig+0x1b8>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 030f 	and.w	r3, r3, #15
 8005414:	683a      	ldr	r2, [r7, #0]
 8005416:	429a      	cmp	r2, r3
 8005418:	d20c      	bcs.n	8005434 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800541a:	4b22      	ldr	r3, [pc, #136]	; (80054a4 <HAL_RCC_ClockConfig+0x1b8>)
 800541c:	683a      	ldr	r2, [r7, #0]
 800541e:	b2d2      	uxtb	r2, r2
 8005420:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005422:	4b20      	ldr	r3, [pc, #128]	; (80054a4 <HAL_RCC_ClockConfig+0x1b8>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 030f 	and.w	r3, r3, #15
 800542a:	683a      	ldr	r2, [r7, #0]
 800542c:	429a      	cmp	r2, r3
 800542e:	d001      	beq.n	8005434 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e032      	b.n	800549a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0304 	and.w	r3, r3, #4
 800543c:	2b00      	cmp	r3, #0
 800543e:	d008      	beq.n	8005452 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005440:	4b19      	ldr	r3, [pc, #100]	; (80054a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	4916      	ldr	r1, [pc, #88]	; (80054a8 <HAL_RCC_ClockConfig+0x1bc>)
 800544e:	4313      	orrs	r3, r2
 8005450:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0308 	and.w	r3, r3, #8
 800545a:	2b00      	cmp	r3, #0
 800545c:	d009      	beq.n	8005472 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800545e:	4b12      	ldr	r3, [pc, #72]	; (80054a8 <HAL_RCC_ClockConfig+0x1bc>)
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	00db      	lsls	r3, r3, #3
 800546c:	490e      	ldr	r1, [pc, #56]	; (80054a8 <HAL_RCC_ClockConfig+0x1bc>)
 800546e:	4313      	orrs	r3, r2
 8005470:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005472:	f000 f821 	bl	80054b8 <HAL_RCC_GetSysClockFreq>
 8005476:	4602      	mov	r2, r0
 8005478:	4b0b      	ldr	r3, [pc, #44]	; (80054a8 <HAL_RCC_ClockConfig+0x1bc>)
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	091b      	lsrs	r3, r3, #4
 800547e:	f003 030f 	and.w	r3, r3, #15
 8005482:	490a      	ldr	r1, [pc, #40]	; (80054ac <HAL_RCC_ClockConfig+0x1c0>)
 8005484:	5ccb      	ldrb	r3, [r1, r3]
 8005486:	fa22 f303 	lsr.w	r3, r2, r3
 800548a:	4a09      	ldr	r2, [pc, #36]	; (80054b0 <HAL_RCC_ClockConfig+0x1c4>)
 800548c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800548e:	4b09      	ldr	r3, [pc, #36]	; (80054b4 <HAL_RCC_ClockConfig+0x1c8>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4618      	mov	r0, r3
 8005494:	f7fd f886 	bl	80025a4 <HAL_InitTick>

  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3710      	adds	r7, #16
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	40023c00 	.word	0x40023c00
 80054a8:	40023800 	.word	0x40023800
 80054ac:	0800cf80 	.word	0x0800cf80
 80054b0:	200000a0 	.word	0x200000a0
 80054b4:	200000a4 	.word	0x200000a4

080054b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054bc:	b094      	sub	sp, #80	; 0x50
 80054be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80054c0:	2300      	movs	r3, #0
 80054c2:	647b      	str	r3, [r7, #68]	; 0x44
 80054c4:	2300      	movs	r3, #0
 80054c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054c8:	2300      	movs	r3, #0
 80054ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80054cc:	2300      	movs	r3, #0
 80054ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054d0:	4b79      	ldr	r3, [pc, #484]	; (80056b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f003 030c 	and.w	r3, r3, #12
 80054d8:	2b08      	cmp	r3, #8
 80054da:	d00d      	beq.n	80054f8 <HAL_RCC_GetSysClockFreq+0x40>
 80054dc:	2b08      	cmp	r3, #8
 80054de:	f200 80e1 	bhi.w	80056a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d002      	beq.n	80054ec <HAL_RCC_GetSysClockFreq+0x34>
 80054e6:	2b04      	cmp	r3, #4
 80054e8:	d003      	beq.n	80054f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80054ea:	e0db      	b.n	80056a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054ec:	4b73      	ldr	r3, [pc, #460]	; (80056bc <HAL_RCC_GetSysClockFreq+0x204>)
 80054ee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80054f0:	e0db      	b.n	80056aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054f2:	4b73      	ldr	r3, [pc, #460]	; (80056c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80054f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80054f6:	e0d8      	b.n	80056aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054f8:	4b6f      	ldr	r3, [pc, #444]	; (80056b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005500:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005502:	4b6d      	ldr	r3, [pc, #436]	; (80056b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d063      	beq.n	80055d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800550e:	4b6a      	ldr	r3, [pc, #424]	; (80056b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	099b      	lsrs	r3, r3, #6
 8005514:	2200      	movs	r2, #0
 8005516:	63bb      	str	r3, [r7, #56]	; 0x38
 8005518:	63fa      	str	r2, [r7, #60]	; 0x3c
 800551a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005520:	633b      	str	r3, [r7, #48]	; 0x30
 8005522:	2300      	movs	r3, #0
 8005524:	637b      	str	r3, [r7, #52]	; 0x34
 8005526:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800552a:	4622      	mov	r2, r4
 800552c:	462b      	mov	r3, r5
 800552e:	f04f 0000 	mov.w	r0, #0
 8005532:	f04f 0100 	mov.w	r1, #0
 8005536:	0159      	lsls	r1, r3, #5
 8005538:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800553c:	0150      	lsls	r0, r2, #5
 800553e:	4602      	mov	r2, r0
 8005540:	460b      	mov	r3, r1
 8005542:	4621      	mov	r1, r4
 8005544:	1a51      	subs	r1, r2, r1
 8005546:	6139      	str	r1, [r7, #16]
 8005548:	4629      	mov	r1, r5
 800554a:	eb63 0301 	sbc.w	r3, r3, r1
 800554e:	617b      	str	r3, [r7, #20]
 8005550:	f04f 0200 	mov.w	r2, #0
 8005554:	f04f 0300 	mov.w	r3, #0
 8005558:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800555c:	4659      	mov	r1, fp
 800555e:	018b      	lsls	r3, r1, #6
 8005560:	4651      	mov	r1, sl
 8005562:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005566:	4651      	mov	r1, sl
 8005568:	018a      	lsls	r2, r1, #6
 800556a:	4651      	mov	r1, sl
 800556c:	ebb2 0801 	subs.w	r8, r2, r1
 8005570:	4659      	mov	r1, fp
 8005572:	eb63 0901 	sbc.w	r9, r3, r1
 8005576:	f04f 0200 	mov.w	r2, #0
 800557a:	f04f 0300 	mov.w	r3, #0
 800557e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005582:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005586:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800558a:	4690      	mov	r8, r2
 800558c:	4699      	mov	r9, r3
 800558e:	4623      	mov	r3, r4
 8005590:	eb18 0303 	adds.w	r3, r8, r3
 8005594:	60bb      	str	r3, [r7, #8]
 8005596:	462b      	mov	r3, r5
 8005598:	eb49 0303 	adc.w	r3, r9, r3
 800559c:	60fb      	str	r3, [r7, #12]
 800559e:	f04f 0200 	mov.w	r2, #0
 80055a2:	f04f 0300 	mov.w	r3, #0
 80055a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80055aa:	4629      	mov	r1, r5
 80055ac:	024b      	lsls	r3, r1, #9
 80055ae:	4621      	mov	r1, r4
 80055b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80055b4:	4621      	mov	r1, r4
 80055b6:	024a      	lsls	r2, r1, #9
 80055b8:	4610      	mov	r0, r2
 80055ba:	4619      	mov	r1, r3
 80055bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055be:	2200      	movs	r2, #0
 80055c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80055c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80055c8:	f7fa fe62 	bl	8000290 <__aeabi_uldivmod>
 80055cc:	4602      	mov	r2, r0
 80055ce:	460b      	mov	r3, r1
 80055d0:	4613      	mov	r3, r2
 80055d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055d4:	e058      	b.n	8005688 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055d6:	4b38      	ldr	r3, [pc, #224]	; (80056b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	099b      	lsrs	r3, r3, #6
 80055dc:	2200      	movs	r2, #0
 80055de:	4618      	mov	r0, r3
 80055e0:	4611      	mov	r1, r2
 80055e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80055e6:	623b      	str	r3, [r7, #32]
 80055e8:	2300      	movs	r3, #0
 80055ea:	627b      	str	r3, [r7, #36]	; 0x24
 80055ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80055f0:	4642      	mov	r2, r8
 80055f2:	464b      	mov	r3, r9
 80055f4:	f04f 0000 	mov.w	r0, #0
 80055f8:	f04f 0100 	mov.w	r1, #0
 80055fc:	0159      	lsls	r1, r3, #5
 80055fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005602:	0150      	lsls	r0, r2, #5
 8005604:	4602      	mov	r2, r0
 8005606:	460b      	mov	r3, r1
 8005608:	4641      	mov	r1, r8
 800560a:	ebb2 0a01 	subs.w	sl, r2, r1
 800560e:	4649      	mov	r1, r9
 8005610:	eb63 0b01 	sbc.w	fp, r3, r1
 8005614:	f04f 0200 	mov.w	r2, #0
 8005618:	f04f 0300 	mov.w	r3, #0
 800561c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005620:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005624:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005628:	ebb2 040a 	subs.w	r4, r2, sl
 800562c:	eb63 050b 	sbc.w	r5, r3, fp
 8005630:	f04f 0200 	mov.w	r2, #0
 8005634:	f04f 0300 	mov.w	r3, #0
 8005638:	00eb      	lsls	r3, r5, #3
 800563a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800563e:	00e2      	lsls	r2, r4, #3
 8005640:	4614      	mov	r4, r2
 8005642:	461d      	mov	r5, r3
 8005644:	4643      	mov	r3, r8
 8005646:	18e3      	adds	r3, r4, r3
 8005648:	603b      	str	r3, [r7, #0]
 800564a:	464b      	mov	r3, r9
 800564c:	eb45 0303 	adc.w	r3, r5, r3
 8005650:	607b      	str	r3, [r7, #4]
 8005652:	f04f 0200 	mov.w	r2, #0
 8005656:	f04f 0300 	mov.w	r3, #0
 800565a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800565e:	4629      	mov	r1, r5
 8005660:	028b      	lsls	r3, r1, #10
 8005662:	4621      	mov	r1, r4
 8005664:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005668:	4621      	mov	r1, r4
 800566a:	028a      	lsls	r2, r1, #10
 800566c:	4610      	mov	r0, r2
 800566e:	4619      	mov	r1, r3
 8005670:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005672:	2200      	movs	r2, #0
 8005674:	61bb      	str	r3, [r7, #24]
 8005676:	61fa      	str	r2, [r7, #28]
 8005678:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800567c:	f7fa fe08 	bl	8000290 <__aeabi_uldivmod>
 8005680:	4602      	mov	r2, r0
 8005682:	460b      	mov	r3, r1
 8005684:	4613      	mov	r3, r2
 8005686:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005688:	4b0b      	ldr	r3, [pc, #44]	; (80056b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	0c1b      	lsrs	r3, r3, #16
 800568e:	f003 0303 	and.w	r3, r3, #3
 8005692:	3301      	adds	r3, #1
 8005694:	005b      	lsls	r3, r3, #1
 8005696:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005698:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800569a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800569c:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80056a2:	e002      	b.n	80056aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056a4:	4b05      	ldr	r3, [pc, #20]	; (80056bc <HAL_RCC_GetSysClockFreq+0x204>)
 80056a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80056a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3750      	adds	r7, #80	; 0x50
 80056b0:	46bd      	mov	sp, r7
 80056b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056b6:	bf00      	nop
 80056b8:	40023800 	.word	0x40023800
 80056bc:	00f42400 	.word	0x00f42400
 80056c0:	007a1200 	.word	0x007a1200

080056c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056c4:	b480      	push	{r7}
 80056c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056c8:	4b03      	ldr	r3, [pc, #12]	; (80056d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80056ca:	681b      	ldr	r3, [r3, #0]
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	200000a0 	.word	0x200000a0

080056dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80056e0:	f7ff fff0 	bl	80056c4 <HAL_RCC_GetHCLKFreq>
 80056e4:	4602      	mov	r2, r0
 80056e6:	4b05      	ldr	r3, [pc, #20]	; (80056fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	0a9b      	lsrs	r3, r3, #10
 80056ec:	f003 0307 	and.w	r3, r3, #7
 80056f0:	4903      	ldr	r1, [pc, #12]	; (8005700 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056f2:	5ccb      	ldrb	r3, [r1, r3]
 80056f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	40023800 	.word	0x40023800
 8005700:	0800cf90 	.word	0x0800cf90

08005704 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005708:	f7ff ffdc 	bl	80056c4 <HAL_RCC_GetHCLKFreq>
 800570c:	4602      	mov	r2, r0
 800570e:	4b05      	ldr	r3, [pc, #20]	; (8005724 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	0b5b      	lsrs	r3, r3, #13
 8005714:	f003 0307 	and.w	r3, r3, #7
 8005718:	4903      	ldr	r1, [pc, #12]	; (8005728 <HAL_RCC_GetPCLK2Freq+0x24>)
 800571a:	5ccb      	ldrb	r3, [r1, r3]
 800571c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005720:	4618      	mov	r0, r3
 8005722:	bd80      	pop	{r7, pc}
 8005724:	40023800 	.word	0x40023800
 8005728:	0800cf90 	.word	0x0800cf90

0800572c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	220f      	movs	r2, #15
 800573a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800573c:	4b12      	ldr	r3, [pc, #72]	; (8005788 <HAL_RCC_GetClockConfig+0x5c>)
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f003 0203 	and.w	r2, r3, #3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005748:	4b0f      	ldr	r3, [pc, #60]	; (8005788 <HAL_RCC_GetClockConfig+0x5c>)
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005754:	4b0c      	ldr	r3, [pc, #48]	; (8005788 <HAL_RCC_GetClockConfig+0x5c>)
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005760:	4b09      	ldr	r3, [pc, #36]	; (8005788 <HAL_RCC_GetClockConfig+0x5c>)
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	08db      	lsrs	r3, r3, #3
 8005766:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800576e:	4b07      	ldr	r3, [pc, #28]	; (800578c <HAL_RCC_GetClockConfig+0x60>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 020f 	and.w	r2, r3, #15
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	601a      	str	r2, [r3, #0]
}
 800577a:	bf00      	nop
 800577c:	370c      	adds	r7, #12
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr
 8005786:	bf00      	nop
 8005788:	40023800 	.word	0x40023800
 800578c:	40023c00 	.word	0x40023c00

08005790 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b086      	sub	sp, #24
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005798:	2300      	movs	r3, #0
 800579a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800579c:	2300      	movs	r3, #0
 800579e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0301 	and.w	r3, r3, #1
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d10b      	bne.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d105      	bne.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d075      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80057c4:	4b91      	ldr	r3, [pc, #580]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80057c6:	2200      	movs	r2, #0
 80057c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80057ca:	f7fd f9cb 	bl	8002b64 <HAL_GetTick>
 80057ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80057d0:	e008      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80057d2:	f7fd f9c7 	bl	8002b64 <HAL_GetTick>
 80057d6:	4602      	mov	r2, r0
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d901      	bls.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	e189      	b.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80057e4:	4b8a      	ldr	r3, [pc, #552]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d1f0      	bne.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0301 	and.w	r3, r3, #1
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d009      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	019a      	lsls	r2, r3, #6
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	071b      	lsls	r3, r3, #28
 8005808:	4981      	ldr	r1, [pc, #516]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800580a:	4313      	orrs	r3, r2
 800580c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0302 	and.w	r3, r3, #2
 8005818:	2b00      	cmp	r3, #0
 800581a:	d01f      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800581c:	4b7c      	ldr	r3, [pc, #496]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800581e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005822:	0f1b      	lsrs	r3, r3, #28
 8005824:	f003 0307 	and.w	r3, r3, #7
 8005828:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	019a      	lsls	r2, r3, #6
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	061b      	lsls	r3, r3, #24
 8005836:	431a      	orrs	r2, r3
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	071b      	lsls	r3, r3, #28
 800583c:	4974      	ldr	r1, [pc, #464]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800583e:	4313      	orrs	r3, r2
 8005840:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005844:	4b72      	ldr	r3, [pc, #456]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005846:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800584a:	f023 021f 	bic.w	r2, r3, #31
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	69db      	ldr	r3, [r3, #28]
 8005852:	3b01      	subs	r3, #1
 8005854:	496e      	ldr	r1, [pc, #440]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005856:	4313      	orrs	r3, r2
 8005858:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00d      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	019a      	lsls	r2, r3, #6
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	061b      	lsls	r3, r3, #24
 8005874:	431a      	orrs	r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	071b      	lsls	r3, r3, #28
 800587c:	4964      	ldr	r1, [pc, #400]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800587e:	4313      	orrs	r3, r2
 8005880:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005884:	4b61      	ldr	r3, [pc, #388]	; (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005886:	2201      	movs	r2, #1
 8005888:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800588a:	f7fd f96b 	bl	8002b64 <HAL_GetTick>
 800588e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005890:	e008      	b.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005892:	f7fd f967 	bl	8002b64 <HAL_GetTick>
 8005896:	4602      	mov	r2, r0
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	2b02      	cmp	r3, #2
 800589e:	d901      	bls.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e129      	b.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80058a4:	4b5a      	ldr	r3, [pc, #360]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d0f0      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0304 	and.w	r3, r3, #4
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d105      	bne.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d079      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80058c8:	4b52      	ldr	r3, [pc, #328]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80058ca:	2200      	movs	r2, #0
 80058cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80058ce:	f7fd f949 	bl	8002b64 <HAL_GetTick>
 80058d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80058d4:	e008      	b.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80058d6:	f7fd f945 	bl	8002b64 <HAL_GetTick>
 80058da:	4602      	mov	r2, r0
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d901      	bls.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e107      	b.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80058e8:	4b49      	ldr	r3, [pc, #292]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058f4:	d0ef      	beq.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0304 	and.w	r3, r3, #4
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d020      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005902:	4b43      	ldr	r3, [pc, #268]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005908:	0f1b      	lsrs	r3, r3, #28
 800590a:	f003 0307 	and.w	r3, r3, #7
 800590e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	019a      	lsls	r2, r3, #6
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	061b      	lsls	r3, r3, #24
 800591c:	431a      	orrs	r2, r3
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	071b      	lsls	r3, r3, #28
 8005922:	493b      	ldr	r1, [pc, #236]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005924:	4313      	orrs	r3, r2
 8005926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800592a:	4b39      	ldr	r3, [pc, #228]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800592c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005930:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a1b      	ldr	r3, [r3, #32]
 8005938:	3b01      	subs	r3, #1
 800593a:	021b      	lsls	r3, r3, #8
 800593c:	4934      	ldr	r1, [pc, #208]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800593e:	4313      	orrs	r3, r2
 8005940:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 0308 	and.w	r3, r3, #8
 800594c:	2b00      	cmp	r3, #0
 800594e:	d01e      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005950:	4b2f      	ldr	r3, [pc, #188]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005956:	0e1b      	lsrs	r3, r3, #24
 8005958:	f003 030f 	and.w	r3, r3, #15
 800595c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	019a      	lsls	r2, r3, #6
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	061b      	lsls	r3, r3, #24
 8005968:	431a      	orrs	r2, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	071b      	lsls	r3, r3, #28
 8005970:	4927      	ldr	r1, [pc, #156]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005972:	4313      	orrs	r3, r2
 8005974:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005978:	4b25      	ldr	r3, [pc, #148]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800597a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800597e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005986:	4922      	ldr	r1, [pc, #136]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005988:	4313      	orrs	r3, r2
 800598a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800598e:	4b21      	ldr	r3, [pc, #132]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005990:	2201      	movs	r2, #1
 8005992:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005994:	f7fd f8e6 	bl	8002b64 <HAL_GetTick>
 8005998:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800599a:	e008      	b.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800599c:	f7fd f8e2 	bl	8002b64 <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d901      	bls.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e0a4      	b.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80059ae:	4b18      	ldr	r3, [pc, #96]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059ba:	d1ef      	bne.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0320 	and.w	r3, r3, #32
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f000 808b 	beq.w	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80059ca:	2300      	movs	r3, #0
 80059cc:	60fb      	str	r3, [r7, #12]
 80059ce:	4b10      	ldr	r3, [pc, #64]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d2:	4a0f      	ldr	r2, [pc, #60]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059d8:	6413      	str	r3, [r2, #64]	; 0x40
 80059da:	4b0d      	ldr	r3, [pc, #52]	; (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059e2:	60fb      	str	r3, [r7, #12]
 80059e4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80059e6:	4b0c      	ldr	r3, [pc, #48]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a0b      	ldr	r2, [pc, #44]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80059ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059f0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80059f2:	f7fd f8b7 	bl	8002b64 <HAL_GetTick>
 80059f6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80059f8:	e010      	b.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80059fa:	f7fd f8b3 	bl	8002b64 <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d909      	bls.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e075      	b.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005a0c:	42470068 	.word	0x42470068
 8005a10:	40023800 	.word	0x40023800
 8005a14:	42470070 	.word	0x42470070
 8005a18:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005a1c:	4b38      	ldr	r3, [pc, #224]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d0e8      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005a28:	4b36      	ldr	r3, [pc, #216]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a30:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d02f      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d028      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a46:	4b2f      	ldr	r3, [pc, #188]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a4e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a50:	4b2d      	ldr	r3, [pc, #180]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005a52:	2201      	movs	r2, #1
 8005a54:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a56:	4b2c      	ldr	r3, [pc, #176]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005a58:	2200      	movs	r2, #0
 8005a5a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005a5c:	4a29      	ldr	r2, [pc, #164]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005a62:	4b28      	ldr	r3, [pc, #160]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a66:	f003 0301 	and.w	r3, r3, #1
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d114      	bne.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005a6e:	f7fd f879 	bl	8002b64 <HAL_GetTick>
 8005a72:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a74:	e00a      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a76:	f7fd f875 	bl	8002b64 <HAL_GetTick>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d901      	bls.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e035      	b.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a8c:	4b1d      	ldr	r3, [pc, #116]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a90:	f003 0302 	and.w	r3, r3, #2
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d0ee      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aa0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005aa4:	d10d      	bne.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005aa6:	4b17      	ldr	r3, [pc, #92]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005ab6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aba:	4912      	ldr	r1, [pc, #72]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005abc:	4313      	orrs	r3, r2
 8005abe:	608b      	str	r3, [r1, #8]
 8005ac0:	e005      	b.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005ac2:	4b10      	ldr	r3, [pc, #64]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	4a0f      	ldr	r2, [pc, #60]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ac8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005acc:	6093      	str	r3, [r2, #8]
 8005ace:	4b0d      	ldr	r3, [pc, #52]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ad0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ada:	490a      	ldr	r1, [pc, #40]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005adc:	4313      	orrs	r3, r2
 8005ade:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0310 	and.w	r3, r3, #16
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d004      	beq.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005af2:	4b06      	ldr	r3, [pc, #24]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005af4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3718      	adds	r7, #24
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	40007000 	.word	0x40007000
 8005b04:	40023800 	.word	0x40023800
 8005b08:	42470e40 	.word	0x42470e40
 8005b0c:	424711e0 	.word	0x424711e0

08005b10 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d101      	bne.n	8005b26 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e066      	b.n	8005bf4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	7f5b      	ldrb	r3, [r3, #29]
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d105      	bne.n	8005b3c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f7fc facc 	bl	80020d4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2202      	movs	r2, #2
 8005b40:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	22ca      	movs	r2, #202	; 0xca
 8005b48:	625a      	str	r2, [r3, #36]	; 0x24
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2253      	movs	r2, #83	; 0x53
 8005b50:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 f998 	bl	8005e88 <RTC_EnterInitMode>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005b5c:	7bfb      	ldrb	r3, [r7, #15]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d12c      	bne.n	8005bbc <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	6812      	ldr	r2, [r2, #0]
 8005b6c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005b70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b74:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	6899      	ldr	r1, [r3, #8]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685a      	ldr	r2, [r3, #4]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	431a      	orrs	r2, r3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	431a      	orrs	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	430a      	orrs	r2, r1
 8005b92:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	68d2      	ldr	r2, [r2, #12]
 8005b9c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	6919      	ldr	r1, [r3, #16]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	041a      	lsls	r2, r3, #16
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	430a      	orrs	r2, r1
 8005bb0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 f99f 	bl	8005ef6 <RTC_ExitInitMode>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005bbc:	7bfb      	ldrb	r3, [r7, #15]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d113      	bne.n	8005bea <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005bd0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	699a      	ldr	r2, [r3, #24]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	430a      	orrs	r2, r1
 8005be2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	22ff      	movs	r2, #255	; 0xff
 8005bf0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005bfc:	b590      	push	{r4, r7, lr}
 8005bfe:	b087      	sub	sp, #28
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	7f1b      	ldrb	r3, [r3, #28]
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d101      	bne.n	8005c18 <HAL_RTC_SetTime+0x1c>
 8005c14:	2302      	movs	r3, #2
 8005c16:	e087      	b.n	8005d28 <HAL_RTC_SetTime+0x12c>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2202      	movs	r2, #2
 8005c22:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d126      	bne.n	8005c78 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d102      	bne.n	8005c3e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	4618      	mov	r0, r3
 8005c44:	f000 f97c 	bl	8005f40 <RTC_ByteToBcd2>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	785b      	ldrb	r3, [r3, #1]
 8005c50:	4618      	mov	r0, r3
 8005c52:	f000 f975 	bl	8005f40 <RTC_ByteToBcd2>
 8005c56:	4603      	mov	r3, r0
 8005c58:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005c5a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	789b      	ldrb	r3, [r3, #2]
 8005c60:	4618      	mov	r0, r3
 8005c62:	f000 f96d 	bl	8005f40 <RTC_ByteToBcd2>
 8005c66:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005c68:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	78db      	ldrb	r3, [r3, #3]
 8005c70:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005c72:	4313      	orrs	r3, r2
 8005c74:	617b      	str	r3, [r7, #20]
 8005c76:	e018      	b.n	8005caa <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d102      	bne.n	8005c8c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	785b      	ldrb	r3, [r3, #1]
 8005c96:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005c98:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005c9a:	68ba      	ldr	r2, [r7, #8]
 8005c9c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005c9e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	78db      	ldrb	r3, [r3, #3]
 8005ca4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	22ca      	movs	r2, #202	; 0xca
 8005cb0:	625a      	str	r2, [r3, #36]	; 0x24
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2253      	movs	r2, #83	; 0x53
 8005cb8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f000 f8e4 	bl	8005e88 <RTC_EnterInitMode>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005cc4:	7cfb      	ldrb	r3, [r7, #19]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d120      	bne.n	8005d0c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005cd4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005cd8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	689a      	ldr	r2, [r3, #8]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ce8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	6899      	ldr	r1, [r3, #8]
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	68da      	ldr	r2, [r3, #12]
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	431a      	orrs	r2, r3
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005d02:	68f8      	ldr	r0, [r7, #12]
 8005d04:	f000 f8f7 	bl	8005ef6 <RTC_ExitInitMode>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005d0c:	7cfb      	ldrb	r3, [r7, #19]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d102      	bne.n	8005d18 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2201      	movs	r2, #1
 8005d16:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	22ff      	movs	r2, #255	; 0xff
 8005d1e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	771a      	strb	r2, [r3, #28]

  return status;
 8005d26:	7cfb      	ldrb	r3, [r7, #19]
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	371c      	adds	r7, #28
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd90      	pop	{r4, r7, pc}

08005d30 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005d30:	b590      	push	{r4, r7, lr}
 8005d32:	b087      	sub	sp, #28
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	7f1b      	ldrb	r3, [r3, #28]
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d101      	bne.n	8005d4c <HAL_RTC_SetDate+0x1c>
 8005d48:	2302      	movs	r3, #2
 8005d4a:	e071      	b.n	8005e30 <HAL_RTC_SetDate+0x100>
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2202      	movs	r2, #2
 8005d56:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10e      	bne.n	8005d7c <HAL_RTC_SetDate+0x4c>
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	785b      	ldrb	r3, [r3, #1]
 8005d62:	f003 0310 	and.w	r3, r3, #16
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d008      	beq.n	8005d7c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	785b      	ldrb	r3, [r3, #1]
 8005d6e:	f023 0310 	bic.w	r3, r3, #16
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	330a      	adds	r3, #10
 8005d76:	b2da      	uxtb	r2, r3
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d11c      	bne.n	8005dbc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	78db      	ldrb	r3, [r3, #3]
 8005d86:	4618      	mov	r0, r3
 8005d88:	f000 f8da 	bl	8005f40 <RTC_ByteToBcd2>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	785b      	ldrb	r3, [r3, #1]
 8005d94:	4618      	mov	r0, r3
 8005d96:	f000 f8d3 	bl	8005f40 <RTC_ByteToBcd2>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005d9e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	789b      	ldrb	r3, [r3, #2]
 8005da4:	4618      	mov	r0, r3
 8005da6:	f000 f8cb 	bl	8005f40 <RTC_ByteToBcd2>
 8005daa:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005dac:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005db6:	4313      	orrs	r3, r2
 8005db8:	617b      	str	r3, [r7, #20]
 8005dba:	e00e      	b.n	8005dda <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	78db      	ldrb	r3, [r3, #3]
 8005dc0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	785b      	ldrb	r3, [r3, #1]
 8005dc6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005dc8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005dce:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	22ca      	movs	r2, #202	; 0xca
 8005de0:	625a      	str	r2, [r3, #36]	; 0x24
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2253      	movs	r2, #83	; 0x53
 8005de8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005dea:	68f8      	ldr	r0, [r7, #12]
 8005dec:	f000 f84c 	bl	8005e88 <RTC_EnterInitMode>
 8005df0:	4603      	mov	r3, r0
 8005df2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005df4:	7cfb      	ldrb	r3, [r7, #19]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d10c      	bne.n	8005e14 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005e04:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005e08:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005e0a:	68f8      	ldr	r0, [r7, #12]
 8005e0c:	f000 f873 	bl	8005ef6 <RTC_ExitInitMode>
 8005e10:	4603      	mov	r3, r0
 8005e12:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005e14:	7cfb      	ldrb	r3, [r7, #19]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d102      	bne.n	8005e20 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	22ff      	movs	r2, #255	; 0xff
 8005e26:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	771a      	strb	r2, [r3, #28]

  return status;
 8005e2e:	7cfb      	ldrb	r3, [r7, #19]
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	371c      	adds	r7, #28
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd90      	pop	{r4, r7, pc}

08005e38 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e40:	2300      	movs	r3, #0
 8005e42:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68da      	ldr	r2, [r3, #12]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e52:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e54:	f7fc fe86 	bl	8002b64 <HAL_GetTick>
 8005e58:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005e5a:	e009      	b.n	8005e70 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005e5c:	f7fc fe82 	bl	8002b64 <HAL_GetTick>
 8005e60:	4602      	mov	r2, r0
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e6a:	d901      	bls.n	8005e70 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e007      	b.n	8005e80 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	f003 0320 	and.w	r3, r3, #32
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d0ee      	beq.n	8005e5c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e90:	2300      	movs	r3, #0
 8005e92:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005e94:	2300      	movs	r3, #0
 8005e96:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d122      	bne.n	8005eec <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68da      	ldr	r2, [r3, #12]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005eb4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005eb6:	f7fc fe55 	bl	8002b64 <HAL_GetTick>
 8005eba:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005ebc:	e00c      	b.n	8005ed8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005ebe:	f7fc fe51 	bl	8002b64 <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ecc:	d904      	bls.n	8005ed8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2204      	movs	r2, #4
 8005ed2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d102      	bne.n	8005eec <RTC_EnterInitMode+0x64>
 8005ee6:	7bfb      	ldrb	r3, [r7, #15]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d1e8      	bne.n	8005ebe <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	b084      	sub	sp, #16
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005efe:	2300      	movs	r3, #0
 8005f00:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68da      	ldr	r2, [r3, #12]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f10:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	f003 0320 	and.w	r3, r3, #32
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d10a      	bne.n	8005f36 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f7ff ff89 	bl	8005e38 <HAL_RTC_WaitForSynchro>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d004      	beq.n	8005f36 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2204      	movs	r2, #4
 8005f30:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3710      	adds	r7, #16
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	4603      	mov	r3, r0
 8005f48:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8005f4e:	e005      	b.n	8005f5c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005f50:	7bfb      	ldrb	r3, [r7, #15]
 8005f52:	3301      	adds	r3, #1
 8005f54:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8005f56:	79fb      	ldrb	r3, [r7, #7]
 8005f58:	3b0a      	subs	r3, #10
 8005f5a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005f5c:	79fb      	ldrb	r3, [r7, #7]
 8005f5e:	2b09      	cmp	r3, #9
 8005f60:	d8f6      	bhi.n	8005f50 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005f62:	7bfb      	ldrb	r3, [r7, #15]
 8005f64:	011b      	lsls	r3, r3, #4
 8005f66:	b2da      	uxtb	r2, r3
 8005f68:	79fb      	ldrb	r3, [r7, #7]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	b2db      	uxtb	r3, r3
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3714      	adds	r7, #20
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr

08005f7a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b082      	sub	sp, #8
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d101      	bne.n	8005f8c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e041      	b.n	8006010 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d106      	bne.n	8005fa6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f7fc f937 	bl	8002214 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2202      	movs	r2, #2
 8005faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	3304      	adds	r3, #4
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	4610      	mov	r0, r2
 8005fba:	f000 ffd3 	bl	8006f64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2201      	movs	r2, #1
 8006002:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2201      	movs	r2, #1
 800600a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	3708      	adds	r7, #8
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006018:	b480      	push	{r7}
 800601a:	b085      	sub	sp, #20
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006026:	b2db      	uxtb	r3, r3
 8006028:	2b01      	cmp	r3, #1
 800602a:	d001      	beq.n	8006030 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	e04e      	b.n	80060ce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2202      	movs	r2, #2
 8006034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68da      	ldr	r2, [r3, #12]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f042 0201 	orr.w	r2, r2, #1
 8006046:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a23      	ldr	r2, [pc, #140]	; (80060dc <HAL_TIM_Base_Start_IT+0xc4>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d022      	beq.n	8006098 <HAL_TIM_Base_Start_IT+0x80>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800605a:	d01d      	beq.n	8006098 <HAL_TIM_Base_Start_IT+0x80>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a1f      	ldr	r2, [pc, #124]	; (80060e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d018      	beq.n	8006098 <HAL_TIM_Base_Start_IT+0x80>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a1e      	ldr	r2, [pc, #120]	; (80060e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d013      	beq.n	8006098 <HAL_TIM_Base_Start_IT+0x80>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a1c      	ldr	r2, [pc, #112]	; (80060e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d00e      	beq.n	8006098 <HAL_TIM_Base_Start_IT+0x80>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a1b      	ldr	r2, [pc, #108]	; (80060ec <HAL_TIM_Base_Start_IT+0xd4>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d009      	beq.n	8006098 <HAL_TIM_Base_Start_IT+0x80>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a19      	ldr	r2, [pc, #100]	; (80060f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d004      	beq.n	8006098 <HAL_TIM_Base_Start_IT+0x80>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a18      	ldr	r2, [pc, #96]	; (80060f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d111      	bne.n	80060bc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f003 0307 	and.w	r3, r3, #7
 80060a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2b06      	cmp	r3, #6
 80060a8:	d010      	beq.n	80060cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f042 0201 	orr.w	r2, r2, #1
 80060b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060ba:	e007      	b.n	80060cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f042 0201 	orr.w	r2, r2, #1
 80060ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3714      	adds	r7, #20
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	40010000 	.word	0x40010000
 80060e0:	40000400 	.word	0x40000400
 80060e4:	40000800 	.word	0x40000800
 80060e8:	40000c00 	.word	0x40000c00
 80060ec:	40010400 	.word	0x40010400
 80060f0:	40014000 	.word	0x40014000
 80060f4:	40001800 	.word	0x40001800

080060f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d101      	bne.n	800610a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e041      	b.n	800618e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006110:	b2db      	uxtb	r3, r3
 8006112:	2b00      	cmp	r3, #0
 8006114:	d106      	bne.n	8006124 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f7fc f802 	bl	8002128 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2202      	movs	r2, #2
 8006128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	3304      	adds	r3, #4
 8006134:	4619      	mov	r1, r3
 8006136:	4610      	mov	r0, r2
 8006138:	f000 ff14 	bl	8006f64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	3708      	adds	r7, #8
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
	...

08006198 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d109      	bne.n	80061bc <HAL_TIM_PWM_Start+0x24>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	bf14      	ite	ne
 80061b4:	2301      	movne	r3, #1
 80061b6:	2300      	moveq	r3, #0
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	e022      	b.n	8006202 <HAL_TIM_PWM_Start+0x6a>
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	2b04      	cmp	r3, #4
 80061c0:	d109      	bne.n	80061d6 <HAL_TIM_PWM_Start+0x3e>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	bf14      	ite	ne
 80061ce:	2301      	movne	r3, #1
 80061d0:	2300      	moveq	r3, #0
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	e015      	b.n	8006202 <HAL_TIM_PWM_Start+0x6a>
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	2b08      	cmp	r3, #8
 80061da:	d109      	bne.n	80061f0 <HAL_TIM_PWM_Start+0x58>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	bf14      	ite	ne
 80061e8:	2301      	movne	r3, #1
 80061ea:	2300      	moveq	r3, #0
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	e008      	b.n	8006202 <HAL_TIM_PWM_Start+0x6a>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	bf14      	ite	ne
 80061fc:	2301      	movne	r3, #1
 80061fe:	2300      	moveq	r3, #0
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b00      	cmp	r3, #0
 8006204:	d001      	beq.n	800620a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e07c      	b.n	8006304 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d104      	bne.n	800621a <HAL_TIM_PWM_Start+0x82>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2202      	movs	r2, #2
 8006214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006218:	e013      	b.n	8006242 <HAL_TIM_PWM_Start+0xaa>
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	2b04      	cmp	r3, #4
 800621e:	d104      	bne.n	800622a <HAL_TIM_PWM_Start+0x92>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2202      	movs	r2, #2
 8006224:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006228:	e00b      	b.n	8006242 <HAL_TIM_PWM_Start+0xaa>
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	2b08      	cmp	r3, #8
 800622e:	d104      	bne.n	800623a <HAL_TIM_PWM_Start+0xa2>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2202      	movs	r2, #2
 8006234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006238:	e003      	b.n	8006242 <HAL_TIM_PWM_Start+0xaa>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2202      	movs	r2, #2
 800623e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2201      	movs	r2, #1
 8006248:	6839      	ldr	r1, [r7, #0]
 800624a:	4618      	mov	r0, r3
 800624c:	f001 fa9e 	bl	800778c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a2d      	ldr	r2, [pc, #180]	; (800630c <HAL_TIM_PWM_Start+0x174>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d004      	beq.n	8006264 <HAL_TIM_PWM_Start+0xcc>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a2c      	ldr	r2, [pc, #176]	; (8006310 <HAL_TIM_PWM_Start+0x178>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d101      	bne.n	8006268 <HAL_TIM_PWM_Start+0xd0>
 8006264:	2301      	movs	r3, #1
 8006266:	e000      	b.n	800626a <HAL_TIM_PWM_Start+0xd2>
 8006268:	2300      	movs	r3, #0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d007      	beq.n	800627e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800627c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a22      	ldr	r2, [pc, #136]	; (800630c <HAL_TIM_PWM_Start+0x174>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d022      	beq.n	80062ce <HAL_TIM_PWM_Start+0x136>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006290:	d01d      	beq.n	80062ce <HAL_TIM_PWM_Start+0x136>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a1f      	ldr	r2, [pc, #124]	; (8006314 <HAL_TIM_PWM_Start+0x17c>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d018      	beq.n	80062ce <HAL_TIM_PWM_Start+0x136>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a1d      	ldr	r2, [pc, #116]	; (8006318 <HAL_TIM_PWM_Start+0x180>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d013      	beq.n	80062ce <HAL_TIM_PWM_Start+0x136>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a1c      	ldr	r2, [pc, #112]	; (800631c <HAL_TIM_PWM_Start+0x184>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d00e      	beq.n	80062ce <HAL_TIM_PWM_Start+0x136>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a16      	ldr	r2, [pc, #88]	; (8006310 <HAL_TIM_PWM_Start+0x178>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d009      	beq.n	80062ce <HAL_TIM_PWM_Start+0x136>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a18      	ldr	r2, [pc, #96]	; (8006320 <HAL_TIM_PWM_Start+0x188>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d004      	beq.n	80062ce <HAL_TIM_PWM_Start+0x136>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a16      	ldr	r2, [pc, #88]	; (8006324 <HAL_TIM_PWM_Start+0x18c>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d111      	bne.n	80062f2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	f003 0307 	and.w	r3, r3, #7
 80062d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2b06      	cmp	r3, #6
 80062de:	d010      	beq.n	8006302 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f042 0201 	orr.w	r2, r2, #1
 80062ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062f0:	e007      	b.n	8006302 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f042 0201 	orr.w	r2, r2, #1
 8006300:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3710      	adds	r7, #16
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	40010000 	.word	0x40010000
 8006310:	40010400 	.word	0x40010400
 8006314:	40000400 	.word	0x40000400
 8006318:	40000800 	.word	0x40000800
 800631c:	40000c00 	.word	0x40000c00
 8006320:	40014000 	.word	0x40014000
 8006324:	40001800 	.word	0x40001800

08006328 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006332:	2300      	movs	r3, #0
 8006334:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d109      	bne.n	8006350 <HAL_TIM_PWM_Start_IT+0x28>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006342:	b2db      	uxtb	r3, r3
 8006344:	2b01      	cmp	r3, #1
 8006346:	bf14      	ite	ne
 8006348:	2301      	movne	r3, #1
 800634a:	2300      	moveq	r3, #0
 800634c:	b2db      	uxtb	r3, r3
 800634e:	e022      	b.n	8006396 <HAL_TIM_PWM_Start_IT+0x6e>
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	2b04      	cmp	r3, #4
 8006354:	d109      	bne.n	800636a <HAL_TIM_PWM_Start_IT+0x42>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800635c:	b2db      	uxtb	r3, r3
 800635e:	2b01      	cmp	r3, #1
 8006360:	bf14      	ite	ne
 8006362:	2301      	movne	r3, #1
 8006364:	2300      	moveq	r3, #0
 8006366:	b2db      	uxtb	r3, r3
 8006368:	e015      	b.n	8006396 <HAL_TIM_PWM_Start_IT+0x6e>
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	2b08      	cmp	r3, #8
 800636e:	d109      	bne.n	8006384 <HAL_TIM_PWM_Start_IT+0x5c>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006376:	b2db      	uxtb	r3, r3
 8006378:	2b01      	cmp	r3, #1
 800637a:	bf14      	ite	ne
 800637c:	2301      	movne	r3, #1
 800637e:	2300      	moveq	r3, #0
 8006380:	b2db      	uxtb	r3, r3
 8006382:	e008      	b.n	8006396 <HAL_TIM_PWM_Start_IT+0x6e>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800638a:	b2db      	uxtb	r3, r3
 800638c:	2b01      	cmp	r3, #1
 800638e:	bf14      	ite	ne
 8006390:	2301      	movne	r3, #1
 8006392:	2300      	moveq	r3, #0
 8006394:	b2db      	uxtb	r3, r3
 8006396:	2b00      	cmp	r3, #0
 8006398:	d001      	beq.n	800639e <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e0c7      	b.n	800652e <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d104      	bne.n	80063ae <HAL_TIM_PWM_Start_IT+0x86>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2202      	movs	r2, #2
 80063a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063ac:	e013      	b.n	80063d6 <HAL_TIM_PWM_Start_IT+0xae>
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	2b04      	cmp	r3, #4
 80063b2:	d104      	bne.n	80063be <HAL_TIM_PWM_Start_IT+0x96>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2202      	movs	r2, #2
 80063b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063bc:	e00b      	b.n	80063d6 <HAL_TIM_PWM_Start_IT+0xae>
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	2b08      	cmp	r3, #8
 80063c2:	d104      	bne.n	80063ce <HAL_TIM_PWM_Start_IT+0xa6>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2202      	movs	r2, #2
 80063c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063cc:	e003      	b.n	80063d6 <HAL_TIM_PWM_Start_IT+0xae>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2202      	movs	r2, #2
 80063d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	2b0c      	cmp	r3, #12
 80063da:	d841      	bhi.n	8006460 <HAL_TIM_PWM_Start_IT+0x138>
 80063dc:	a201      	add	r2, pc, #4	; (adr r2, 80063e4 <HAL_TIM_PWM_Start_IT+0xbc>)
 80063de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e2:	bf00      	nop
 80063e4:	08006419 	.word	0x08006419
 80063e8:	08006461 	.word	0x08006461
 80063ec:	08006461 	.word	0x08006461
 80063f0:	08006461 	.word	0x08006461
 80063f4:	0800642b 	.word	0x0800642b
 80063f8:	08006461 	.word	0x08006461
 80063fc:	08006461 	.word	0x08006461
 8006400:	08006461 	.word	0x08006461
 8006404:	0800643d 	.word	0x0800643d
 8006408:	08006461 	.word	0x08006461
 800640c:	08006461 	.word	0x08006461
 8006410:	08006461 	.word	0x08006461
 8006414:	0800644f 	.word	0x0800644f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68da      	ldr	r2, [r3, #12]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f042 0202 	orr.w	r2, r2, #2
 8006426:	60da      	str	r2, [r3, #12]
      break;
 8006428:	e01d      	b.n	8006466 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68da      	ldr	r2, [r3, #12]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f042 0204 	orr.w	r2, r2, #4
 8006438:	60da      	str	r2, [r3, #12]
      break;
 800643a:	e014      	b.n	8006466 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	68da      	ldr	r2, [r3, #12]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f042 0208 	orr.w	r2, r2, #8
 800644a:	60da      	str	r2, [r3, #12]
      break;
 800644c:	e00b      	b.n	8006466 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68da      	ldr	r2, [r3, #12]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f042 0210 	orr.w	r2, r2, #16
 800645c:	60da      	str	r2, [r3, #12]
      break;
 800645e:	e002      	b.n	8006466 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	73fb      	strb	r3, [r7, #15]
      break;
 8006464:	bf00      	nop
  }

  if (status == HAL_OK)
 8006466:	7bfb      	ldrb	r3, [r7, #15]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d15f      	bne.n	800652c <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2201      	movs	r2, #1
 8006472:	6839      	ldr	r1, [r7, #0]
 8006474:	4618      	mov	r0, r3
 8006476:	f001 f989 	bl	800778c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a2e      	ldr	r2, [pc, #184]	; (8006538 <HAL_TIM_PWM_Start_IT+0x210>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d004      	beq.n	800648e <HAL_TIM_PWM_Start_IT+0x166>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a2c      	ldr	r2, [pc, #176]	; (800653c <HAL_TIM_PWM_Start_IT+0x214>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d101      	bne.n	8006492 <HAL_TIM_PWM_Start_IT+0x16a>
 800648e:	2301      	movs	r3, #1
 8006490:	e000      	b.n	8006494 <HAL_TIM_PWM_Start_IT+0x16c>
 8006492:	2300      	movs	r3, #0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d007      	beq.n	80064a8 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064a6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a22      	ldr	r2, [pc, #136]	; (8006538 <HAL_TIM_PWM_Start_IT+0x210>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d022      	beq.n	80064f8 <HAL_TIM_PWM_Start_IT+0x1d0>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064ba:	d01d      	beq.n	80064f8 <HAL_TIM_PWM_Start_IT+0x1d0>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a1f      	ldr	r2, [pc, #124]	; (8006540 <HAL_TIM_PWM_Start_IT+0x218>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d018      	beq.n	80064f8 <HAL_TIM_PWM_Start_IT+0x1d0>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a1e      	ldr	r2, [pc, #120]	; (8006544 <HAL_TIM_PWM_Start_IT+0x21c>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d013      	beq.n	80064f8 <HAL_TIM_PWM_Start_IT+0x1d0>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a1c      	ldr	r2, [pc, #112]	; (8006548 <HAL_TIM_PWM_Start_IT+0x220>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d00e      	beq.n	80064f8 <HAL_TIM_PWM_Start_IT+0x1d0>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a17      	ldr	r2, [pc, #92]	; (800653c <HAL_TIM_PWM_Start_IT+0x214>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d009      	beq.n	80064f8 <HAL_TIM_PWM_Start_IT+0x1d0>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a18      	ldr	r2, [pc, #96]	; (800654c <HAL_TIM_PWM_Start_IT+0x224>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d004      	beq.n	80064f8 <HAL_TIM_PWM_Start_IT+0x1d0>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a17      	ldr	r2, [pc, #92]	; (8006550 <HAL_TIM_PWM_Start_IT+0x228>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d111      	bne.n	800651c <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	f003 0307 	and.w	r3, r3, #7
 8006502:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	2b06      	cmp	r3, #6
 8006508:	d010      	beq.n	800652c <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f042 0201 	orr.w	r2, r2, #1
 8006518:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800651a:	e007      	b.n	800652c <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f042 0201 	orr.w	r2, r2, #1
 800652a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800652c:	7bfb      	ldrb	r3, [r7, #15]
}
 800652e:	4618      	mov	r0, r3
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	40010000 	.word	0x40010000
 800653c:	40010400 	.word	0x40010400
 8006540:	40000400 	.word	0x40000400
 8006544:	40000800 	.word	0x40000800
 8006548:	40000c00 	.word	0x40000c00
 800654c:	40014000 	.word	0x40014000
 8006550:	40001800 	.word	0x40001800

08006554 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d101      	bne.n	8006566 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e041      	b.n	80065ea <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800656c:	b2db      	uxtb	r3, r3
 800656e:	2b00      	cmp	r3, #0
 8006570:	d106      	bne.n	8006580 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f7fb fdfa 	bl	8002174 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2202      	movs	r2, #2
 8006584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	3304      	adds	r3, #4
 8006590:	4619      	mov	r1, r3
 8006592:	4610      	mov	r0, r2
 8006594:	f000 fce6 	bl	8006f64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3708      	adds	r7, #8
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
	...

080065f4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065fe:	2300      	movs	r3, #0
 8006600:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d104      	bne.n	8006612 <HAL_TIM_IC_Start_IT+0x1e>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800660e:	b2db      	uxtb	r3, r3
 8006610:	e013      	b.n	800663a <HAL_TIM_IC_Start_IT+0x46>
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	2b04      	cmp	r3, #4
 8006616:	d104      	bne.n	8006622 <HAL_TIM_IC_Start_IT+0x2e>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800661e:	b2db      	uxtb	r3, r3
 8006620:	e00b      	b.n	800663a <HAL_TIM_IC_Start_IT+0x46>
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	2b08      	cmp	r3, #8
 8006626:	d104      	bne.n	8006632 <HAL_TIM_IC_Start_IT+0x3e>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800662e:	b2db      	uxtb	r3, r3
 8006630:	e003      	b.n	800663a <HAL_TIM_IC_Start_IT+0x46>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006638:	b2db      	uxtb	r3, r3
 800663a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d104      	bne.n	800664c <HAL_TIM_IC_Start_IT+0x58>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006648:	b2db      	uxtb	r3, r3
 800664a:	e013      	b.n	8006674 <HAL_TIM_IC_Start_IT+0x80>
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	2b04      	cmp	r3, #4
 8006650:	d104      	bne.n	800665c <HAL_TIM_IC_Start_IT+0x68>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006658:	b2db      	uxtb	r3, r3
 800665a:	e00b      	b.n	8006674 <HAL_TIM_IC_Start_IT+0x80>
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	2b08      	cmp	r3, #8
 8006660:	d104      	bne.n	800666c <HAL_TIM_IC_Start_IT+0x78>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006668:	b2db      	uxtb	r3, r3
 800666a:	e003      	b.n	8006674 <HAL_TIM_IC_Start_IT+0x80>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006672:	b2db      	uxtb	r3, r3
 8006674:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006676:	7bbb      	ldrb	r3, [r7, #14]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d102      	bne.n	8006682 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800667c:	7b7b      	ldrb	r3, [r7, #13]
 800667e:	2b01      	cmp	r3, #1
 8006680:	d001      	beq.n	8006686 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e0cc      	b.n	8006820 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d104      	bne.n	8006696 <HAL_TIM_IC_Start_IT+0xa2>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2202      	movs	r2, #2
 8006690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006694:	e013      	b.n	80066be <HAL_TIM_IC_Start_IT+0xca>
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	2b04      	cmp	r3, #4
 800669a:	d104      	bne.n	80066a6 <HAL_TIM_IC_Start_IT+0xb2>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2202      	movs	r2, #2
 80066a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066a4:	e00b      	b.n	80066be <HAL_TIM_IC_Start_IT+0xca>
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	2b08      	cmp	r3, #8
 80066aa:	d104      	bne.n	80066b6 <HAL_TIM_IC_Start_IT+0xc2>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2202      	movs	r2, #2
 80066b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066b4:	e003      	b.n	80066be <HAL_TIM_IC_Start_IT+0xca>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2202      	movs	r2, #2
 80066ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d104      	bne.n	80066ce <HAL_TIM_IC_Start_IT+0xda>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2202      	movs	r2, #2
 80066c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066cc:	e013      	b.n	80066f6 <HAL_TIM_IC_Start_IT+0x102>
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	2b04      	cmp	r3, #4
 80066d2:	d104      	bne.n	80066de <HAL_TIM_IC_Start_IT+0xea>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2202      	movs	r2, #2
 80066d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80066dc:	e00b      	b.n	80066f6 <HAL_TIM_IC_Start_IT+0x102>
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	2b08      	cmp	r3, #8
 80066e2:	d104      	bne.n	80066ee <HAL_TIM_IC_Start_IT+0xfa>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2202      	movs	r2, #2
 80066e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066ec:	e003      	b.n	80066f6 <HAL_TIM_IC_Start_IT+0x102>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2202      	movs	r2, #2
 80066f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	2b0c      	cmp	r3, #12
 80066fa:	d841      	bhi.n	8006780 <HAL_TIM_IC_Start_IT+0x18c>
 80066fc:	a201      	add	r2, pc, #4	; (adr r2, 8006704 <HAL_TIM_IC_Start_IT+0x110>)
 80066fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006702:	bf00      	nop
 8006704:	08006739 	.word	0x08006739
 8006708:	08006781 	.word	0x08006781
 800670c:	08006781 	.word	0x08006781
 8006710:	08006781 	.word	0x08006781
 8006714:	0800674b 	.word	0x0800674b
 8006718:	08006781 	.word	0x08006781
 800671c:	08006781 	.word	0x08006781
 8006720:	08006781 	.word	0x08006781
 8006724:	0800675d 	.word	0x0800675d
 8006728:	08006781 	.word	0x08006781
 800672c:	08006781 	.word	0x08006781
 8006730:	08006781 	.word	0x08006781
 8006734:	0800676f 	.word	0x0800676f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68da      	ldr	r2, [r3, #12]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f042 0202 	orr.w	r2, r2, #2
 8006746:	60da      	str	r2, [r3, #12]
      break;
 8006748:	e01d      	b.n	8006786 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68da      	ldr	r2, [r3, #12]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f042 0204 	orr.w	r2, r2, #4
 8006758:	60da      	str	r2, [r3, #12]
      break;
 800675a:	e014      	b.n	8006786 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68da      	ldr	r2, [r3, #12]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f042 0208 	orr.w	r2, r2, #8
 800676a:	60da      	str	r2, [r3, #12]
      break;
 800676c:	e00b      	b.n	8006786 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68da      	ldr	r2, [r3, #12]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f042 0210 	orr.w	r2, r2, #16
 800677c:	60da      	str	r2, [r3, #12]
      break;
 800677e:	e002      	b.n	8006786 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	73fb      	strb	r3, [r7, #15]
      break;
 8006784:	bf00      	nop
  }

  if (status == HAL_OK)
 8006786:	7bfb      	ldrb	r3, [r7, #15]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d148      	bne.n	800681e <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2201      	movs	r2, #1
 8006792:	6839      	ldr	r1, [r7, #0]
 8006794:	4618      	mov	r0, r3
 8006796:	f000 fff9 	bl	800778c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a22      	ldr	r2, [pc, #136]	; (8006828 <HAL_TIM_IC_Start_IT+0x234>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d022      	beq.n	80067ea <HAL_TIM_IC_Start_IT+0x1f6>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067ac:	d01d      	beq.n	80067ea <HAL_TIM_IC_Start_IT+0x1f6>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a1e      	ldr	r2, [pc, #120]	; (800682c <HAL_TIM_IC_Start_IT+0x238>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d018      	beq.n	80067ea <HAL_TIM_IC_Start_IT+0x1f6>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a1c      	ldr	r2, [pc, #112]	; (8006830 <HAL_TIM_IC_Start_IT+0x23c>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d013      	beq.n	80067ea <HAL_TIM_IC_Start_IT+0x1f6>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a1b      	ldr	r2, [pc, #108]	; (8006834 <HAL_TIM_IC_Start_IT+0x240>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d00e      	beq.n	80067ea <HAL_TIM_IC_Start_IT+0x1f6>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a19      	ldr	r2, [pc, #100]	; (8006838 <HAL_TIM_IC_Start_IT+0x244>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d009      	beq.n	80067ea <HAL_TIM_IC_Start_IT+0x1f6>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a18      	ldr	r2, [pc, #96]	; (800683c <HAL_TIM_IC_Start_IT+0x248>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d004      	beq.n	80067ea <HAL_TIM_IC_Start_IT+0x1f6>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a16      	ldr	r2, [pc, #88]	; (8006840 <HAL_TIM_IC_Start_IT+0x24c>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d111      	bne.n	800680e <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	f003 0307 	and.w	r3, r3, #7
 80067f4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	2b06      	cmp	r3, #6
 80067fa:	d010      	beq.n	800681e <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f042 0201 	orr.w	r2, r2, #1
 800680a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800680c:	e007      	b.n	800681e <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f042 0201 	orr.w	r2, r2, #1
 800681c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800681e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006820:	4618      	mov	r0, r3
 8006822:	3710      	adds	r7, #16
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	40010000 	.word	0x40010000
 800682c:	40000400 	.word	0x40000400
 8006830:	40000800 	.word	0x40000800
 8006834:	40000c00 	.word	0x40000c00
 8006838:	40010400 	.word	0x40010400
 800683c:	40014000 	.word	0x40014000
 8006840:	40001800 	.word	0x40001800

08006844 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	f003 0302 	and.w	r3, r3, #2
 8006856:	2b02      	cmp	r3, #2
 8006858:	d122      	bne.n	80068a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	f003 0302 	and.w	r3, r3, #2
 8006864:	2b02      	cmp	r3, #2
 8006866:	d11b      	bne.n	80068a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f06f 0202 	mvn.w	r2, #2
 8006870:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2201      	movs	r2, #1
 8006876:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	699b      	ldr	r3, [r3, #24]
 800687e:	f003 0303 	and.w	r3, r3, #3
 8006882:	2b00      	cmp	r3, #0
 8006884:	d003      	beq.n	800688e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f7fc f8d6 	bl	8002a38 <HAL_TIM_IC_CaptureCallback>
 800688c:	e005      	b.n	800689a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 fb4a 	bl	8006f28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 fb51 	bl	8006f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	f003 0304 	and.w	r3, r3, #4
 80068aa:	2b04      	cmp	r3, #4
 80068ac:	d122      	bne.n	80068f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	f003 0304 	and.w	r3, r3, #4
 80068b8:	2b04      	cmp	r3, #4
 80068ba:	d11b      	bne.n	80068f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f06f 0204 	mvn.w	r2, #4
 80068c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2202      	movs	r2, #2
 80068ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	699b      	ldr	r3, [r3, #24]
 80068d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d003      	beq.n	80068e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f7fc f8ac 	bl	8002a38 <HAL_TIM_IC_CaptureCallback>
 80068e0:	e005      	b.n	80068ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 fb20 	bl	8006f28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 fb27 	bl	8006f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	f003 0308 	and.w	r3, r3, #8
 80068fe:	2b08      	cmp	r3, #8
 8006900:	d122      	bne.n	8006948 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	f003 0308 	and.w	r3, r3, #8
 800690c:	2b08      	cmp	r3, #8
 800690e:	d11b      	bne.n	8006948 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f06f 0208 	mvn.w	r2, #8
 8006918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2204      	movs	r2, #4
 800691e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	69db      	ldr	r3, [r3, #28]
 8006926:	f003 0303 	and.w	r3, r3, #3
 800692a:	2b00      	cmp	r3, #0
 800692c:	d003      	beq.n	8006936 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f7fc f882 	bl	8002a38 <HAL_TIM_IC_CaptureCallback>
 8006934:	e005      	b.n	8006942 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 faf6 	bl	8006f28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 fafd 	bl	8006f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	f003 0310 	and.w	r3, r3, #16
 8006952:	2b10      	cmp	r3, #16
 8006954:	d122      	bne.n	800699c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	f003 0310 	and.w	r3, r3, #16
 8006960:	2b10      	cmp	r3, #16
 8006962:	d11b      	bne.n	800699c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f06f 0210 	mvn.w	r2, #16
 800696c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2208      	movs	r2, #8
 8006972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	69db      	ldr	r3, [r3, #28]
 800697a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800697e:	2b00      	cmp	r3, #0
 8006980:	d003      	beq.n	800698a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f7fc f858 	bl	8002a38 <HAL_TIM_IC_CaptureCallback>
 8006988:	e005      	b.n	8006996 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 facc 	bl	8006f28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 fad3 	bl	8006f3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	f003 0301 	and.w	r3, r3, #1
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d10e      	bne.n	80069c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	f003 0301 	and.w	r3, r3, #1
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d107      	bne.n	80069c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f06f 0201 	mvn.w	r2, #1
 80069c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f7fb f9da 	bl	8001d7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069d2:	2b80      	cmp	r3, #128	; 0x80
 80069d4:	d10e      	bne.n	80069f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069e0:	2b80      	cmp	r3, #128	; 0x80
 80069e2:	d107      	bne.n	80069f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80069ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 ff78 	bl	80078e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069fe:	2b40      	cmp	r3, #64	; 0x40
 8006a00:	d10e      	bne.n	8006a20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a0c:	2b40      	cmp	r3, #64	; 0x40
 8006a0e:	d107      	bne.n	8006a20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 fa98 	bl	8006f50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	f003 0320 	and.w	r3, r3, #32
 8006a2a:	2b20      	cmp	r3, #32
 8006a2c:	d10e      	bne.n	8006a4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	f003 0320 	and.w	r3, r3, #32
 8006a38:	2b20      	cmp	r3, #32
 8006a3a:	d107      	bne.n	8006a4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f06f 0220 	mvn.w	r2, #32
 8006a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 ff42 	bl	80078d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a4c:	bf00      	nop
 8006a4e:	3708      	adds	r7, #8
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b086      	sub	sp, #24
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a60:	2300      	movs	r3, #0
 8006a62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d101      	bne.n	8006a72 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006a6e:	2302      	movs	r3, #2
 8006a70:	e088      	b.n	8006b84 <HAL_TIM_IC_ConfigChannel+0x130>
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2201      	movs	r2, #1
 8006a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d11b      	bne.n	8006ab8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6818      	ldr	r0, [r3, #0]
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	6819      	ldr	r1, [r3, #0]
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	685a      	ldr	r2, [r3, #4]
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	f000 fcb8 	bl	8007404 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	699a      	ldr	r2, [r3, #24]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f022 020c 	bic.w	r2, r2, #12
 8006aa2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	6999      	ldr	r1, [r3, #24]
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	689a      	ldr	r2, [r3, #8]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	430a      	orrs	r2, r1
 8006ab4:	619a      	str	r2, [r3, #24]
 8006ab6:	e060      	b.n	8006b7a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2b04      	cmp	r3, #4
 8006abc:	d11c      	bne.n	8006af8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6818      	ldr	r0, [r3, #0]
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	6819      	ldr	r1, [r3, #0]
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	685a      	ldr	r2, [r3, #4]
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	f000 fd3c 	bl	800754a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	699a      	ldr	r2, [r3, #24]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006ae0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	6999      	ldr	r1, [r3, #24]
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	021a      	lsls	r2, r3, #8
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	430a      	orrs	r2, r1
 8006af4:	619a      	str	r2, [r3, #24]
 8006af6:	e040      	b.n	8006b7a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2b08      	cmp	r3, #8
 8006afc:	d11b      	bne.n	8006b36 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6818      	ldr	r0, [r3, #0]
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	6819      	ldr	r1, [r3, #0]
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	685a      	ldr	r2, [r3, #4]
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	f000 fd89 	bl	8007624 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	69da      	ldr	r2, [r3, #28]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f022 020c 	bic.w	r2, r2, #12
 8006b20:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	69d9      	ldr	r1, [r3, #28]
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	689a      	ldr	r2, [r3, #8]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	430a      	orrs	r2, r1
 8006b32:	61da      	str	r2, [r3, #28]
 8006b34:	e021      	b.n	8006b7a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2b0c      	cmp	r3, #12
 8006b3a:	d11c      	bne.n	8006b76 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6818      	ldr	r0, [r3, #0]
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	6819      	ldr	r1, [r3, #0]
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	685a      	ldr	r2, [r3, #4]
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	f000 fda6 	bl	800769c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	69da      	ldr	r2, [r3, #28]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006b5e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	69d9      	ldr	r1, [r3, #28]
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	021a      	lsls	r2, r3, #8
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	430a      	orrs	r2, r1
 8006b72:	61da      	str	r2, [r3, #28]
 8006b74:	e001      	b.n	8006b7a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b82:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3718      	adds	r7, #24
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b086      	sub	sp, #24
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d101      	bne.n	8006baa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006ba6:	2302      	movs	r3, #2
 8006ba8:	e0ae      	b.n	8006d08 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2201      	movs	r2, #1
 8006bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2b0c      	cmp	r3, #12
 8006bb6:	f200 809f 	bhi.w	8006cf8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006bba:	a201      	add	r2, pc, #4	; (adr r2, 8006bc0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc0:	08006bf5 	.word	0x08006bf5
 8006bc4:	08006cf9 	.word	0x08006cf9
 8006bc8:	08006cf9 	.word	0x08006cf9
 8006bcc:	08006cf9 	.word	0x08006cf9
 8006bd0:	08006c35 	.word	0x08006c35
 8006bd4:	08006cf9 	.word	0x08006cf9
 8006bd8:	08006cf9 	.word	0x08006cf9
 8006bdc:	08006cf9 	.word	0x08006cf9
 8006be0:	08006c77 	.word	0x08006c77
 8006be4:	08006cf9 	.word	0x08006cf9
 8006be8:	08006cf9 	.word	0x08006cf9
 8006bec:	08006cf9 	.word	0x08006cf9
 8006bf0:	08006cb7 	.word	0x08006cb7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68b9      	ldr	r1, [r7, #8]
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f000 fa52 	bl	80070a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	699a      	ldr	r2, [r3, #24]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f042 0208 	orr.w	r2, r2, #8
 8006c0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	699a      	ldr	r2, [r3, #24]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f022 0204 	bic.w	r2, r2, #4
 8006c1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	6999      	ldr	r1, [r3, #24]
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	691a      	ldr	r2, [r3, #16]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	430a      	orrs	r2, r1
 8006c30:	619a      	str	r2, [r3, #24]
      break;
 8006c32:	e064      	b.n	8006cfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	68b9      	ldr	r1, [r7, #8]
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f000 faa2 	bl	8007184 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	699a      	ldr	r2, [r3, #24]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	699a      	ldr	r2, [r3, #24]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	6999      	ldr	r1, [r3, #24]
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	021a      	lsls	r2, r3, #8
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	430a      	orrs	r2, r1
 8006c72:	619a      	str	r2, [r3, #24]
      break;
 8006c74:	e043      	b.n	8006cfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68b9      	ldr	r1, [r7, #8]
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f000 faf7 	bl	8007270 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	69da      	ldr	r2, [r3, #28]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f042 0208 	orr.w	r2, r2, #8
 8006c90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	69da      	ldr	r2, [r3, #28]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f022 0204 	bic.w	r2, r2, #4
 8006ca0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	69d9      	ldr	r1, [r3, #28]
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	691a      	ldr	r2, [r3, #16]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	430a      	orrs	r2, r1
 8006cb2:	61da      	str	r2, [r3, #28]
      break;
 8006cb4:	e023      	b.n	8006cfe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	68b9      	ldr	r1, [r7, #8]
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f000 fb4b 	bl	8007358 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	69da      	ldr	r2, [r3, #28]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	69da      	ldr	r2, [r3, #28]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ce0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	69d9      	ldr	r1, [r3, #28]
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	691b      	ldr	r3, [r3, #16]
 8006cec:	021a      	lsls	r2, r3, #8
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	430a      	orrs	r2, r1
 8006cf4:	61da      	str	r2, [r3, #28]
      break;
 8006cf6:	e002      	b.n	8006cfe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	75fb      	strb	r3, [r7, #23]
      break;
 8006cfc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3718      	adds	r7, #24
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d101      	bne.n	8006d2c <HAL_TIM_ConfigClockSource+0x1c>
 8006d28:	2302      	movs	r3, #2
 8006d2a:	e0b4      	b.n	8006e96 <HAL_TIM_ConfigClockSource+0x186>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2202      	movs	r2, #2
 8006d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006d4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68ba      	ldr	r2, [r7, #8]
 8006d5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d64:	d03e      	beq.n	8006de4 <HAL_TIM_ConfigClockSource+0xd4>
 8006d66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d6a:	f200 8087 	bhi.w	8006e7c <HAL_TIM_ConfigClockSource+0x16c>
 8006d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d72:	f000 8086 	beq.w	8006e82 <HAL_TIM_ConfigClockSource+0x172>
 8006d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d7a:	d87f      	bhi.n	8006e7c <HAL_TIM_ConfigClockSource+0x16c>
 8006d7c:	2b70      	cmp	r3, #112	; 0x70
 8006d7e:	d01a      	beq.n	8006db6 <HAL_TIM_ConfigClockSource+0xa6>
 8006d80:	2b70      	cmp	r3, #112	; 0x70
 8006d82:	d87b      	bhi.n	8006e7c <HAL_TIM_ConfigClockSource+0x16c>
 8006d84:	2b60      	cmp	r3, #96	; 0x60
 8006d86:	d050      	beq.n	8006e2a <HAL_TIM_ConfigClockSource+0x11a>
 8006d88:	2b60      	cmp	r3, #96	; 0x60
 8006d8a:	d877      	bhi.n	8006e7c <HAL_TIM_ConfigClockSource+0x16c>
 8006d8c:	2b50      	cmp	r3, #80	; 0x50
 8006d8e:	d03c      	beq.n	8006e0a <HAL_TIM_ConfigClockSource+0xfa>
 8006d90:	2b50      	cmp	r3, #80	; 0x50
 8006d92:	d873      	bhi.n	8006e7c <HAL_TIM_ConfigClockSource+0x16c>
 8006d94:	2b40      	cmp	r3, #64	; 0x40
 8006d96:	d058      	beq.n	8006e4a <HAL_TIM_ConfigClockSource+0x13a>
 8006d98:	2b40      	cmp	r3, #64	; 0x40
 8006d9a:	d86f      	bhi.n	8006e7c <HAL_TIM_ConfigClockSource+0x16c>
 8006d9c:	2b30      	cmp	r3, #48	; 0x30
 8006d9e:	d064      	beq.n	8006e6a <HAL_TIM_ConfigClockSource+0x15a>
 8006da0:	2b30      	cmp	r3, #48	; 0x30
 8006da2:	d86b      	bhi.n	8006e7c <HAL_TIM_ConfigClockSource+0x16c>
 8006da4:	2b20      	cmp	r3, #32
 8006da6:	d060      	beq.n	8006e6a <HAL_TIM_ConfigClockSource+0x15a>
 8006da8:	2b20      	cmp	r3, #32
 8006daa:	d867      	bhi.n	8006e7c <HAL_TIM_ConfigClockSource+0x16c>
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d05c      	beq.n	8006e6a <HAL_TIM_ConfigClockSource+0x15a>
 8006db0:	2b10      	cmp	r3, #16
 8006db2:	d05a      	beq.n	8006e6a <HAL_TIM_ConfigClockSource+0x15a>
 8006db4:	e062      	b.n	8006e7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6818      	ldr	r0, [r3, #0]
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	6899      	ldr	r1, [r3, #8]
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	685a      	ldr	r2, [r3, #4]
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	f000 fcc1 	bl	800774c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006dd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	68ba      	ldr	r2, [r7, #8]
 8006de0:	609a      	str	r2, [r3, #8]
      break;
 8006de2:	e04f      	b.n	8006e84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6818      	ldr	r0, [r3, #0]
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	6899      	ldr	r1, [r3, #8]
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	685a      	ldr	r2, [r3, #4]
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	f000 fcaa 	bl	800774c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	689a      	ldr	r2, [r3, #8]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e06:	609a      	str	r2, [r3, #8]
      break;
 8006e08:	e03c      	b.n	8006e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6818      	ldr	r0, [r3, #0]
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	6859      	ldr	r1, [r3, #4]
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	461a      	mov	r2, r3
 8006e18:	f000 fb68 	bl	80074ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	2150      	movs	r1, #80	; 0x50
 8006e22:	4618      	mov	r0, r3
 8006e24:	f000 fc77 	bl	8007716 <TIM_ITRx_SetConfig>
      break;
 8006e28:	e02c      	b.n	8006e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6818      	ldr	r0, [r3, #0]
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	6859      	ldr	r1, [r3, #4]
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	461a      	mov	r2, r3
 8006e38:	f000 fbc4 	bl	80075c4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2160      	movs	r1, #96	; 0x60
 8006e42:	4618      	mov	r0, r3
 8006e44:	f000 fc67 	bl	8007716 <TIM_ITRx_SetConfig>
      break;
 8006e48:	e01c      	b.n	8006e84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6818      	ldr	r0, [r3, #0]
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	6859      	ldr	r1, [r3, #4]
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	461a      	mov	r2, r3
 8006e58:	f000 fb48 	bl	80074ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2140      	movs	r1, #64	; 0x40
 8006e62:	4618      	mov	r0, r3
 8006e64:	f000 fc57 	bl	8007716 <TIM_ITRx_SetConfig>
      break;
 8006e68:	e00c      	b.n	8006e84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4619      	mov	r1, r3
 8006e74:	4610      	mov	r0, r2
 8006e76:	f000 fc4e 	bl	8007716 <TIM_ITRx_SetConfig>
      break;
 8006e7a:	e003      	b.n	8006e84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8006e80:	e000      	b.n	8006e84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006e82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3710      	adds	r7, #16
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
	...

08006ea0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b085      	sub	sp, #20
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	2b0c      	cmp	r3, #12
 8006eb2:	d831      	bhi.n	8006f18 <HAL_TIM_ReadCapturedValue+0x78>
 8006eb4:	a201      	add	r2, pc, #4	; (adr r2, 8006ebc <HAL_TIM_ReadCapturedValue+0x1c>)
 8006eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eba:	bf00      	nop
 8006ebc:	08006ef1 	.word	0x08006ef1
 8006ec0:	08006f19 	.word	0x08006f19
 8006ec4:	08006f19 	.word	0x08006f19
 8006ec8:	08006f19 	.word	0x08006f19
 8006ecc:	08006efb 	.word	0x08006efb
 8006ed0:	08006f19 	.word	0x08006f19
 8006ed4:	08006f19 	.word	0x08006f19
 8006ed8:	08006f19 	.word	0x08006f19
 8006edc:	08006f05 	.word	0x08006f05
 8006ee0:	08006f19 	.word	0x08006f19
 8006ee4:	08006f19 	.word	0x08006f19
 8006ee8:	08006f19 	.word	0x08006f19
 8006eec:	08006f0f 	.word	0x08006f0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ef6:	60fb      	str	r3, [r7, #12]

      break;
 8006ef8:	e00f      	b.n	8006f1a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f00:	60fb      	str	r3, [r7, #12]

      break;
 8006f02:	e00a      	b.n	8006f1a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f0a:	60fb      	str	r3, [r7, #12]

      break;
 8006f0c:	e005      	b.n	8006f1a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f14:	60fb      	str	r3, [r7, #12]

      break;
 8006f16:	e000      	b.n	8006f1a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006f18:	bf00      	nop
  }

  return tmpreg;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3714      	adds	r7, #20
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f30:	bf00      	nop
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f44:	bf00      	nop
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f58:	bf00      	nop
 8006f5a:	370c      	adds	r7, #12
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b085      	sub	sp, #20
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4a40      	ldr	r2, [pc, #256]	; (8007078 <TIM_Base_SetConfig+0x114>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d013      	beq.n	8006fa4 <TIM_Base_SetConfig+0x40>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f82:	d00f      	beq.n	8006fa4 <TIM_Base_SetConfig+0x40>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	4a3d      	ldr	r2, [pc, #244]	; (800707c <TIM_Base_SetConfig+0x118>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d00b      	beq.n	8006fa4 <TIM_Base_SetConfig+0x40>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4a3c      	ldr	r2, [pc, #240]	; (8007080 <TIM_Base_SetConfig+0x11c>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d007      	beq.n	8006fa4 <TIM_Base_SetConfig+0x40>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	4a3b      	ldr	r2, [pc, #236]	; (8007084 <TIM_Base_SetConfig+0x120>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d003      	beq.n	8006fa4 <TIM_Base_SetConfig+0x40>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4a3a      	ldr	r2, [pc, #232]	; (8007088 <TIM_Base_SetConfig+0x124>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d108      	bne.n	8006fb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006faa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a2f      	ldr	r2, [pc, #188]	; (8007078 <TIM_Base_SetConfig+0x114>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d02b      	beq.n	8007016 <TIM_Base_SetConfig+0xb2>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fc4:	d027      	beq.n	8007016 <TIM_Base_SetConfig+0xb2>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a2c      	ldr	r2, [pc, #176]	; (800707c <TIM_Base_SetConfig+0x118>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d023      	beq.n	8007016 <TIM_Base_SetConfig+0xb2>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4a2b      	ldr	r2, [pc, #172]	; (8007080 <TIM_Base_SetConfig+0x11c>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d01f      	beq.n	8007016 <TIM_Base_SetConfig+0xb2>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a2a      	ldr	r2, [pc, #168]	; (8007084 <TIM_Base_SetConfig+0x120>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d01b      	beq.n	8007016 <TIM_Base_SetConfig+0xb2>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4a29      	ldr	r2, [pc, #164]	; (8007088 <TIM_Base_SetConfig+0x124>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d017      	beq.n	8007016 <TIM_Base_SetConfig+0xb2>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4a28      	ldr	r2, [pc, #160]	; (800708c <TIM_Base_SetConfig+0x128>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d013      	beq.n	8007016 <TIM_Base_SetConfig+0xb2>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4a27      	ldr	r2, [pc, #156]	; (8007090 <TIM_Base_SetConfig+0x12c>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d00f      	beq.n	8007016 <TIM_Base_SetConfig+0xb2>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4a26      	ldr	r2, [pc, #152]	; (8007094 <TIM_Base_SetConfig+0x130>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d00b      	beq.n	8007016 <TIM_Base_SetConfig+0xb2>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4a25      	ldr	r2, [pc, #148]	; (8007098 <TIM_Base_SetConfig+0x134>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d007      	beq.n	8007016 <TIM_Base_SetConfig+0xb2>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	4a24      	ldr	r2, [pc, #144]	; (800709c <TIM_Base_SetConfig+0x138>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d003      	beq.n	8007016 <TIM_Base_SetConfig+0xb2>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	4a23      	ldr	r2, [pc, #140]	; (80070a0 <TIM_Base_SetConfig+0x13c>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d108      	bne.n	8007028 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800701c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	4313      	orrs	r3, r2
 8007026:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	695b      	ldr	r3, [r3, #20]
 8007032:	4313      	orrs	r3, r2
 8007034:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	689a      	ldr	r2, [r3, #8]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a0a      	ldr	r2, [pc, #40]	; (8007078 <TIM_Base_SetConfig+0x114>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d003      	beq.n	800705c <TIM_Base_SetConfig+0xf8>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a0c      	ldr	r2, [pc, #48]	; (8007088 <TIM_Base_SetConfig+0x124>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d103      	bne.n	8007064 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	691a      	ldr	r2, [r3, #16]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	615a      	str	r2, [r3, #20]
}
 800706a:	bf00      	nop
 800706c:	3714      	adds	r7, #20
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr
 8007076:	bf00      	nop
 8007078:	40010000 	.word	0x40010000
 800707c:	40000400 	.word	0x40000400
 8007080:	40000800 	.word	0x40000800
 8007084:	40000c00 	.word	0x40000c00
 8007088:	40010400 	.word	0x40010400
 800708c:	40014000 	.word	0x40014000
 8007090:	40014400 	.word	0x40014400
 8007094:	40014800 	.word	0x40014800
 8007098:	40001800 	.word	0x40001800
 800709c:	40001c00 	.word	0x40001c00
 80070a0:	40002000 	.word	0x40002000

080070a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b087      	sub	sp, #28
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6a1b      	ldr	r3, [r3, #32]
 80070b2:	f023 0201 	bic.w	r2, r3, #1
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6a1b      	ldr	r3, [r3, #32]
 80070be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	699b      	ldr	r3, [r3, #24]
 80070ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f023 0303 	bic.w	r3, r3, #3
 80070da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	f023 0302 	bic.w	r3, r3, #2
 80070ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	4a20      	ldr	r2, [pc, #128]	; (800717c <TIM_OC1_SetConfig+0xd8>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d003      	beq.n	8007108 <TIM_OC1_SetConfig+0x64>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4a1f      	ldr	r2, [pc, #124]	; (8007180 <TIM_OC1_SetConfig+0xdc>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d10c      	bne.n	8007122 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	f023 0308 	bic.w	r3, r3, #8
 800710e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	697a      	ldr	r2, [r7, #20]
 8007116:	4313      	orrs	r3, r2
 8007118:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	f023 0304 	bic.w	r3, r3, #4
 8007120:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4a15      	ldr	r2, [pc, #84]	; (800717c <TIM_OC1_SetConfig+0xd8>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d003      	beq.n	8007132 <TIM_OC1_SetConfig+0x8e>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a14      	ldr	r2, [pc, #80]	; (8007180 <TIM_OC1_SetConfig+0xdc>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d111      	bne.n	8007156 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007138:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007140:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	695b      	ldr	r3, [r3, #20]
 8007146:	693a      	ldr	r2, [r7, #16]
 8007148:	4313      	orrs	r3, r2
 800714a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	699b      	ldr	r3, [r3, #24]
 8007150:	693a      	ldr	r2, [r7, #16]
 8007152:	4313      	orrs	r3, r2
 8007154:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	693a      	ldr	r2, [r7, #16]
 800715a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	68fa      	ldr	r2, [r7, #12]
 8007160:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	685a      	ldr	r2, [r3, #4]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	697a      	ldr	r2, [r7, #20]
 800716e:	621a      	str	r2, [r3, #32]
}
 8007170:	bf00      	nop
 8007172:	371c      	adds	r7, #28
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr
 800717c:	40010000 	.word	0x40010000
 8007180:	40010400 	.word	0x40010400

08007184 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007184:	b480      	push	{r7}
 8007186:	b087      	sub	sp, #28
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a1b      	ldr	r3, [r3, #32]
 8007192:	f023 0210 	bic.w	r2, r3, #16
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6a1b      	ldr	r3, [r3, #32]
 800719e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	699b      	ldr	r3, [r3, #24]
 80071aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	021b      	lsls	r3, r3, #8
 80071c2:	68fa      	ldr	r2, [r7, #12]
 80071c4:	4313      	orrs	r3, r2
 80071c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	f023 0320 	bic.w	r3, r3, #32
 80071ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	011b      	lsls	r3, r3, #4
 80071d6:	697a      	ldr	r2, [r7, #20]
 80071d8:	4313      	orrs	r3, r2
 80071da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	4a22      	ldr	r2, [pc, #136]	; (8007268 <TIM_OC2_SetConfig+0xe4>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d003      	beq.n	80071ec <TIM_OC2_SetConfig+0x68>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	4a21      	ldr	r2, [pc, #132]	; (800726c <TIM_OC2_SetConfig+0xe8>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d10d      	bne.n	8007208 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	011b      	lsls	r3, r3, #4
 80071fa:	697a      	ldr	r2, [r7, #20]
 80071fc:	4313      	orrs	r3, r2
 80071fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007206:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4a17      	ldr	r2, [pc, #92]	; (8007268 <TIM_OC2_SetConfig+0xe4>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d003      	beq.n	8007218 <TIM_OC2_SetConfig+0x94>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4a16      	ldr	r2, [pc, #88]	; (800726c <TIM_OC2_SetConfig+0xe8>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d113      	bne.n	8007240 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800721e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007226:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	695b      	ldr	r3, [r3, #20]
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	693a      	ldr	r2, [r7, #16]
 8007230:	4313      	orrs	r3, r2
 8007232:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	699b      	ldr	r3, [r3, #24]
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	693a      	ldr	r2, [r7, #16]
 800723c:	4313      	orrs	r3, r2
 800723e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	693a      	ldr	r2, [r7, #16]
 8007244:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	68fa      	ldr	r2, [r7, #12]
 800724a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	685a      	ldr	r2, [r3, #4]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	697a      	ldr	r2, [r7, #20]
 8007258:	621a      	str	r2, [r3, #32]
}
 800725a:	bf00      	nop
 800725c:	371c      	adds	r7, #28
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop
 8007268:	40010000 	.word	0x40010000
 800726c:	40010400 	.word	0x40010400

08007270 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007270:	b480      	push	{r7}
 8007272:	b087      	sub	sp, #28
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a1b      	ldr	r3, [r3, #32]
 800727e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a1b      	ldr	r3, [r3, #32]
 800728a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	69db      	ldr	r3, [r3, #28]
 8007296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800729e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f023 0303 	bic.w	r3, r3, #3
 80072a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	68fa      	ldr	r2, [r7, #12]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	021b      	lsls	r3, r3, #8
 80072c0:	697a      	ldr	r2, [r7, #20]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4a21      	ldr	r2, [pc, #132]	; (8007350 <TIM_OC3_SetConfig+0xe0>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d003      	beq.n	80072d6 <TIM_OC3_SetConfig+0x66>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4a20      	ldr	r2, [pc, #128]	; (8007354 <TIM_OC3_SetConfig+0xe4>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d10d      	bne.n	80072f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	021b      	lsls	r3, r3, #8
 80072e4:	697a      	ldr	r2, [r7, #20]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	4a16      	ldr	r2, [pc, #88]	; (8007350 <TIM_OC3_SetConfig+0xe0>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d003      	beq.n	8007302 <TIM_OC3_SetConfig+0x92>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4a15      	ldr	r2, [pc, #84]	; (8007354 <TIM_OC3_SetConfig+0xe4>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d113      	bne.n	800732a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007308:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007310:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	695b      	ldr	r3, [r3, #20]
 8007316:	011b      	lsls	r3, r3, #4
 8007318:	693a      	ldr	r2, [r7, #16]
 800731a:	4313      	orrs	r3, r2
 800731c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	699b      	ldr	r3, [r3, #24]
 8007322:	011b      	lsls	r3, r3, #4
 8007324:	693a      	ldr	r2, [r7, #16]
 8007326:	4313      	orrs	r3, r2
 8007328:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	693a      	ldr	r2, [r7, #16]
 800732e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	68fa      	ldr	r2, [r7, #12]
 8007334:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	685a      	ldr	r2, [r3, #4]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	697a      	ldr	r2, [r7, #20]
 8007342:	621a      	str	r2, [r3, #32]
}
 8007344:	bf00      	nop
 8007346:	371c      	adds	r7, #28
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr
 8007350:	40010000 	.word	0x40010000
 8007354:	40010400 	.word	0x40010400

08007358 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007358:	b480      	push	{r7}
 800735a:	b087      	sub	sp, #28
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a1b      	ldr	r3, [r3, #32]
 8007366:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a1b      	ldr	r3, [r3, #32]
 8007372:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	69db      	ldr	r3, [r3, #28]
 800737e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800738e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	021b      	lsls	r3, r3, #8
 8007396:	68fa      	ldr	r2, [r7, #12]
 8007398:	4313      	orrs	r3, r2
 800739a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	031b      	lsls	r3, r3, #12
 80073aa:	693a      	ldr	r2, [r7, #16]
 80073ac:	4313      	orrs	r3, r2
 80073ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	4a12      	ldr	r2, [pc, #72]	; (80073fc <TIM_OC4_SetConfig+0xa4>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d003      	beq.n	80073c0 <TIM_OC4_SetConfig+0x68>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	4a11      	ldr	r2, [pc, #68]	; (8007400 <TIM_OC4_SetConfig+0xa8>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d109      	bne.n	80073d4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	695b      	ldr	r3, [r3, #20]
 80073cc:	019b      	lsls	r3, r3, #6
 80073ce:	697a      	ldr	r2, [r7, #20]
 80073d0:	4313      	orrs	r3, r2
 80073d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	697a      	ldr	r2, [r7, #20]
 80073d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	68fa      	ldr	r2, [r7, #12]
 80073de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	685a      	ldr	r2, [r3, #4]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	693a      	ldr	r2, [r7, #16]
 80073ec:	621a      	str	r2, [r3, #32]
}
 80073ee:	bf00      	nop
 80073f0:	371c      	adds	r7, #28
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop
 80073fc:	40010000 	.word	0x40010000
 8007400:	40010400 	.word	0x40010400

08007404 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007404:	b480      	push	{r7}
 8007406:	b087      	sub	sp, #28
 8007408:	af00      	add	r7, sp, #0
 800740a:	60f8      	str	r0, [r7, #12]
 800740c:	60b9      	str	r1, [r7, #8]
 800740e:	607a      	str	r2, [r7, #4]
 8007410:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	6a1b      	ldr	r3, [r3, #32]
 8007416:	f023 0201 	bic.w	r2, r3, #1
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	699b      	ldr	r3, [r3, #24]
 8007422:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6a1b      	ldr	r3, [r3, #32]
 8007428:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	4a28      	ldr	r2, [pc, #160]	; (80074d0 <TIM_TI1_SetConfig+0xcc>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d01b      	beq.n	800746a <TIM_TI1_SetConfig+0x66>
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007438:	d017      	beq.n	800746a <TIM_TI1_SetConfig+0x66>
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	4a25      	ldr	r2, [pc, #148]	; (80074d4 <TIM_TI1_SetConfig+0xd0>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d013      	beq.n	800746a <TIM_TI1_SetConfig+0x66>
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	4a24      	ldr	r2, [pc, #144]	; (80074d8 <TIM_TI1_SetConfig+0xd4>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d00f      	beq.n	800746a <TIM_TI1_SetConfig+0x66>
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	4a23      	ldr	r2, [pc, #140]	; (80074dc <TIM_TI1_SetConfig+0xd8>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d00b      	beq.n	800746a <TIM_TI1_SetConfig+0x66>
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	4a22      	ldr	r2, [pc, #136]	; (80074e0 <TIM_TI1_SetConfig+0xdc>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d007      	beq.n	800746a <TIM_TI1_SetConfig+0x66>
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	4a21      	ldr	r2, [pc, #132]	; (80074e4 <TIM_TI1_SetConfig+0xe0>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d003      	beq.n	800746a <TIM_TI1_SetConfig+0x66>
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	4a20      	ldr	r2, [pc, #128]	; (80074e8 <TIM_TI1_SetConfig+0xe4>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d101      	bne.n	800746e <TIM_TI1_SetConfig+0x6a>
 800746a:	2301      	movs	r3, #1
 800746c:	e000      	b.n	8007470 <TIM_TI1_SetConfig+0x6c>
 800746e:	2300      	movs	r3, #0
 8007470:	2b00      	cmp	r3, #0
 8007472:	d008      	beq.n	8007486 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	f023 0303 	bic.w	r3, r3, #3
 800747a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800747c:	697a      	ldr	r2, [r7, #20]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	4313      	orrs	r3, r2
 8007482:	617b      	str	r3, [r7, #20]
 8007484:	e003      	b.n	800748e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	f043 0301 	orr.w	r3, r3, #1
 800748c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007494:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	011b      	lsls	r3, r3, #4
 800749a:	b2db      	uxtb	r3, r3
 800749c:	697a      	ldr	r2, [r7, #20]
 800749e:	4313      	orrs	r3, r2
 80074a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	f023 030a 	bic.w	r3, r3, #10
 80074a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	f003 030a 	and.w	r3, r3, #10
 80074b0:	693a      	ldr	r2, [r7, #16]
 80074b2:	4313      	orrs	r3, r2
 80074b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	697a      	ldr	r2, [r7, #20]
 80074ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	693a      	ldr	r2, [r7, #16]
 80074c0:	621a      	str	r2, [r3, #32]
}
 80074c2:	bf00      	nop
 80074c4:	371c      	adds	r7, #28
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr
 80074ce:	bf00      	nop
 80074d0:	40010000 	.word	0x40010000
 80074d4:	40000400 	.word	0x40000400
 80074d8:	40000800 	.word	0x40000800
 80074dc:	40000c00 	.word	0x40000c00
 80074e0:	40010400 	.word	0x40010400
 80074e4:	40014000 	.word	0x40014000
 80074e8:	40001800 	.word	0x40001800

080074ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b087      	sub	sp, #28
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6a1b      	ldr	r3, [r3, #32]
 80074fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	6a1b      	ldr	r3, [r3, #32]
 8007502:	f023 0201 	bic.w	r2, r3, #1
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	699b      	ldr	r3, [r3, #24]
 800750e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007516:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	011b      	lsls	r3, r3, #4
 800751c:	693a      	ldr	r2, [r7, #16]
 800751e:	4313      	orrs	r3, r2
 8007520:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	f023 030a 	bic.w	r3, r3, #10
 8007528:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800752a:	697a      	ldr	r2, [r7, #20]
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	4313      	orrs	r3, r2
 8007530:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	693a      	ldr	r2, [r7, #16]
 8007536:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	697a      	ldr	r2, [r7, #20]
 800753c:	621a      	str	r2, [r3, #32]
}
 800753e:	bf00      	nop
 8007540:	371c      	adds	r7, #28
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr

0800754a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800754a:	b480      	push	{r7}
 800754c:	b087      	sub	sp, #28
 800754e:	af00      	add	r7, sp, #0
 8007550:	60f8      	str	r0, [r7, #12]
 8007552:	60b9      	str	r1, [r7, #8]
 8007554:	607a      	str	r2, [r7, #4]
 8007556:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6a1b      	ldr	r3, [r3, #32]
 800755c:	f023 0210 	bic.w	r2, r3, #16
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	699b      	ldr	r3, [r3, #24]
 8007568:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	6a1b      	ldr	r3, [r3, #32]
 800756e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007576:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	021b      	lsls	r3, r3, #8
 800757c:	697a      	ldr	r2, [r7, #20]
 800757e:	4313      	orrs	r3, r2
 8007580:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007588:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	031b      	lsls	r3, r3, #12
 800758e:	b29b      	uxth	r3, r3
 8007590:	697a      	ldr	r2, [r7, #20]
 8007592:	4313      	orrs	r3, r2
 8007594:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800759c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	011b      	lsls	r3, r3, #4
 80075a2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80075a6:	693a      	ldr	r2, [r7, #16]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	697a      	ldr	r2, [r7, #20]
 80075b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	693a      	ldr	r2, [r7, #16]
 80075b6:	621a      	str	r2, [r3, #32]
}
 80075b8:	bf00      	nop
 80075ba:	371c      	adds	r7, #28
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b087      	sub	sp, #28
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6a1b      	ldr	r3, [r3, #32]
 80075d4:	f023 0210 	bic.w	r2, r3, #16
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	699b      	ldr	r3, [r3, #24]
 80075e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	6a1b      	ldr	r3, [r3, #32]
 80075e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80075ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	031b      	lsls	r3, r3, #12
 80075f4:	697a      	ldr	r2, [r7, #20]
 80075f6:	4313      	orrs	r3, r2
 80075f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007600:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	011b      	lsls	r3, r3, #4
 8007606:	693a      	ldr	r2, [r7, #16]
 8007608:	4313      	orrs	r3, r2
 800760a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	697a      	ldr	r2, [r7, #20]
 8007610:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	693a      	ldr	r2, [r7, #16]
 8007616:	621a      	str	r2, [r3, #32]
}
 8007618:	bf00      	nop
 800761a:	371c      	adds	r7, #28
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007624:	b480      	push	{r7}
 8007626:	b087      	sub	sp, #28
 8007628:	af00      	add	r7, sp, #0
 800762a:	60f8      	str	r0, [r7, #12]
 800762c:	60b9      	str	r1, [r7, #8]
 800762e:	607a      	str	r2, [r7, #4]
 8007630:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6a1b      	ldr	r3, [r3, #32]
 8007636:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	69db      	ldr	r3, [r3, #28]
 8007642:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	6a1b      	ldr	r3, [r3, #32]
 8007648:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	f023 0303 	bic.w	r3, r3, #3
 8007650:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007652:	697a      	ldr	r2, [r7, #20]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	4313      	orrs	r3, r2
 8007658:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007660:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	011b      	lsls	r3, r3, #4
 8007666:	b2db      	uxtb	r3, r3
 8007668:	697a      	ldr	r2, [r7, #20]
 800766a:	4313      	orrs	r3, r2
 800766c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007674:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	021b      	lsls	r3, r3, #8
 800767a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800767e:	693a      	ldr	r2, [r7, #16]
 8007680:	4313      	orrs	r3, r2
 8007682:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	697a      	ldr	r2, [r7, #20]
 8007688:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	693a      	ldr	r2, [r7, #16]
 800768e:	621a      	str	r2, [r3, #32]
}
 8007690:	bf00      	nop
 8007692:	371c      	adds	r7, #28
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800769c:	b480      	push	{r7}
 800769e:	b087      	sub	sp, #28
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	607a      	str	r2, [r7, #4]
 80076a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6a1b      	ldr	r3, [r3, #32]
 80076ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	69db      	ldr	r3, [r3, #28]
 80076ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6a1b      	ldr	r3, [r3, #32]
 80076c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076c8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	021b      	lsls	r3, r3, #8
 80076ce:	697a      	ldr	r2, [r7, #20]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80076da:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	031b      	lsls	r3, r3, #12
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	697a      	ldr	r2, [r7, #20]
 80076e4:	4313      	orrs	r3, r2
 80076e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80076ee:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	031b      	lsls	r3, r3, #12
 80076f4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80076f8:	693a      	ldr	r2, [r7, #16]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	697a      	ldr	r2, [r7, #20]
 8007702:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	693a      	ldr	r2, [r7, #16]
 8007708:	621a      	str	r2, [r3, #32]
}
 800770a:	bf00      	nop
 800770c:	371c      	adds	r7, #28
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr

08007716 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007716:	b480      	push	{r7}
 8007718:	b085      	sub	sp, #20
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
 800771e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800772c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800772e:	683a      	ldr	r2, [r7, #0]
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	4313      	orrs	r3, r2
 8007734:	f043 0307 	orr.w	r3, r3, #7
 8007738:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	68fa      	ldr	r2, [r7, #12]
 800773e:	609a      	str	r2, [r3, #8]
}
 8007740:	bf00      	nop
 8007742:	3714      	adds	r7, #20
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr

0800774c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800774c:	b480      	push	{r7}
 800774e:	b087      	sub	sp, #28
 8007750:	af00      	add	r7, sp, #0
 8007752:	60f8      	str	r0, [r7, #12]
 8007754:	60b9      	str	r1, [r7, #8]
 8007756:	607a      	str	r2, [r7, #4]
 8007758:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007766:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	021a      	lsls	r2, r3, #8
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	431a      	orrs	r2, r3
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	4313      	orrs	r3, r2
 8007774:	697a      	ldr	r2, [r7, #20]
 8007776:	4313      	orrs	r3, r2
 8007778:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	697a      	ldr	r2, [r7, #20]
 800777e:	609a      	str	r2, [r3, #8]
}
 8007780:	bf00      	nop
 8007782:	371c      	adds	r7, #28
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800778c:	b480      	push	{r7}
 800778e:	b087      	sub	sp, #28
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	f003 031f 	and.w	r3, r3, #31
 800779e:	2201      	movs	r2, #1
 80077a0:	fa02 f303 	lsl.w	r3, r2, r3
 80077a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	6a1a      	ldr	r2, [r3, #32]
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	43db      	mvns	r3, r3
 80077ae:	401a      	ands	r2, r3
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6a1a      	ldr	r2, [r3, #32]
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	f003 031f 	and.w	r3, r3, #31
 80077be:	6879      	ldr	r1, [r7, #4]
 80077c0:	fa01 f303 	lsl.w	r3, r1, r3
 80077c4:	431a      	orrs	r2, r3
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	621a      	str	r2, [r3, #32]
}
 80077ca:	bf00      	nop
 80077cc:	371c      	adds	r7, #28
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr
	...

080077d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80077d8:	b480      	push	{r7}
 80077da:	b085      	sub	sp, #20
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d101      	bne.n	80077f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80077ec:	2302      	movs	r3, #2
 80077ee:	e05a      	b.n	80078a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2201      	movs	r2, #1
 80077f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2202      	movs	r2, #2
 80077fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007816:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	4313      	orrs	r3, r2
 8007820:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	68fa      	ldr	r2, [r7, #12]
 8007828:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a21      	ldr	r2, [pc, #132]	; (80078b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d022      	beq.n	800787a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800783c:	d01d      	beq.n	800787a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a1d      	ldr	r2, [pc, #116]	; (80078b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d018      	beq.n	800787a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a1b      	ldr	r2, [pc, #108]	; (80078bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d013      	beq.n	800787a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a1a      	ldr	r2, [pc, #104]	; (80078c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d00e      	beq.n	800787a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a18      	ldr	r2, [pc, #96]	; (80078c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d009      	beq.n	800787a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a17      	ldr	r2, [pc, #92]	; (80078c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d004      	beq.n	800787a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a15      	ldr	r2, [pc, #84]	; (80078cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d10c      	bne.n	8007894 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007880:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	68ba      	ldr	r2, [r7, #8]
 8007888:	4313      	orrs	r3, r2
 800788a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	68ba      	ldr	r2, [r7, #8]
 8007892:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3714      	adds	r7, #20
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr
 80078b2:	bf00      	nop
 80078b4:	40010000 	.word	0x40010000
 80078b8:	40000400 	.word	0x40000400
 80078bc:	40000800 	.word	0x40000800
 80078c0:	40000c00 	.word	0x40000c00
 80078c4:	40010400 	.word	0x40010400
 80078c8:	40014000 	.word	0x40014000
 80078cc:	40001800 	.word	0x40001800

080078d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80078d8:	bf00      	nop
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80078ec:	bf00      	nop
 80078ee:	370c      	adds	r7, #12
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d101      	bne.n	800790a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	e03f      	b.n	800798a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007910:	b2db      	uxtb	r3, r3
 8007912:	2b00      	cmp	r3, #0
 8007914:	d106      	bne.n	8007924 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f7fa fd58 	bl	80023d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2224      	movs	r2, #36	; 0x24
 8007928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	68da      	ldr	r2, [r3, #12]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800793a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 fddf 	bl	8008500 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	691a      	ldr	r2, [r3, #16]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007950:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	695a      	ldr	r2, [r3, #20]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007960:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	68da      	ldr	r2, [r3, #12]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007970:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2220      	movs	r2, #32
 800797c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2220      	movs	r2, #32
 8007984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007988:	2300      	movs	r3, #0
}
 800798a:	4618      	mov	r0, r3
 800798c:	3708      	adds	r7, #8
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007992:	b580      	push	{r7, lr}
 8007994:	b08a      	sub	sp, #40	; 0x28
 8007996:	af02      	add	r7, sp, #8
 8007998:	60f8      	str	r0, [r7, #12]
 800799a:	60b9      	str	r1, [r7, #8]
 800799c:	603b      	str	r3, [r7, #0]
 800799e:	4613      	mov	r3, r2
 80079a0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80079a2:	2300      	movs	r3, #0
 80079a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	2b20      	cmp	r3, #32
 80079b0:	d17c      	bne.n	8007aac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d002      	beq.n	80079be <HAL_UART_Transmit+0x2c>
 80079b8:	88fb      	ldrh	r3, [r7, #6]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d101      	bne.n	80079c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e075      	b.n	8007aae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d101      	bne.n	80079d0 <HAL_UART_Transmit+0x3e>
 80079cc:	2302      	movs	r3, #2
 80079ce:	e06e      	b.n	8007aae <HAL_UART_Transmit+0x11c>
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2200      	movs	r2, #0
 80079dc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2221      	movs	r2, #33	; 0x21
 80079e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80079e6:	f7fb f8bd 	bl	8002b64 <HAL_GetTick>
 80079ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	88fa      	ldrh	r2, [r7, #6]
 80079f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	88fa      	ldrh	r2, [r7, #6]
 80079f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a00:	d108      	bne.n	8007a14 <HAL_UART_Transmit+0x82>
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d104      	bne.n	8007a14 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	61bb      	str	r3, [r7, #24]
 8007a12:	e003      	b.n	8007a1c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007a24:	e02a      	b.n	8007a7c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	9300      	str	r3, [sp, #0]
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	2180      	movs	r1, #128	; 0x80
 8007a30:	68f8      	ldr	r0, [r7, #12]
 8007a32:	f000 fb1f 	bl	8008074 <UART_WaitOnFlagUntilTimeout>
 8007a36:	4603      	mov	r3, r0
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d001      	beq.n	8007a40 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007a3c:	2303      	movs	r3, #3
 8007a3e:	e036      	b.n	8007aae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007a40:	69fb      	ldr	r3, [r7, #28]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d10b      	bne.n	8007a5e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a46:	69bb      	ldr	r3, [r7, #24]
 8007a48:	881b      	ldrh	r3, [r3, #0]
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007a56:	69bb      	ldr	r3, [r7, #24]
 8007a58:	3302      	adds	r3, #2
 8007a5a:	61bb      	str	r3, [r7, #24]
 8007a5c:	e007      	b.n	8007a6e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007a5e:	69fb      	ldr	r3, [r7, #28]
 8007a60:	781a      	ldrb	r2, [r3, #0]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	3b01      	subs	r3, #1
 8007a76:	b29a      	uxth	r2, r3
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d1cf      	bne.n	8007a26 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	9300      	str	r3, [sp, #0]
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	2140      	movs	r1, #64	; 0x40
 8007a90:	68f8      	ldr	r0, [r7, #12]
 8007a92:	f000 faef 	bl	8008074 <UART_WaitOnFlagUntilTimeout>
 8007a96:	4603      	mov	r3, r0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d001      	beq.n	8007aa0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	e006      	b.n	8007aae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2220      	movs	r2, #32
 8007aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	e000      	b.n	8007aae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007aac:	2302      	movs	r3, #2
  }
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3720      	adds	r7, #32
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b084      	sub	sp, #16
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	60f8      	str	r0, [r7, #12]
 8007abe:	60b9      	str	r1, [r7, #8]
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	2b20      	cmp	r3, #32
 8007ace:	d11d      	bne.n	8007b0c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d002      	beq.n	8007adc <HAL_UART_Receive_IT+0x26>
 8007ad6:	88fb      	ldrh	r3, [r7, #6]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d101      	bne.n	8007ae0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	e016      	b.n	8007b0e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d101      	bne.n	8007aee <HAL_UART_Receive_IT+0x38>
 8007aea:	2302      	movs	r3, #2
 8007aec:	e00f      	b.n	8007b0e <HAL_UART_Receive_IT+0x58>
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2201      	movs	r2, #1
 8007af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2200      	movs	r2, #0
 8007afa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007afc:	88fb      	ldrh	r3, [r7, #6]
 8007afe:	461a      	mov	r2, r3
 8007b00:	68b9      	ldr	r1, [r7, #8]
 8007b02:	68f8      	ldr	r0, [r7, #12]
 8007b04:	f000 fb24 	bl	8008150 <UART_Start_Receive_IT>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	e000      	b.n	8007b0e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007b0c:	2302      	movs	r3, #2
  }
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3710      	adds	r7, #16
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
	...

08007b18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b0ba      	sub	sp, #232	; 0xe8
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	695b      	ldr	r3, [r3, #20]
 8007b3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007b44:	2300      	movs	r3, #0
 8007b46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b4e:	f003 030f 	and.w	r3, r3, #15
 8007b52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007b56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d10f      	bne.n	8007b7e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b62:	f003 0320 	and.w	r3, r3, #32
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d009      	beq.n	8007b7e <HAL_UART_IRQHandler+0x66>
 8007b6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b6e:	f003 0320 	and.w	r3, r3, #32
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d003      	beq.n	8007b7e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 fc07 	bl	800838a <UART_Receive_IT>
      return;
 8007b7c:	e256      	b.n	800802c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007b7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	f000 80de 	beq.w	8007d44 <HAL_UART_IRQHandler+0x22c>
 8007b88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b8c:	f003 0301 	and.w	r3, r3, #1
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d106      	bne.n	8007ba2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b98:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	f000 80d1 	beq.w	8007d44 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ba6:	f003 0301 	and.w	r3, r3, #1
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d00b      	beq.n	8007bc6 <HAL_UART_IRQHandler+0xae>
 8007bae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d005      	beq.n	8007bc6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bbe:	f043 0201 	orr.w	r2, r3, #1
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bca:	f003 0304 	and.w	r3, r3, #4
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d00b      	beq.n	8007bea <HAL_UART_IRQHandler+0xd2>
 8007bd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bd6:	f003 0301 	and.w	r3, r3, #1
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d005      	beq.n	8007bea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007be2:	f043 0202 	orr.w	r2, r3, #2
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bee:	f003 0302 	and.w	r3, r3, #2
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00b      	beq.n	8007c0e <HAL_UART_IRQHandler+0xf6>
 8007bf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bfa:	f003 0301 	and.w	r3, r3, #1
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d005      	beq.n	8007c0e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c06:	f043 0204 	orr.w	r2, r3, #4
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c12:	f003 0308 	and.w	r3, r3, #8
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d011      	beq.n	8007c3e <HAL_UART_IRQHandler+0x126>
 8007c1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c1e:	f003 0320 	and.w	r3, r3, #32
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d105      	bne.n	8007c32 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007c26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c2a:	f003 0301 	and.w	r3, r3, #1
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d005      	beq.n	8007c3e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c36:	f043 0208 	orr.w	r2, r3, #8
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	f000 81ed 	beq.w	8008022 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c4c:	f003 0320 	and.w	r3, r3, #32
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d008      	beq.n	8007c66 <HAL_UART_IRQHandler+0x14e>
 8007c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c58:	f003 0320 	and.w	r3, r3, #32
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d002      	beq.n	8007c66 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 fb92 	bl	800838a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	695b      	ldr	r3, [r3, #20]
 8007c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c70:	2b40      	cmp	r3, #64	; 0x40
 8007c72:	bf0c      	ite	eq
 8007c74:	2301      	moveq	r3, #1
 8007c76:	2300      	movne	r3, #0
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c82:	f003 0308 	and.w	r3, r3, #8
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d103      	bne.n	8007c92 <HAL_UART_IRQHandler+0x17a>
 8007c8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d04f      	beq.n	8007d32 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 fa9a 	bl	80081cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	695b      	ldr	r3, [r3, #20]
 8007c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ca2:	2b40      	cmp	r3, #64	; 0x40
 8007ca4:	d141      	bne.n	8007d2a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	3314      	adds	r3, #20
 8007cac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007cb4:	e853 3f00 	ldrex	r3, [r3]
 8007cb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007cbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007cc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	3314      	adds	r3, #20
 8007cce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007cd2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007cd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cda:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007cde:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007ce2:	e841 2300 	strex	r3, r2, [r1]
 8007ce6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007cea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d1d9      	bne.n	8007ca6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d013      	beq.n	8007d22 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cfe:	4a7d      	ldr	r2, [pc, #500]	; (8007ef4 <HAL_UART_IRQHandler+0x3dc>)
 8007d00:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d06:	4618      	mov	r0, r3
 8007d08:	f7fb fd3a 	bl	8003780 <HAL_DMA_Abort_IT>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d016      	beq.n	8007d40 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007d1c:	4610      	mov	r0, r2
 8007d1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d20:	e00e      	b.n	8007d40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 f990 	bl	8008048 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d28:	e00a      	b.n	8007d40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 f98c 	bl	8008048 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d30:	e006      	b.n	8007d40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 f988 	bl	8008048 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007d3e:	e170      	b.n	8008022 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d40:	bf00      	nop
    return;
 8007d42:	e16e      	b.n	8008022 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	f040 814a 	bne.w	8007fe2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d52:	f003 0310 	and.w	r3, r3, #16
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	f000 8143 	beq.w	8007fe2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d60:	f003 0310 	and.w	r3, r3, #16
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	f000 813c 	beq.w	8007fe2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	60bb      	str	r3, [r7, #8]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	60bb      	str	r3, [r7, #8]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	60bb      	str	r3, [r7, #8]
 8007d7e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	695b      	ldr	r3, [r3, #20]
 8007d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d8a:	2b40      	cmp	r3, #64	; 0x40
 8007d8c:	f040 80b4 	bne.w	8007ef8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007d9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	f000 8140 	beq.w	8008026 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007daa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007dae:	429a      	cmp	r2, r3
 8007db0:	f080 8139 	bcs.w	8008026 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007dba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dc0:	69db      	ldr	r3, [r3, #28]
 8007dc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dc6:	f000 8088 	beq.w	8007eda <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	330c      	adds	r3, #12
 8007dd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007dd8:	e853 3f00 	ldrex	r3, [r3]
 8007ddc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007de0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007de4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007de8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	330c      	adds	r3, #12
 8007df2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007df6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007dfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dfe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007e02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007e06:	e841 2300 	strex	r3, r2, [r1]
 8007e0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007e0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d1d9      	bne.n	8007dca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	3314      	adds	r3, #20
 8007e1c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e20:	e853 3f00 	ldrex	r3, [r3]
 8007e24:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007e26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e28:	f023 0301 	bic.w	r3, r3, #1
 8007e2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	3314      	adds	r3, #20
 8007e36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007e3a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007e3e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e40:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007e42:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007e46:	e841 2300 	strex	r3, r2, [r1]
 8007e4a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007e4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d1e1      	bne.n	8007e16 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	3314      	adds	r3, #20
 8007e58:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e5c:	e853 3f00 	ldrex	r3, [r3]
 8007e60:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007e62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	3314      	adds	r3, #20
 8007e72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007e76:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007e78:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e7a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007e7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007e7e:	e841 2300 	strex	r3, r2, [r1]
 8007e82:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007e84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d1e3      	bne.n	8007e52 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2220      	movs	r2, #32
 8007e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2200      	movs	r2, #0
 8007e96:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	330c      	adds	r3, #12
 8007e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ea2:	e853 3f00 	ldrex	r3, [r3]
 8007ea6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007ea8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007eaa:	f023 0310 	bic.w	r3, r3, #16
 8007eae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	330c      	adds	r3, #12
 8007eb8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007ebc:	65ba      	str	r2, [r7, #88]	; 0x58
 8007ebe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007ec2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ec4:	e841 2300 	strex	r3, r2, [r1]
 8007ec8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007eca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d1e3      	bne.n	8007e98 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f7fb fbe3 	bl	80036a0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	1ad3      	subs	r3, r2, r3
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	4619      	mov	r1, r3
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 f8b6 	bl	800805c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007ef0:	e099      	b.n	8008026 <HAL_UART_IRQHandler+0x50e>
 8007ef2:	bf00      	nop
 8007ef4:	08008293 	.word	0x08008293
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	1ad3      	subs	r3, r2, r3
 8007f04:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	f000 808b 	beq.w	800802a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007f14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	f000 8086 	beq.w	800802a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	330c      	adds	r3, #12
 8007f24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f28:	e853 3f00 	ldrex	r3, [r3]
 8007f2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	330c      	adds	r3, #12
 8007f3e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007f42:	647a      	str	r2, [r7, #68]	; 0x44
 8007f44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f4a:	e841 2300 	strex	r3, r2, [r1]
 8007f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d1e3      	bne.n	8007f1e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	3314      	adds	r3, #20
 8007f5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f60:	e853 3f00 	ldrex	r3, [r3]
 8007f64:	623b      	str	r3, [r7, #32]
   return(result);
 8007f66:	6a3b      	ldr	r3, [r7, #32]
 8007f68:	f023 0301 	bic.w	r3, r3, #1
 8007f6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	3314      	adds	r3, #20
 8007f76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007f7a:	633a      	str	r2, [r7, #48]	; 0x30
 8007f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f82:	e841 2300 	strex	r3, r2, [r1]
 8007f86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d1e3      	bne.n	8007f56 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2220      	movs	r2, #32
 8007f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	330c      	adds	r3, #12
 8007fa2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	e853 3f00 	ldrex	r3, [r3]
 8007faa:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f023 0310 	bic.w	r3, r3, #16
 8007fb2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	330c      	adds	r3, #12
 8007fbc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007fc0:	61fa      	str	r2, [r7, #28]
 8007fc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc4:	69b9      	ldr	r1, [r7, #24]
 8007fc6:	69fa      	ldr	r2, [r7, #28]
 8007fc8:	e841 2300 	strex	r3, r2, [r1]
 8007fcc:	617b      	str	r3, [r7, #20]
   return(result);
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d1e3      	bne.n	8007f9c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007fd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007fd8:	4619      	mov	r1, r3
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 f83e 	bl	800805c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007fe0:	e023      	b.n	800802a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d009      	beq.n	8008002 <HAL_UART_IRQHandler+0x4ea>
 8007fee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d003      	beq.n	8008002 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 f95d 	bl	80082ba <UART_Transmit_IT>
    return;
 8008000:	e014      	b.n	800802c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00e      	beq.n	800802c <HAL_UART_IRQHandler+0x514>
 800800e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008016:	2b00      	cmp	r3, #0
 8008018:	d008      	beq.n	800802c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 f99d 	bl	800835a <UART_EndTransmit_IT>
    return;
 8008020:	e004      	b.n	800802c <HAL_UART_IRQHandler+0x514>
    return;
 8008022:	bf00      	nop
 8008024:	e002      	b.n	800802c <HAL_UART_IRQHandler+0x514>
      return;
 8008026:	bf00      	nop
 8008028:	e000      	b.n	800802c <HAL_UART_IRQHandler+0x514>
      return;
 800802a:	bf00      	nop
  }
}
 800802c:	37e8      	adds	r7, #232	; 0xe8
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop

08008034 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008034:	b480      	push	{r7}
 8008036:	b083      	sub	sp, #12
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800803c:	bf00      	nop
 800803e:	370c      	adds	r7, #12
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr

08008048 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008048:	b480      	push	{r7}
 800804a:	b083      	sub	sp, #12
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008050:	bf00      	nop
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	460b      	mov	r3, r1
 8008066:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008068:	bf00      	nop
 800806a:	370c      	adds	r7, #12
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b090      	sub	sp, #64	; 0x40
 8008078:	af00      	add	r7, sp, #0
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	603b      	str	r3, [r7, #0]
 8008080:	4613      	mov	r3, r2
 8008082:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008084:	e050      	b.n	8008128 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008086:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800808c:	d04c      	beq.n	8008128 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800808e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008090:	2b00      	cmp	r3, #0
 8008092:	d007      	beq.n	80080a4 <UART_WaitOnFlagUntilTimeout+0x30>
 8008094:	f7fa fd66 	bl	8002b64 <HAL_GetTick>
 8008098:	4602      	mov	r2, r0
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	1ad3      	subs	r3, r2, r3
 800809e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d241      	bcs.n	8008128 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	330c      	adds	r3, #12
 80080aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ae:	e853 3f00 	ldrex	r3, [r3]
 80080b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80080ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	330c      	adds	r3, #12
 80080c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80080c4:	637a      	str	r2, [r7, #52]	; 0x34
 80080c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80080ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080cc:	e841 2300 	strex	r3, r2, [r1]
 80080d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80080d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d1e5      	bne.n	80080a4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	3314      	adds	r3, #20
 80080de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	e853 3f00 	ldrex	r3, [r3]
 80080e6:	613b      	str	r3, [r7, #16]
   return(result);
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	f023 0301 	bic.w	r3, r3, #1
 80080ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	3314      	adds	r3, #20
 80080f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080f8:	623a      	str	r2, [r7, #32]
 80080fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080fc:	69f9      	ldr	r1, [r7, #28]
 80080fe:	6a3a      	ldr	r2, [r7, #32]
 8008100:	e841 2300 	strex	r3, r2, [r1]
 8008104:	61bb      	str	r3, [r7, #24]
   return(result);
 8008106:	69bb      	ldr	r3, [r7, #24]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d1e5      	bne.n	80080d8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2220      	movs	r2, #32
 8008110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2220      	movs	r2, #32
 8008118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2200      	movs	r2, #0
 8008120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008124:	2303      	movs	r3, #3
 8008126:	e00f      	b.n	8008148 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	4013      	ands	r3, r2
 8008132:	68ba      	ldr	r2, [r7, #8]
 8008134:	429a      	cmp	r2, r3
 8008136:	bf0c      	ite	eq
 8008138:	2301      	moveq	r3, #1
 800813a:	2300      	movne	r3, #0
 800813c:	b2db      	uxtb	r3, r3
 800813e:	461a      	mov	r2, r3
 8008140:	79fb      	ldrb	r3, [r7, #7]
 8008142:	429a      	cmp	r2, r3
 8008144:	d09f      	beq.n	8008086 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008146:	2300      	movs	r3, #0
}
 8008148:	4618      	mov	r0, r3
 800814a:	3740      	adds	r7, #64	; 0x40
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008150:	b480      	push	{r7}
 8008152:	b085      	sub	sp, #20
 8008154:	af00      	add	r7, sp, #0
 8008156:	60f8      	str	r0, [r7, #12]
 8008158:	60b9      	str	r1, [r7, #8]
 800815a:	4613      	mov	r3, r2
 800815c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	68ba      	ldr	r2, [r7, #8]
 8008162:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	88fa      	ldrh	r2, [r7, #6]
 8008168:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	88fa      	ldrh	r2, [r7, #6]
 800816e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2200      	movs	r2, #0
 8008174:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2222      	movs	r2, #34	; 0x22
 800817a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2200      	movs	r2, #0
 8008182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	691b      	ldr	r3, [r3, #16]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d007      	beq.n	800819e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	68da      	ldr	r2, [r3, #12]
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800819c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	695a      	ldr	r2, [r3, #20]
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f042 0201 	orr.w	r2, r2, #1
 80081ac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	68da      	ldr	r2, [r3, #12]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f042 0220 	orr.w	r2, r2, #32
 80081bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80081be:	2300      	movs	r3, #0
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3714      	adds	r7, #20
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr

080081cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b095      	sub	sp, #84	; 0x54
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	330c      	adds	r3, #12
 80081da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081de:	e853 3f00 	ldrex	r3, [r3]
 80081e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80081e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80081ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	330c      	adds	r3, #12
 80081f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80081f4:	643a      	str	r2, [r7, #64]	; 0x40
 80081f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80081fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80081fc:	e841 2300 	strex	r3, r2, [r1]
 8008200:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008204:	2b00      	cmp	r3, #0
 8008206:	d1e5      	bne.n	80081d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	3314      	adds	r3, #20
 800820e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008210:	6a3b      	ldr	r3, [r7, #32]
 8008212:	e853 3f00 	ldrex	r3, [r3]
 8008216:	61fb      	str	r3, [r7, #28]
   return(result);
 8008218:	69fb      	ldr	r3, [r7, #28]
 800821a:	f023 0301 	bic.w	r3, r3, #1
 800821e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	3314      	adds	r3, #20
 8008226:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008228:	62fa      	str	r2, [r7, #44]	; 0x2c
 800822a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800822c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800822e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008230:	e841 2300 	strex	r3, r2, [r1]
 8008234:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008238:	2b00      	cmp	r3, #0
 800823a:	d1e5      	bne.n	8008208 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008240:	2b01      	cmp	r3, #1
 8008242:	d119      	bne.n	8008278 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	330c      	adds	r3, #12
 800824a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	e853 3f00 	ldrex	r3, [r3]
 8008252:	60bb      	str	r3, [r7, #8]
   return(result);
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	f023 0310 	bic.w	r3, r3, #16
 800825a:	647b      	str	r3, [r7, #68]	; 0x44
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	330c      	adds	r3, #12
 8008262:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008264:	61ba      	str	r2, [r7, #24]
 8008266:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008268:	6979      	ldr	r1, [r7, #20]
 800826a:	69ba      	ldr	r2, [r7, #24]
 800826c:	e841 2300 	strex	r3, r2, [r1]
 8008270:	613b      	str	r3, [r7, #16]
   return(result);
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d1e5      	bne.n	8008244 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2220      	movs	r2, #32
 800827c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008286:	bf00      	nop
 8008288:	3754      	adds	r7, #84	; 0x54
 800828a:	46bd      	mov	sp, r7
 800828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008290:	4770      	bx	lr

08008292 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008292:	b580      	push	{r7, lr}
 8008294:	b084      	sub	sp, #16
 8008296:	af00      	add	r7, sp, #0
 8008298:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800829e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2200      	movs	r2, #0
 80082a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2200      	movs	r2, #0
 80082aa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80082ac:	68f8      	ldr	r0, [r7, #12]
 80082ae:	f7ff fecb 	bl	8008048 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082b2:	bf00      	nop
 80082b4:	3710      	adds	r7, #16
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}

080082ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80082ba:	b480      	push	{r7}
 80082bc:	b085      	sub	sp, #20
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	2b21      	cmp	r3, #33	; 0x21
 80082cc:	d13e      	bne.n	800834c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	689b      	ldr	r3, [r3, #8]
 80082d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082d6:	d114      	bne.n	8008302 <UART_Transmit_IT+0x48>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	691b      	ldr	r3, [r3, #16]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d110      	bne.n	8008302 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6a1b      	ldr	r3, [r3, #32]
 80082e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	881b      	ldrh	r3, [r3, #0]
 80082ea:	461a      	mov	r2, r3
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80082f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6a1b      	ldr	r3, [r3, #32]
 80082fa:	1c9a      	adds	r2, r3, #2
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	621a      	str	r2, [r3, #32]
 8008300:	e008      	b.n	8008314 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6a1b      	ldr	r3, [r3, #32]
 8008306:	1c59      	adds	r1, r3, #1
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	6211      	str	r1, [r2, #32]
 800830c:	781a      	ldrb	r2, [r3, #0]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008318:	b29b      	uxth	r3, r3
 800831a:	3b01      	subs	r3, #1
 800831c:	b29b      	uxth	r3, r3
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	4619      	mov	r1, r3
 8008322:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008324:	2b00      	cmp	r3, #0
 8008326:	d10f      	bne.n	8008348 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	68da      	ldr	r2, [r3, #12]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008336:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	68da      	ldr	r2, [r3, #12]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008346:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008348:	2300      	movs	r3, #0
 800834a:	e000      	b.n	800834e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800834c:	2302      	movs	r3, #2
  }
}
 800834e:	4618      	mov	r0, r3
 8008350:	3714      	adds	r7, #20
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr

0800835a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b082      	sub	sp, #8
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	68da      	ldr	r2, [r3, #12]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008370:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2220      	movs	r2, #32
 8008376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f7ff fe5a 	bl	8008034 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008380:	2300      	movs	r3, #0
}
 8008382:	4618      	mov	r0, r3
 8008384:	3708      	adds	r7, #8
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}

0800838a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800838a:	b580      	push	{r7, lr}
 800838c:	b08c      	sub	sp, #48	; 0x30
 800838e:	af00      	add	r7, sp, #0
 8008390:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008398:	b2db      	uxtb	r3, r3
 800839a:	2b22      	cmp	r3, #34	; 0x22
 800839c:	f040 80ab 	bne.w	80084f6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083a8:	d117      	bne.n	80083da <UART_Receive_IT+0x50>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	691b      	ldr	r3, [r3, #16]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d113      	bne.n	80083da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80083b2:	2300      	movs	r3, #0
 80083b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083c8:	b29a      	uxth	r2, r3
 80083ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083d2:	1c9a      	adds	r2, r3, #2
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	629a      	str	r2, [r3, #40]	; 0x28
 80083d8:	e026      	b.n	8008428 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083de:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80083e0:	2300      	movs	r3, #0
 80083e2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083ec:	d007      	beq.n	80083fe <UART_Receive_IT+0x74>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d10a      	bne.n	800840c <UART_Receive_IT+0x82>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	691b      	ldr	r3, [r3, #16]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d106      	bne.n	800840c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	b2da      	uxtb	r2, r3
 8008406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008408:	701a      	strb	r2, [r3, #0]
 800840a:	e008      	b.n	800841e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	b2db      	uxtb	r3, r3
 8008414:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008418:	b2da      	uxtb	r2, r3
 800841a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008422:	1c5a      	adds	r2, r3, #1
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800842c:	b29b      	uxth	r3, r3
 800842e:	3b01      	subs	r3, #1
 8008430:	b29b      	uxth	r3, r3
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	4619      	mov	r1, r3
 8008436:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008438:	2b00      	cmp	r3, #0
 800843a:	d15a      	bne.n	80084f2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	68da      	ldr	r2, [r3, #12]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f022 0220 	bic.w	r2, r2, #32
 800844a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	68da      	ldr	r2, [r3, #12]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800845a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	695a      	ldr	r2, [r3, #20]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f022 0201 	bic.w	r2, r2, #1
 800846a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2220      	movs	r2, #32
 8008470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008478:	2b01      	cmp	r3, #1
 800847a:	d135      	bne.n	80084e8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2200      	movs	r2, #0
 8008480:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	330c      	adds	r3, #12
 8008488:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	e853 3f00 	ldrex	r3, [r3]
 8008490:	613b      	str	r3, [r7, #16]
   return(result);
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	f023 0310 	bic.w	r3, r3, #16
 8008498:	627b      	str	r3, [r7, #36]	; 0x24
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	330c      	adds	r3, #12
 80084a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084a2:	623a      	str	r2, [r7, #32]
 80084a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a6:	69f9      	ldr	r1, [r7, #28]
 80084a8:	6a3a      	ldr	r2, [r7, #32]
 80084aa:	e841 2300 	strex	r3, r2, [r1]
 80084ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80084b0:	69bb      	ldr	r3, [r7, #24]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d1e5      	bne.n	8008482 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f003 0310 	and.w	r3, r3, #16
 80084c0:	2b10      	cmp	r3, #16
 80084c2:	d10a      	bne.n	80084da <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80084c4:	2300      	movs	r3, #0
 80084c6:	60fb      	str	r3, [r7, #12]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	60fb      	str	r3, [r7, #12]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	60fb      	str	r3, [r7, #12]
 80084d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80084de:	4619      	mov	r1, r3
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f7ff fdbb 	bl	800805c <HAL_UARTEx_RxEventCallback>
 80084e6:	e002      	b.n	80084ee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f7fa fa23 	bl	8002934 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80084ee:	2300      	movs	r3, #0
 80084f0:	e002      	b.n	80084f8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80084f2:	2300      	movs	r3, #0
 80084f4:	e000      	b.n	80084f8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80084f6:	2302      	movs	r3, #2
  }
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3730      	adds	r7, #48	; 0x30
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008500:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008504:	b0c0      	sub	sp, #256	; 0x100
 8008506:	af00      	add	r7, sp, #0
 8008508:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800850c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	691b      	ldr	r3, [r3, #16]
 8008514:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800851c:	68d9      	ldr	r1, [r3, #12]
 800851e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	ea40 0301 	orr.w	r3, r0, r1
 8008528:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800852a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800852e:	689a      	ldr	r2, [r3, #8]
 8008530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008534:	691b      	ldr	r3, [r3, #16]
 8008536:	431a      	orrs	r2, r3
 8008538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800853c:	695b      	ldr	r3, [r3, #20]
 800853e:	431a      	orrs	r2, r3
 8008540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008544:	69db      	ldr	r3, [r3, #28]
 8008546:	4313      	orrs	r3, r2
 8008548:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800854c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	68db      	ldr	r3, [r3, #12]
 8008554:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008558:	f021 010c 	bic.w	r1, r1, #12
 800855c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008566:	430b      	orrs	r3, r1
 8008568:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800856a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	695b      	ldr	r3, [r3, #20]
 8008572:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800857a:	6999      	ldr	r1, [r3, #24]
 800857c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	ea40 0301 	orr.w	r3, r0, r1
 8008586:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	4b8f      	ldr	r3, [pc, #572]	; (80087cc <UART_SetConfig+0x2cc>)
 8008590:	429a      	cmp	r2, r3
 8008592:	d005      	beq.n	80085a0 <UART_SetConfig+0xa0>
 8008594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008598:	681a      	ldr	r2, [r3, #0]
 800859a:	4b8d      	ldr	r3, [pc, #564]	; (80087d0 <UART_SetConfig+0x2d0>)
 800859c:	429a      	cmp	r2, r3
 800859e:	d104      	bne.n	80085aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80085a0:	f7fd f8b0 	bl	8005704 <HAL_RCC_GetPCLK2Freq>
 80085a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80085a8:	e003      	b.n	80085b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80085aa:	f7fd f897 	bl	80056dc <HAL_RCC_GetPCLK1Freq>
 80085ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085b6:	69db      	ldr	r3, [r3, #28]
 80085b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085bc:	f040 810c 	bne.w	80087d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80085c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085c4:	2200      	movs	r2, #0
 80085c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80085ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80085ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80085d2:	4622      	mov	r2, r4
 80085d4:	462b      	mov	r3, r5
 80085d6:	1891      	adds	r1, r2, r2
 80085d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80085da:	415b      	adcs	r3, r3
 80085dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80085de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80085e2:	4621      	mov	r1, r4
 80085e4:	eb12 0801 	adds.w	r8, r2, r1
 80085e8:	4629      	mov	r1, r5
 80085ea:	eb43 0901 	adc.w	r9, r3, r1
 80085ee:	f04f 0200 	mov.w	r2, #0
 80085f2:	f04f 0300 	mov.w	r3, #0
 80085f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80085fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80085fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008602:	4690      	mov	r8, r2
 8008604:	4699      	mov	r9, r3
 8008606:	4623      	mov	r3, r4
 8008608:	eb18 0303 	adds.w	r3, r8, r3
 800860c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008610:	462b      	mov	r3, r5
 8008612:	eb49 0303 	adc.w	r3, r9, r3
 8008616:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800861a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	2200      	movs	r2, #0
 8008622:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008626:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800862a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800862e:	460b      	mov	r3, r1
 8008630:	18db      	adds	r3, r3, r3
 8008632:	653b      	str	r3, [r7, #80]	; 0x50
 8008634:	4613      	mov	r3, r2
 8008636:	eb42 0303 	adc.w	r3, r2, r3
 800863a:	657b      	str	r3, [r7, #84]	; 0x54
 800863c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008640:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008644:	f7f7 fe24 	bl	8000290 <__aeabi_uldivmod>
 8008648:	4602      	mov	r2, r0
 800864a:	460b      	mov	r3, r1
 800864c:	4b61      	ldr	r3, [pc, #388]	; (80087d4 <UART_SetConfig+0x2d4>)
 800864e:	fba3 2302 	umull	r2, r3, r3, r2
 8008652:	095b      	lsrs	r3, r3, #5
 8008654:	011c      	lsls	r4, r3, #4
 8008656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800865a:	2200      	movs	r2, #0
 800865c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008660:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008664:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008668:	4642      	mov	r2, r8
 800866a:	464b      	mov	r3, r9
 800866c:	1891      	adds	r1, r2, r2
 800866e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008670:	415b      	adcs	r3, r3
 8008672:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008674:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008678:	4641      	mov	r1, r8
 800867a:	eb12 0a01 	adds.w	sl, r2, r1
 800867e:	4649      	mov	r1, r9
 8008680:	eb43 0b01 	adc.w	fp, r3, r1
 8008684:	f04f 0200 	mov.w	r2, #0
 8008688:	f04f 0300 	mov.w	r3, #0
 800868c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008690:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008694:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008698:	4692      	mov	sl, r2
 800869a:	469b      	mov	fp, r3
 800869c:	4643      	mov	r3, r8
 800869e:	eb1a 0303 	adds.w	r3, sl, r3
 80086a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80086a6:	464b      	mov	r3, r9
 80086a8:	eb4b 0303 	adc.w	r3, fp, r3
 80086ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80086b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	2200      	movs	r2, #0
 80086b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80086bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80086c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80086c4:	460b      	mov	r3, r1
 80086c6:	18db      	adds	r3, r3, r3
 80086c8:	643b      	str	r3, [r7, #64]	; 0x40
 80086ca:	4613      	mov	r3, r2
 80086cc:	eb42 0303 	adc.w	r3, r2, r3
 80086d0:	647b      	str	r3, [r7, #68]	; 0x44
 80086d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80086d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80086da:	f7f7 fdd9 	bl	8000290 <__aeabi_uldivmod>
 80086de:	4602      	mov	r2, r0
 80086e0:	460b      	mov	r3, r1
 80086e2:	4611      	mov	r1, r2
 80086e4:	4b3b      	ldr	r3, [pc, #236]	; (80087d4 <UART_SetConfig+0x2d4>)
 80086e6:	fba3 2301 	umull	r2, r3, r3, r1
 80086ea:	095b      	lsrs	r3, r3, #5
 80086ec:	2264      	movs	r2, #100	; 0x64
 80086ee:	fb02 f303 	mul.w	r3, r2, r3
 80086f2:	1acb      	subs	r3, r1, r3
 80086f4:	00db      	lsls	r3, r3, #3
 80086f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80086fa:	4b36      	ldr	r3, [pc, #216]	; (80087d4 <UART_SetConfig+0x2d4>)
 80086fc:	fba3 2302 	umull	r2, r3, r3, r2
 8008700:	095b      	lsrs	r3, r3, #5
 8008702:	005b      	lsls	r3, r3, #1
 8008704:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008708:	441c      	add	r4, r3
 800870a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800870e:	2200      	movs	r2, #0
 8008710:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008714:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008718:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800871c:	4642      	mov	r2, r8
 800871e:	464b      	mov	r3, r9
 8008720:	1891      	adds	r1, r2, r2
 8008722:	63b9      	str	r1, [r7, #56]	; 0x38
 8008724:	415b      	adcs	r3, r3
 8008726:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008728:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800872c:	4641      	mov	r1, r8
 800872e:	1851      	adds	r1, r2, r1
 8008730:	6339      	str	r1, [r7, #48]	; 0x30
 8008732:	4649      	mov	r1, r9
 8008734:	414b      	adcs	r3, r1
 8008736:	637b      	str	r3, [r7, #52]	; 0x34
 8008738:	f04f 0200 	mov.w	r2, #0
 800873c:	f04f 0300 	mov.w	r3, #0
 8008740:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008744:	4659      	mov	r1, fp
 8008746:	00cb      	lsls	r3, r1, #3
 8008748:	4651      	mov	r1, sl
 800874a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800874e:	4651      	mov	r1, sl
 8008750:	00ca      	lsls	r2, r1, #3
 8008752:	4610      	mov	r0, r2
 8008754:	4619      	mov	r1, r3
 8008756:	4603      	mov	r3, r0
 8008758:	4642      	mov	r2, r8
 800875a:	189b      	adds	r3, r3, r2
 800875c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008760:	464b      	mov	r3, r9
 8008762:	460a      	mov	r2, r1
 8008764:	eb42 0303 	adc.w	r3, r2, r3
 8008768:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800876c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	2200      	movs	r2, #0
 8008774:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008778:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800877c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008780:	460b      	mov	r3, r1
 8008782:	18db      	adds	r3, r3, r3
 8008784:	62bb      	str	r3, [r7, #40]	; 0x28
 8008786:	4613      	mov	r3, r2
 8008788:	eb42 0303 	adc.w	r3, r2, r3
 800878c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800878e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008792:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008796:	f7f7 fd7b 	bl	8000290 <__aeabi_uldivmod>
 800879a:	4602      	mov	r2, r0
 800879c:	460b      	mov	r3, r1
 800879e:	4b0d      	ldr	r3, [pc, #52]	; (80087d4 <UART_SetConfig+0x2d4>)
 80087a0:	fba3 1302 	umull	r1, r3, r3, r2
 80087a4:	095b      	lsrs	r3, r3, #5
 80087a6:	2164      	movs	r1, #100	; 0x64
 80087a8:	fb01 f303 	mul.w	r3, r1, r3
 80087ac:	1ad3      	subs	r3, r2, r3
 80087ae:	00db      	lsls	r3, r3, #3
 80087b0:	3332      	adds	r3, #50	; 0x32
 80087b2:	4a08      	ldr	r2, [pc, #32]	; (80087d4 <UART_SetConfig+0x2d4>)
 80087b4:	fba2 2303 	umull	r2, r3, r2, r3
 80087b8:	095b      	lsrs	r3, r3, #5
 80087ba:	f003 0207 	and.w	r2, r3, #7
 80087be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4422      	add	r2, r4
 80087c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80087c8:	e105      	b.n	80089d6 <UART_SetConfig+0x4d6>
 80087ca:	bf00      	nop
 80087cc:	40011000 	.word	0x40011000
 80087d0:	40011400 	.word	0x40011400
 80087d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80087d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087dc:	2200      	movs	r2, #0
 80087de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80087e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80087e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80087ea:	4642      	mov	r2, r8
 80087ec:	464b      	mov	r3, r9
 80087ee:	1891      	adds	r1, r2, r2
 80087f0:	6239      	str	r1, [r7, #32]
 80087f2:	415b      	adcs	r3, r3
 80087f4:	627b      	str	r3, [r7, #36]	; 0x24
 80087f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80087fa:	4641      	mov	r1, r8
 80087fc:	1854      	adds	r4, r2, r1
 80087fe:	4649      	mov	r1, r9
 8008800:	eb43 0501 	adc.w	r5, r3, r1
 8008804:	f04f 0200 	mov.w	r2, #0
 8008808:	f04f 0300 	mov.w	r3, #0
 800880c:	00eb      	lsls	r3, r5, #3
 800880e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008812:	00e2      	lsls	r2, r4, #3
 8008814:	4614      	mov	r4, r2
 8008816:	461d      	mov	r5, r3
 8008818:	4643      	mov	r3, r8
 800881a:	18e3      	adds	r3, r4, r3
 800881c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008820:	464b      	mov	r3, r9
 8008822:	eb45 0303 	adc.w	r3, r5, r3
 8008826:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800882a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	2200      	movs	r2, #0
 8008832:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008836:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800883a:	f04f 0200 	mov.w	r2, #0
 800883e:	f04f 0300 	mov.w	r3, #0
 8008842:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008846:	4629      	mov	r1, r5
 8008848:	008b      	lsls	r3, r1, #2
 800884a:	4621      	mov	r1, r4
 800884c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008850:	4621      	mov	r1, r4
 8008852:	008a      	lsls	r2, r1, #2
 8008854:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008858:	f7f7 fd1a 	bl	8000290 <__aeabi_uldivmod>
 800885c:	4602      	mov	r2, r0
 800885e:	460b      	mov	r3, r1
 8008860:	4b60      	ldr	r3, [pc, #384]	; (80089e4 <UART_SetConfig+0x4e4>)
 8008862:	fba3 2302 	umull	r2, r3, r3, r2
 8008866:	095b      	lsrs	r3, r3, #5
 8008868:	011c      	lsls	r4, r3, #4
 800886a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800886e:	2200      	movs	r2, #0
 8008870:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008874:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008878:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800887c:	4642      	mov	r2, r8
 800887e:	464b      	mov	r3, r9
 8008880:	1891      	adds	r1, r2, r2
 8008882:	61b9      	str	r1, [r7, #24]
 8008884:	415b      	adcs	r3, r3
 8008886:	61fb      	str	r3, [r7, #28]
 8008888:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800888c:	4641      	mov	r1, r8
 800888e:	1851      	adds	r1, r2, r1
 8008890:	6139      	str	r1, [r7, #16]
 8008892:	4649      	mov	r1, r9
 8008894:	414b      	adcs	r3, r1
 8008896:	617b      	str	r3, [r7, #20]
 8008898:	f04f 0200 	mov.w	r2, #0
 800889c:	f04f 0300 	mov.w	r3, #0
 80088a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80088a4:	4659      	mov	r1, fp
 80088a6:	00cb      	lsls	r3, r1, #3
 80088a8:	4651      	mov	r1, sl
 80088aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80088ae:	4651      	mov	r1, sl
 80088b0:	00ca      	lsls	r2, r1, #3
 80088b2:	4610      	mov	r0, r2
 80088b4:	4619      	mov	r1, r3
 80088b6:	4603      	mov	r3, r0
 80088b8:	4642      	mov	r2, r8
 80088ba:	189b      	adds	r3, r3, r2
 80088bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80088c0:	464b      	mov	r3, r9
 80088c2:	460a      	mov	r2, r1
 80088c4:	eb42 0303 	adc.w	r3, r2, r3
 80088c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80088cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	2200      	movs	r2, #0
 80088d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80088d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80088d8:	f04f 0200 	mov.w	r2, #0
 80088dc:	f04f 0300 	mov.w	r3, #0
 80088e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80088e4:	4649      	mov	r1, r9
 80088e6:	008b      	lsls	r3, r1, #2
 80088e8:	4641      	mov	r1, r8
 80088ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80088ee:	4641      	mov	r1, r8
 80088f0:	008a      	lsls	r2, r1, #2
 80088f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80088f6:	f7f7 fccb 	bl	8000290 <__aeabi_uldivmod>
 80088fa:	4602      	mov	r2, r0
 80088fc:	460b      	mov	r3, r1
 80088fe:	4b39      	ldr	r3, [pc, #228]	; (80089e4 <UART_SetConfig+0x4e4>)
 8008900:	fba3 1302 	umull	r1, r3, r3, r2
 8008904:	095b      	lsrs	r3, r3, #5
 8008906:	2164      	movs	r1, #100	; 0x64
 8008908:	fb01 f303 	mul.w	r3, r1, r3
 800890c:	1ad3      	subs	r3, r2, r3
 800890e:	011b      	lsls	r3, r3, #4
 8008910:	3332      	adds	r3, #50	; 0x32
 8008912:	4a34      	ldr	r2, [pc, #208]	; (80089e4 <UART_SetConfig+0x4e4>)
 8008914:	fba2 2303 	umull	r2, r3, r2, r3
 8008918:	095b      	lsrs	r3, r3, #5
 800891a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800891e:	441c      	add	r4, r3
 8008920:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008924:	2200      	movs	r2, #0
 8008926:	673b      	str	r3, [r7, #112]	; 0x70
 8008928:	677a      	str	r2, [r7, #116]	; 0x74
 800892a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800892e:	4642      	mov	r2, r8
 8008930:	464b      	mov	r3, r9
 8008932:	1891      	adds	r1, r2, r2
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	415b      	adcs	r3, r3
 8008938:	60fb      	str	r3, [r7, #12]
 800893a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800893e:	4641      	mov	r1, r8
 8008940:	1851      	adds	r1, r2, r1
 8008942:	6039      	str	r1, [r7, #0]
 8008944:	4649      	mov	r1, r9
 8008946:	414b      	adcs	r3, r1
 8008948:	607b      	str	r3, [r7, #4]
 800894a:	f04f 0200 	mov.w	r2, #0
 800894e:	f04f 0300 	mov.w	r3, #0
 8008952:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008956:	4659      	mov	r1, fp
 8008958:	00cb      	lsls	r3, r1, #3
 800895a:	4651      	mov	r1, sl
 800895c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008960:	4651      	mov	r1, sl
 8008962:	00ca      	lsls	r2, r1, #3
 8008964:	4610      	mov	r0, r2
 8008966:	4619      	mov	r1, r3
 8008968:	4603      	mov	r3, r0
 800896a:	4642      	mov	r2, r8
 800896c:	189b      	adds	r3, r3, r2
 800896e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008970:	464b      	mov	r3, r9
 8008972:	460a      	mov	r2, r1
 8008974:	eb42 0303 	adc.w	r3, r2, r3
 8008978:	66fb      	str	r3, [r7, #108]	; 0x6c
 800897a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	2200      	movs	r2, #0
 8008982:	663b      	str	r3, [r7, #96]	; 0x60
 8008984:	667a      	str	r2, [r7, #100]	; 0x64
 8008986:	f04f 0200 	mov.w	r2, #0
 800898a:	f04f 0300 	mov.w	r3, #0
 800898e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008992:	4649      	mov	r1, r9
 8008994:	008b      	lsls	r3, r1, #2
 8008996:	4641      	mov	r1, r8
 8008998:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800899c:	4641      	mov	r1, r8
 800899e:	008a      	lsls	r2, r1, #2
 80089a0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80089a4:	f7f7 fc74 	bl	8000290 <__aeabi_uldivmod>
 80089a8:	4602      	mov	r2, r0
 80089aa:	460b      	mov	r3, r1
 80089ac:	4b0d      	ldr	r3, [pc, #52]	; (80089e4 <UART_SetConfig+0x4e4>)
 80089ae:	fba3 1302 	umull	r1, r3, r3, r2
 80089b2:	095b      	lsrs	r3, r3, #5
 80089b4:	2164      	movs	r1, #100	; 0x64
 80089b6:	fb01 f303 	mul.w	r3, r1, r3
 80089ba:	1ad3      	subs	r3, r2, r3
 80089bc:	011b      	lsls	r3, r3, #4
 80089be:	3332      	adds	r3, #50	; 0x32
 80089c0:	4a08      	ldr	r2, [pc, #32]	; (80089e4 <UART_SetConfig+0x4e4>)
 80089c2:	fba2 2303 	umull	r2, r3, r2, r3
 80089c6:	095b      	lsrs	r3, r3, #5
 80089c8:	f003 020f 	and.w	r2, r3, #15
 80089cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4422      	add	r2, r4
 80089d4:	609a      	str	r2, [r3, #8]
}
 80089d6:	bf00      	nop
 80089d8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80089dc:	46bd      	mov	sp, r7
 80089de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80089e2:	bf00      	nop
 80089e4:	51eb851f 	.word	0x51eb851f

080089e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80089e8:	b084      	sub	sp, #16
 80089ea:	b580      	push	{r7, lr}
 80089ec:	b084      	sub	sp, #16
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
 80089f2:	f107 001c 	add.w	r0, r7, #28
 80089f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80089fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	d122      	bne.n	8008a46 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	68db      	ldr	r3, [r3, #12]
 8008a10:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008a14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	68db      	ldr	r3, [r3, #12]
 8008a20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008a28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d105      	bne.n	8008a3a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	68db      	ldr	r3, [r3, #12]
 8008a32:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 faa2 	bl	8008f84 <USB_CoreReset>
 8008a40:	4603      	mov	r3, r0
 8008a42:	73fb      	strb	r3, [r7, #15]
 8008a44:	e01a      	b.n	8008a7c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	68db      	ldr	r3, [r3, #12]
 8008a4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 fa96 	bl	8008f84 <USB_CoreReset>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008a5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d106      	bne.n	8008a70 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a66:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	639a      	str	r2, [r3, #56]	; 0x38
 8008a6e:	e005      	b.n	8008a7c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a7e:	2b01      	cmp	r3, #1
 8008a80:	d10b      	bne.n	8008a9a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	f043 0206 	orr.w	r2, r3, #6
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	f043 0220 	orr.w	r2, r3, #32
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3710      	adds	r7, #16
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008aa6:	b004      	add	sp, #16
 8008aa8:	4770      	bx	lr

08008aaa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008aaa:	b480      	push	{r7}
 8008aac:	b083      	sub	sp, #12
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	689b      	ldr	r3, [r3, #8]
 8008ab6:	f023 0201 	bic.w	r2, r3, #1
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008abe:	2300      	movs	r3, #0
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	370c      	adds	r7, #12
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr

08008acc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b084      	sub	sp, #16
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008ae8:	78fb      	ldrb	r3, [r7, #3]
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d115      	bne.n	8008b1a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	68db      	ldr	r3, [r3, #12]
 8008af2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008afa:	2001      	movs	r0, #1
 8008afc:	f7fa f83e 	bl	8002b7c <HAL_Delay>
      ms++;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	3301      	adds	r3, #1
 8008b04:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 fa2e 	bl	8008f68 <USB_GetMode>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d01e      	beq.n	8008b50 <USB_SetCurrentMode+0x84>
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2b31      	cmp	r3, #49	; 0x31
 8008b16:	d9f0      	bls.n	8008afa <USB_SetCurrentMode+0x2e>
 8008b18:	e01a      	b.n	8008b50 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008b1a:	78fb      	ldrb	r3, [r7, #3]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d115      	bne.n	8008b4c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	68db      	ldr	r3, [r3, #12]
 8008b24:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008b2c:	2001      	movs	r0, #1
 8008b2e:	f7fa f825 	bl	8002b7c <HAL_Delay>
      ms++;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	3301      	adds	r3, #1
 8008b36:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 fa15 	bl	8008f68 <USB_GetMode>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d005      	beq.n	8008b50 <USB_SetCurrentMode+0x84>
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2b31      	cmp	r3, #49	; 0x31
 8008b48:	d9f0      	bls.n	8008b2c <USB_SetCurrentMode+0x60>
 8008b4a:	e001      	b.n	8008b50 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	e005      	b.n	8008b5c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2b32      	cmp	r3, #50	; 0x32
 8008b54:	d101      	bne.n	8008b5a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008b56:	2301      	movs	r3, #1
 8008b58:	e000      	b.n	8008b5c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008b5a:	2300      	movs	r3, #0
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3710      	adds	r7, #16
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008b64:	b084      	sub	sp, #16
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b086      	sub	sp, #24
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
 8008b6e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008b72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008b76:	2300      	movs	r3, #0
 8008b78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008b7e:	2300      	movs	r3, #0
 8008b80:	613b      	str	r3, [r7, #16]
 8008b82:	e009      	b.n	8008b98 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	3340      	adds	r3, #64	; 0x40
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	4413      	add	r3, r2
 8008b8e:	2200      	movs	r2, #0
 8008b90:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	3301      	adds	r3, #1
 8008b96:	613b      	str	r3, [r7, #16]
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	2b0e      	cmp	r3, #14
 8008b9c:	d9f2      	bls.n	8008b84 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d11c      	bne.n	8008bde <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	68fa      	ldr	r2, [r7, #12]
 8008bae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bb2:	f043 0302 	orr.w	r3, r3, #2
 8008bb6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bbc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	639a      	str	r2, [r3, #56]	; 0x38
 8008bdc:	e00b      	b.n	8008bf6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008bfc:	461a      	mov	r2, r3
 8008bfe:	2300      	movs	r3, #0
 8008c00:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c08:	4619      	mov	r1, r3
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c10:	461a      	mov	r2, r3
 8008c12:	680b      	ldr	r3, [r1, #0]
 8008c14:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d10c      	bne.n	8008c36 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d104      	bne.n	8008c2c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008c22:	2100      	movs	r1, #0
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f000 f965 	bl	8008ef4 <USB_SetDevSpeed>
 8008c2a:	e008      	b.n	8008c3e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008c2c:	2101      	movs	r1, #1
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 f960 	bl	8008ef4 <USB_SetDevSpeed>
 8008c34:	e003      	b.n	8008c3e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008c36:	2103      	movs	r1, #3
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 f95b 	bl	8008ef4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008c3e:	2110      	movs	r1, #16
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 f8f3 	bl	8008e2c <USB_FlushTxFifo>
 8008c46:	4603      	mov	r3, r0
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d001      	beq.n	8008c50 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 f91f 	bl	8008e94 <USB_FlushRxFifo>
 8008c56:	4603      	mov	r3, r0
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d001      	beq.n	8008c60 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c66:	461a      	mov	r2, r3
 8008c68:	2300      	movs	r3, #0
 8008c6a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c72:	461a      	mov	r2, r3
 8008c74:	2300      	movs	r3, #0
 8008c76:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c7e:	461a      	mov	r2, r3
 8008c80:	2300      	movs	r3, #0
 8008c82:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c84:	2300      	movs	r3, #0
 8008c86:	613b      	str	r3, [r7, #16]
 8008c88:	e043      	b.n	8008d12 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	015a      	lsls	r2, r3, #5
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	4413      	add	r3, r2
 8008c92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ca0:	d118      	bne.n	8008cd4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d10a      	bne.n	8008cbe <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	015a      	lsls	r2, r3, #5
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	4413      	add	r3, r2
 8008cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008cba:	6013      	str	r3, [r2, #0]
 8008cbc:	e013      	b.n	8008ce6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	015a      	lsls	r2, r3, #5
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	4413      	add	r3, r2
 8008cc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cca:	461a      	mov	r2, r3
 8008ccc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008cd0:	6013      	str	r3, [r2, #0]
 8008cd2:	e008      	b.n	8008ce6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	015a      	lsls	r2, r3, #5
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	4413      	add	r3, r2
 8008cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	015a      	lsls	r2, r3, #5
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	4413      	add	r3, r2
 8008cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	015a      	lsls	r2, r3, #5
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	4413      	add	r3, r2
 8008d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d04:	461a      	mov	r2, r3
 8008d06:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008d0a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	3301      	adds	r3, #1
 8008d10:	613b      	str	r3, [r7, #16]
 8008d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d14:	693a      	ldr	r2, [r7, #16]
 8008d16:	429a      	cmp	r2, r3
 8008d18:	d3b7      	bcc.n	8008c8a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	613b      	str	r3, [r7, #16]
 8008d1e:	e043      	b.n	8008da8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	015a      	lsls	r2, r3, #5
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	4413      	add	r3, r2
 8008d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d36:	d118      	bne.n	8008d6a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d10a      	bne.n	8008d54 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	015a      	lsls	r2, r3, #5
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	4413      	add	r3, r2
 8008d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008d50:	6013      	str	r3, [r2, #0]
 8008d52:	e013      	b.n	8008d7c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	015a      	lsls	r2, r3, #5
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	4413      	add	r3, r2
 8008d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d60:	461a      	mov	r2, r3
 8008d62:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008d66:	6013      	str	r3, [r2, #0]
 8008d68:	e008      	b.n	8008d7c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	015a      	lsls	r2, r3, #5
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	4413      	add	r3, r2
 8008d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d76:	461a      	mov	r2, r3
 8008d78:	2300      	movs	r3, #0
 8008d7a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	015a      	lsls	r2, r3, #5
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	4413      	add	r3, r2
 8008d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d88:	461a      	mov	r2, r3
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	015a      	lsls	r2, r3, #5
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	4413      	add	r3, r2
 8008d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008da0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	3301      	adds	r3, #1
 8008da6:	613b      	str	r3, [r7, #16]
 8008da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008daa:	693a      	ldr	r2, [r7, #16]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d3b7      	bcc.n	8008d20 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008db6:	691b      	ldr	r3, [r3, #16]
 8008db8:	68fa      	ldr	r2, [r7, #12]
 8008dba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008dbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008dc2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008dd0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d105      	bne.n	8008de4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	699b      	ldr	r3, [r3, #24]
 8008ddc:	f043 0210 	orr.w	r2, r3, #16
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	699a      	ldr	r2, [r3, #24]
 8008de8:	4b0f      	ldr	r3, [pc, #60]	; (8008e28 <USB_DevInit+0x2c4>)
 8008dea:	4313      	orrs	r3, r2
 8008dec:	687a      	ldr	r2, [r7, #4]
 8008dee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d005      	beq.n	8008e02 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	699b      	ldr	r3, [r3, #24]
 8008dfa:	f043 0208 	orr.w	r2, r3, #8
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d107      	bne.n	8008e18 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	699b      	ldr	r3, [r3, #24]
 8008e0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e10:	f043 0304 	orr.w	r3, r3, #4
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008e18:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3718      	adds	r7, #24
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e24:	b004      	add	sp, #16
 8008e26:	4770      	bx	lr
 8008e28:	803c3800 	.word	0x803c3800

08008e2c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b085      	sub	sp, #20
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008e36:	2300      	movs	r3, #0
 8008e38:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	3301      	adds	r3, #1
 8008e3e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	4a13      	ldr	r2, [pc, #76]	; (8008e90 <USB_FlushTxFifo+0x64>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d901      	bls.n	8008e4c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008e48:	2303      	movs	r3, #3
 8008e4a:	e01b      	b.n	8008e84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	691b      	ldr	r3, [r3, #16]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	daf2      	bge.n	8008e3a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008e54:	2300      	movs	r3, #0
 8008e56:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	019b      	lsls	r3, r3, #6
 8008e5c:	f043 0220 	orr.w	r2, r3, #32
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	3301      	adds	r3, #1
 8008e68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	4a08      	ldr	r2, [pc, #32]	; (8008e90 <USB_FlushTxFifo+0x64>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d901      	bls.n	8008e76 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008e72:	2303      	movs	r3, #3
 8008e74:	e006      	b.n	8008e84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	691b      	ldr	r3, [r3, #16]
 8008e7a:	f003 0320 	and.w	r3, r3, #32
 8008e7e:	2b20      	cmp	r3, #32
 8008e80:	d0f0      	beq.n	8008e64 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008e82:	2300      	movs	r3, #0
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3714      	adds	r7, #20
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr
 8008e90:	00030d40 	.word	0x00030d40

08008e94 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b085      	sub	sp, #20
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	4a11      	ldr	r2, [pc, #68]	; (8008ef0 <USB_FlushRxFifo+0x5c>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d901      	bls.n	8008eb2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008eae:	2303      	movs	r3, #3
 8008eb0:	e018      	b.n	8008ee4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	691b      	ldr	r3, [r3, #16]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	daf2      	bge.n	8008ea0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2210      	movs	r2, #16
 8008ec2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	4a08      	ldr	r2, [pc, #32]	; (8008ef0 <USB_FlushRxFifo+0x5c>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d901      	bls.n	8008ed6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008ed2:	2303      	movs	r3, #3
 8008ed4:	e006      	b.n	8008ee4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	691b      	ldr	r3, [r3, #16]
 8008eda:	f003 0310 	and.w	r3, r3, #16
 8008ede:	2b10      	cmp	r3, #16
 8008ee0:	d0f0      	beq.n	8008ec4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008ee2:	2300      	movs	r3, #0
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3714      	adds	r7, #20
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr
 8008ef0:	00030d40 	.word	0x00030d40

08008ef4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b085      	sub	sp, #20
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	460b      	mov	r3, r1
 8008efe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f0a:	681a      	ldr	r2, [r3, #0]
 8008f0c:	78fb      	ldrb	r3, [r7, #3]
 8008f0e:	68f9      	ldr	r1, [r7, #12]
 8008f10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f14:	4313      	orrs	r3, r2
 8008f16:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008f18:	2300      	movs	r3, #0
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3714      	adds	r7, #20
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f24:	4770      	bx	lr

08008f26 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008f26:	b480      	push	{r7}
 8008f28:	b085      	sub	sp, #20
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	68fa      	ldr	r2, [r7, #12]
 8008f3c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008f40:	f023 0303 	bic.w	r3, r3, #3
 8008f44:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	68fa      	ldr	r2, [r7, #12]
 8008f50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f54:	f043 0302 	orr.w	r3, r3, #2
 8008f58:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008f5a:	2300      	movs	r3, #0
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3714      	adds	r7, #20
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr

08008f68 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b083      	sub	sp, #12
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	695b      	ldr	r3, [r3, #20]
 8008f74:	f003 0301 	and.w	r3, r3, #1
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	370c      	adds	r7, #12
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr

08008f84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b085      	sub	sp, #20
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	3301      	adds	r3, #1
 8008f94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	4a13      	ldr	r2, [pc, #76]	; (8008fe8 <USB_CoreReset+0x64>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d901      	bls.n	8008fa2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008f9e:	2303      	movs	r3, #3
 8008fa0:	e01b      	b.n	8008fda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	691b      	ldr	r3, [r3, #16]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	daf2      	bge.n	8008f90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008faa:	2300      	movs	r3, #0
 8008fac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	691b      	ldr	r3, [r3, #16]
 8008fb2:	f043 0201 	orr.w	r2, r3, #1
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	4a09      	ldr	r2, [pc, #36]	; (8008fe8 <USB_CoreReset+0x64>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d901      	bls.n	8008fcc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008fc8:	2303      	movs	r3, #3
 8008fca:	e006      	b.n	8008fda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	691b      	ldr	r3, [r3, #16]
 8008fd0:	f003 0301 	and.w	r3, r3, #1
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d0f0      	beq.n	8008fba <USB_CoreReset+0x36>

  return HAL_OK;
 8008fd8:	2300      	movs	r3, #0
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3714      	adds	r7, #20
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe4:	4770      	bx	lr
 8008fe6:	bf00      	nop
 8008fe8:	00030d40 	.word	0x00030d40

08008fec <__NVIC_SetPriority>:
{
 8008fec:	b480      	push	{r7}
 8008fee:	b083      	sub	sp, #12
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	6039      	str	r1, [r7, #0]
 8008ff6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	db0a      	blt.n	8009016 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	b2da      	uxtb	r2, r3
 8009004:	490c      	ldr	r1, [pc, #48]	; (8009038 <__NVIC_SetPriority+0x4c>)
 8009006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800900a:	0112      	lsls	r2, r2, #4
 800900c:	b2d2      	uxtb	r2, r2
 800900e:	440b      	add	r3, r1
 8009010:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009014:	e00a      	b.n	800902c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	b2da      	uxtb	r2, r3
 800901a:	4908      	ldr	r1, [pc, #32]	; (800903c <__NVIC_SetPriority+0x50>)
 800901c:	79fb      	ldrb	r3, [r7, #7]
 800901e:	f003 030f 	and.w	r3, r3, #15
 8009022:	3b04      	subs	r3, #4
 8009024:	0112      	lsls	r2, r2, #4
 8009026:	b2d2      	uxtb	r2, r2
 8009028:	440b      	add	r3, r1
 800902a:	761a      	strb	r2, [r3, #24]
}
 800902c:	bf00      	nop
 800902e:	370c      	adds	r7, #12
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr
 8009038:	e000e100 	.word	0xe000e100
 800903c:	e000ed00 	.word	0xe000ed00

08009040 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009040:	b580      	push	{r7, lr}
 8009042:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009044:	4b05      	ldr	r3, [pc, #20]	; (800905c <SysTick_Handler+0x1c>)
 8009046:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009048:	f001 fd28 	bl	800aa9c <xTaskGetSchedulerState>
 800904c:	4603      	mov	r3, r0
 800904e:	2b01      	cmp	r3, #1
 8009050:	d001      	beq.n	8009056 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009052:	f002 fb11 	bl	800b678 <xPortSysTickHandler>
  }
}
 8009056:	bf00      	nop
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop
 800905c:	e000e010 	.word	0xe000e010

08009060 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009060:	b580      	push	{r7, lr}
 8009062:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009064:	2100      	movs	r1, #0
 8009066:	f06f 0004 	mvn.w	r0, #4
 800906a:	f7ff ffbf 	bl	8008fec <__NVIC_SetPriority>
#endif
}
 800906e:	bf00      	nop
 8009070:	bd80      	pop	{r7, pc}
	...

08009074 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009074:	b480      	push	{r7}
 8009076:	b083      	sub	sp, #12
 8009078:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800907a:	f3ef 8305 	mrs	r3, IPSR
 800907e:	603b      	str	r3, [r7, #0]
  return(result);
 8009080:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009082:	2b00      	cmp	r3, #0
 8009084:	d003      	beq.n	800908e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009086:	f06f 0305 	mvn.w	r3, #5
 800908a:	607b      	str	r3, [r7, #4]
 800908c:	e00c      	b.n	80090a8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800908e:	4b0a      	ldr	r3, [pc, #40]	; (80090b8 <osKernelInitialize+0x44>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d105      	bne.n	80090a2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009096:	4b08      	ldr	r3, [pc, #32]	; (80090b8 <osKernelInitialize+0x44>)
 8009098:	2201      	movs	r2, #1
 800909a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800909c:	2300      	movs	r3, #0
 800909e:	607b      	str	r3, [r7, #4]
 80090a0:	e002      	b.n	80090a8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80090a2:	f04f 33ff 	mov.w	r3, #4294967295
 80090a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80090a8:	687b      	ldr	r3, [r7, #4]
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	370c      	adds	r7, #12
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr
 80090b6:	bf00      	nop
 80090b8:	20000cb0 	.word	0x20000cb0

080090bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80090bc:	b580      	push	{r7, lr}
 80090be:	b082      	sub	sp, #8
 80090c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090c2:	f3ef 8305 	mrs	r3, IPSR
 80090c6:	603b      	str	r3, [r7, #0]
  return(result);
 80090c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d003      	beq.n	80090d6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80090ce:	f06f 0305 	mvn.w	r3, #5
 80090d2:	607b      	str	r3, [r7, #4]
 80090d4:	e010      	b.n	80090f8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80090d6:	4b0b      	ldr	r3, [pc, #44]	; (8009104 <osKernelStart+0x48>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d109      	bne.n	80090f2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80090de:	f7ff ffbf 	bl	8009060 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80090e2:	4b08      	ldr	r3, [pc, #32]	; (8009104 <osKernelStart+0x48>)
 80090e4:	2202      	movs	r2, #2
 80090e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80090e8:	f001 f87c 	bl	800a1e4 <vTaskStartScheduler>
      stat = osOK;
 80090ec:	2300      	movs	r3, #0
 80090ee:	607b      	str	r3, [r7, #4]
 80090f0:	e002      	b.n	80090f8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80090f2:	f04f 33ff 	mov.w	r3, #4294967295
 80090f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80090f8:	687b      	ldr	r3, [r7, #4]
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3708      	adds	r7, #8
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	20000cb0 	.word	0x20000cb0

08009108 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009108:	b580      	push	{r7, lr}
 800910a:	b08e      	sub	sp, #56	; 0x38
 800910c:	af04      	add	r7, sp, #16
 800910e:	60f8      	str	r0, [r7, #12]
 8009110:	60b9      	str	r1, [r7, #8]
 8009112:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009114:	2300      	movs	r3, #0
 8009116:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009118:	f3ef 8305 	mrs	r3, IPSR
 800911c:	617b      	str	r3, [r7, #20]
  return(result);
 800911e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009120:	2b00      	cmp	r3, #0
 8009122:	d17e      	bne.n	8009222 <osThreadNew+0x11a>
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d07b      	beq.n	8009222 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800912a:	2380      	movs	r3, #128	; 0x80
 800912c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800912e:	2318      	movs	r3, #24
 8009130:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009132:	2300      	movs	r3, #0
 8009134:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009136:	f04f 33ff 	mov.w	r3, #4294967295
 800913a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d045      	beq.n	80091ce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d002      	beq.n	8009150 <osThreadNew+0x48>
        name = attr->name;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	699b      	ldr	r3, [r3, #24]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d002      	beq.n	800915e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	699b      	ldr	r3, [r3, #24]
 800915c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800915e:	69fb      	ldr	r3, [r7, #28]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d008      	beq.n	8009176 <osThreadNew+0x6e>
 8009164:	69fb      	ldr	r3, [r7, #28]
 8009166:	2b38      	cmp	r3, #56	; 0x38
 8009168:	d805      	bhi.n	8009176 <osThreadNew+0x6e>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	f003 0301 	and.w	r3, r3, #1
 8009172:	2b00      	cmp	r3, #0
 8009174:	d001      	beq.n	800917a <osThreadNew+0x72>
        return (NULL);
 8009176:	2300      	movs	r3, #0
 8009178:	e054      	b.n	8009224 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	695b      	ldr	r3, [r3, #20]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d003      	beq.n	800918a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	695b      	ldr	r3, [r3, #20]
 8009186:	089b      	lsrs	r3, r3, #2
 8009188:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	689b      	ldr	r3, [r3, #8]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d00e      	beq.n	80091b0 <osThreadNew+0xa8>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	68db      	ldr	r3, [r3, #12]
 8009196:	2bbb      	cmp	r3, #187	; 0xbb
 8009198:	d90a      	bls.n	80091b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d006      	beq.n	80091b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	695b      	ldr	r3, [r3, #20]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d002      	beq.n	80091b0 <osThreadNew+0xa8>
        mem = 1;
 80091aa:	2301      	movs	r3, #1
 80091ac:	61bb      	str	r3, [r7, #24]
 80091ae:	e010      	b.n	80091d2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	689b      	ldr	r3, [r3, #8]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d10c      	bne.n	80091d2 <osThreadNew+0xca>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	68db      	ldr	r3, [r3, #12]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d108      	bne.n	80091d2 <osThreadNew+0xca>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	691b      	ldr	r3, [r3, #16]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d104      	bne.n	80091d2 <osThreadNew+0xca>
          mem = 0;
 80091c8:	2300      	movs	r3, #0
 80091ca:	61bb      	str	r3, [r7, #24]
 80091cc:	e001      	b.n	80091d2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80091ce:	2300      	movs	r3, #0
 80091d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80091d2:	69bb      	ldr	r3, [r7, #24]
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	d110      	bne.n	80091fa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80091e0:	9202      	str	r2, [sp, #8]
 80091e2:	9301      	str	r3, [sp, #4]
 80091e4:	69fb      	ldr	r3, [r7, #28]
 80091e6:	9300      	str	r3, [sp, #0]
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	6a3a      	ldr	r2, [r7, #32]
 80091ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80091ee:	68f8      	ldr	r0, [r7, #12]
 80091f0:	f000 fe0c 	bl	8009e0c <xTaskCreateStatic>
 80091f4:	4603      	mov	r3, r0
 80091f6:	613b      	str	r3, [r7, #16]
 80091f8:	e013      	b.n	8009222 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80091fa:	69bb      	ldr	r3, [r7, #24]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d110      	bne.n	8009222 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009200:	6a3b      	ldr	r3, [r7, #32]
 8009202:	b29a      	uxth	r2, r3
 8009204:	f107 0310 	add.w	r3, r7, #16
 8009208:	9301      	str	r3, [sp, #4]
 800920a:	69fb      	ldr	r3, [r7, #28]
 800920c:	9300      	str	r3, [sp, #0]
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009212:	68f8      	ldr	r0, [r7, #12]
 8009214:	f000 fe57 	bl	8009ec6 <xTaskCreate>
 8009218:	4603      	mov	r3, r0
 800921a:	2b01      	cmp	r3, #1
 800921c:	d001      	beq.n	8009222 <osThreadNew+0x11a>
            hTask = NULL;
 800921e:	2300      	movs	r3, #0
 8009220:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009222:	693b      	ldr	r3, [r7, #16]
}
 8009224:	4618      	mov	r0, r3
 8009226:	3728      	adds	r7, #40	; 0x28
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009234:	f3ef 8305 	mrs	r3, IPSR
 8009238:	60bb      	str	r3, [r7, #8]
  return(result);
 800923a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800923c:	2b00      	cmp	r3, #0
 800923e:	d003      	beq.n	8009248 <osDelay+0x1c>
    stat = osErrorISR;
 8009240:	f06f 0305 	mvn.w	r3, #5
 8009244:	60fb      	str	r3, [r7, #12]
 8009246:	e007      	b.n	8009258 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009248:	2300      	movs	r3, #0
 800924a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d002      	beq.n	8009258 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f000 ff92 	bl	800a17c <vTaskDelay>
    }
  }

  return (stat);
 8009258:	68fb      	ldr	r3, [r7, #12]
}
 800925a:	4618      	mov	r0, r3
 800925c:	3710      	adds	r7, #16
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
	...

08009264 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009264:	b480      	push	{r7}
 8009266:	b085      	sub	sp, #20
 8009268:	af00      	add	r7, sp, #0
 800926a:	60f8      	str	r0, [r7, #12]
 800926c:	60b9      	str	r1, [r7, #8]
 800926e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	4a07      	ldr	r2, [pc, #28]	; (8009290 <vApplicationGetIdleTaskMemory+0x2c>)
 8009274:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	4a06      	ldr	r2, [pc, #24]	; (8009294 <vApplicationGetIdleTaskMemory+0x30>)
 800927a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2280      	movs	r2, #128	; 0x80
 8009280:	601a      	str	r2, [r3, #0]
}
 8009282:	bf00      	nop
 8009284:	3714      	adds	r7, #20
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr
 800928e:	bf00      	nop
 8009290:	20000cb4 	.word	0x20000cb4
 8009294:	20000d70 	.word	0x20000d70

08009298 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009298:	b480      	push	{r7}
 800929a:	b085      	sub	sp, #20
 800929c:	af00      	add	r7, sp, #0
 800929e:	60f8      	str	r0, [r7, #12]
 80092a0:	60b9      	str	r1, [r7, #8]
 80092a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	4a07      	ldr	r2, [pc, #28]	; (80092c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80092a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	4a06      	ldr	r2, [pc, #24]	; (80092c8 <vApplicationGetTimerTaskMemory+0x30>)
 80092ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80092b6:	601a      	str	r2, [r3, #0]
}
 80092b8:	bf00      	nop
 80092ba:	3714      	adds	r7, #20
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr
 80092c4:	20000f70 	.word	0x20000f70
 80092c8:	2000102c 	.word	0x2000102c

080092cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80092cc:	b480      	push	{r7}
 80092ce:	b083      	sub	sp, #12
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f103 0208 	add.w	r2, r3, #8
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f04f 32ff 	mov.w	r2, #4294967295
 80092e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f103 0208 	add.w	r2, r3, #8
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f103 0208 	add.w	r2, r3, #8
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2200      	movs	r2, #0
 80092fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009300:	bf00      	nop
 8009302:	370c      	adds	r7, #12
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr

0800930c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800930c:	b480      	push	{r7}
 800930e:	b083      	sub	sp, #12
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2200      	movs	r2, #0
 8009318:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800931a:	bf00      	nop
 800931c:	370c      	adds	r7, #12
 800931e:	46bd      	mov	sp, r7
 8009320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009324:	4770      	bx	lr

08009326 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009326:	b480      	push	{r7}
 8009328:	b085      	sub	sp, #20
 800932a:	af00      	add	r7, sp, #0
 800932c:	6078      	str	r0, [r7, #4]
 800932e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	68fa      	ldr	r2, [r7, #12]
 800933a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	689a      	ldr	r2, [r3, #8]
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	689b      	ldr	r3, [r3, #8]
 8009348:	683a      	ldr	r2, [r7, #0]
 800934a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	683a      	ldr	r2, [r7, #0]
 8009350:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	1c5a      	adds	r2, r3, #1
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	601a      	str	r2, [r3, #0]
}
 8009362:	bf00      	nop
 8009364:	3714      	adds	r7, #20
 8009366:	46bd      	mov	sp, r7
 8009368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936c:	4770      	bx	lr

0800936e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800936e:	b480      	push	{r7}
 8009370:	b085      	sub	sp, #20
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
 8009376:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009384:	d103      	bne.n	800938e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	691b      	ldr	r3, [r3, #16]
 800938a:	60fb      	str	r3, [r7, #12]
 800938c:	e00c      	b.n	80093a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	3308      	adds	r3, #8
 8009392:	60fb      	str	r3, [r7, #12]
 8009394:	e002      	b.n	800939c <vListInsert+0x2e>
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	60fb      	str	r3, [r7, #12]
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	68ba      	ldr	r2, [r7, #8]
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d2f6      	bcs.n	8009396 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	685a      	ldr	r2, [r3, #4]
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	683a      	ldr	r2, [r7, #0]
 80093b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	68fa      	ldr	r2, [r7, #12]
 80093bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	683a      	ldr	r2, [r7, #0]
 80093c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	687a      	ldr	r2, [r7, #4]
 80093c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	1c5a      	adds	r2, r3, #1
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	601a      	str	r2, [r3, #0]
}
 80093d4:	bf00      	nop
 80093d6:	3714      	adds	r7, #20
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr

080093e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80093e0:	b480      	push	{r7}
 80093e2:	b085      	sub	sp, #20
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	691b      	ldr	r3, [r3, #16]
 80093ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	6892      	ldr	r2, [r2, #8]
 80093f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	689b      	ldr	r3, [r3, #8]
 80093fc:	687a      	ldr	r2, [r7, #4]
 80093fe:	6852      	ldr	r2, [r2, #4]
 8009400:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	687a      	ldr	r2, [r7, #4]
 8009408:	429a      	cmp	r2, r3
 800940a:	d103      	bne.n	8009414 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	689a      	ldr	r2, [r3, #8]
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2200      	movs	r2, #0
 8009418:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	1e5a      	subs	r2, r3, #1
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
}
 8009428:	4618      	mov	r0, r3
 800942a:	3714      	adds	r7, #20
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr

08009434 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b084      	sub	sp, #16
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d10a      	bne.n	800945e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800944c:	f383 8811 	msr	BASEPRI, r3
 8009450:	f3bf 8f6f 	isb	sy
 8009454:	f3bf 8f4f 	dsb	sy
 8009458:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800945a:	bf00      	nop
 800945c:	e7fe      	b.n	800945c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800945e:	f002 f879 	bl	800b554 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681a      	ldr	r2, [r3, #0]
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800946a:	68f9      	ldr	r1, [r7, #12]
 800946c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800946e:	fb01 f303 	mul.w	r3, r1, r3
 8009472:	441a      	add	r2, r3
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2200      	movs	r2, #0
 800947c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681a      	ldr	r2, [r3, #0]
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800948e:	3b01      	subs	r3, #1
 8009490:	68f9      	ldr	r1, [r7, #12]
 8009492:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009494:	fb01 f303 	mul.w	r3, r1, r3
 8009498:	441a      	add	r2, r3
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	22ff      	movs	r2, #255	; 0xff
 80094a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	22ff      	movs	r2, #255	; 0xff
 80094aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d114      	bne.n	80094de <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	691b      	ldr	r3, [r3, #16]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d01a      	beq.n	80094f2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	3310      	adds	r3, #16
 80094c0:	4618      	mov	r0, r3
 80094c2:	f001 f929 	bl	800a718 <xTaskRemoveFromEventList>
 80094c6:	4603      	mov	r3, r0
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d012      	beq.n	80094f2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80094cc:	4b0c      	ldr	r3, [pc, #48]	; (8009500 <xQueueGenericReset+0xcc>)
 80094ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094d2:	601a      	str	r2, [r3, #0]
 80094d4:	f3bf 8f4f 	dsb	sy
 80094d8:	f3bf 8f6f 	isb	sy
 80094dc:	e009      	b.n	80094f2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	3310      	adds	r3, #16
 80094e2:	4618      	mov	r0, r3
 80094e4:	f7ff fef2 	bl	80092cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	3324      	adds	r3, #36	; 0x24
 80094ec:	4618      	mov	r0, r3
 80094ee:	f7ff feed 	bl	80092cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80094f2:	f002 f85f 	bl	800b5b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80094f6:	2301      	movs	r3, #1
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3710      	adds	r7, #16
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}
 8009500:	e000ed04 	.word	0xe000ed04

08009504 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009504:	b580      	push	{r7, lr}
 8009506:	b08e      	sub	sp, #56	; 0x38
 8009508:	af02      	add	r7, sp, #8
 800950a:	60f8      	str	r0, [r7, #12]
 800950c:	60b9      	str	r1, [r7, #8]
 800950e:	607a      	str	r2, [r7, #4]
 8009510:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d10a      	bne.n	800952e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800951c:	f383 8811 	msr	BASEPRI, r3
 8009520:	f3bf 8f6f 	isb	sy
 8009524:	f3bf 8f4f 	dsb	sy
 8009528:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800952a:	bf00      	nop
 800952c:	e7fe      	b.n	800952c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d10a      	bne.n	800954a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009538:	f383 8811 	msr	BASEPRI, r3
 800953c:	f3bf 8f6f 	isb	sy
 8009540:	f3bf 8f4f 	dsb	sy
 8009544:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009546:	bf00      	nop
 8009548:	e7fe      	b.n	8009548 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d002      	beq.n	8009556 <xQueueGenericCreateStatic+0x52>
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d001      	beq.n	800955a <xQueueGenericCreateStatic+0x56>
 8009556:	2301      	movs	r3, #1
 8009558:	e000      	b.n	800955c <xQueueGenericCreateStatic+0x58>
 800955a:	2300      	movs	r3, #0
 800955c:	2b00      	cmp	r3, #0
 800955e:	d10a      	bne.n	8009576 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009564:	f383 8811 	msr	BASEPRI, r3
 8009568:	f3bf 8f6f 	isb	sy
 800956c:	f3bf 8f4f 	dsb	sy
 8009570:	623b      	str	r3, [r7, #32]
}
 8009572:	bf00      	nop
 8009574:	e7fe      	b.n	8009574 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d102      	bne.n	8009582 <xQueueGenericCreateStatic+0x7e>
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d101      	bne.n	8009586 <xQueueGenericCreateStatic+0x82>
 8009582:	2301      	movs	r3, #1
 8009584:	e000      	b.n	8009588 <xQueueGenericCreateStatic+0x84>
 8009586:	2300      	movs	r3, #0
 8009588:	2b00      	cmp	r3, #0
 800958a:	d10a      	bne.n	80095a2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800958c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009590:	f383 8811 	msr	BASEPRI, r3
 8009594:	f3bf 8f6f 	isb	sy
 8009598:	f3bf 8f4f 	dsb	sy
 800959c:	61fb      	str	r3, [r7, #28]
}
 800959e:	bf00      	nop
 80095a0:	e7fe      	b.n	80095a0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80095a2:	2350      	movs	r3, #80	; 0x50
 80095a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	2b50      	cmp	r3, #80	; 0x50
 80095aa:	d00a      	beq.n	80095c2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80095ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b0:	f383 8811 	msr	BASEPRI, r3
 80095b4:	f3bf 8f6f 	isb	sy
 80095b8:	f3bf 8f4f 	dsb	sy
 80095bc:	61bb      	str	r3, [r7, #24]
}
 80095be:	bf00      	nop
 80095c0:	e7fe      	b.n	80095c0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80095c2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80095c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d00d      	beq.n	80095ea <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80095ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d0:	2201      	movs	r2, #1
 80095d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80095d6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80095da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095dc:	9300      	str	r3, [sp, #0]
 80095de:	4613      	mov	r3, r2
 80095e0:	687a      	ldr	r2, [r7, #4]
 80095e2:	68b9      	ldr	r1, [r7, #8]
 80095e4:	68f8      	ldr	r0, [r7, #12]
 80095e6:	f000 f805 	bl	80095f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80095ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3730      	adds	r7, #48	; 0x30
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}

080095f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b084      	sub	sp, #16
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	60f8      	str	r0, [r7, #12]
 80095fc:	60b9      	str	r1, [r7, #8]
 80095fe:	607a      	str	r2, [r7, #4]
 8009600:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d103      	bne.n	8009610 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009608:	69bb      	ldr	r3, [r7, #24]
 800960a:	69ba      	ldr	r2, [r7, #24]
 800960c:	601a      	str	r2, [r3, #0]
 800960e:	e002      	b.n	8009616 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009610:	69bb      	ldr	r3, [r7, #24]
 8009612:	687a      	ldr	r2, [r7, #4]
 8009614:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009616:	69bb      	ldr	r3, [r7, #24]
 8009618:	68fa      	ldr	r2, [r7, #12]
 800961a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800961c:	69bb      	ldr	r3, [r7, #24]
 800961e:	68ba      	ldr	r2, [r7, #8]
 8009620:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009622:	2101      	movs	r1, #1
 8009624:	69b8      	ldr	r0, [r7, #24]
 8009626:	f7ff ff05 	bl	8009434 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800962a:	69bb      	ldr	r3, [r7, #24]
 800962c:	78fa      	ldrb	r2, [r7, #3]
 800962e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009632:	bf00      	nop
 8009634:	3710      	adds	r7, #16
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
	...

0800963c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b08e      	sub	sp, #56	; 0x38
 8009640:	af00      	add	r7, sp, #0
 8009642:	60f8      	str	r0, [r7, #12]
 8009644:	60b9      	str	r1, [r7, #8]
 8009646:	607a      	str	r2, [r7, #4]
 8009648:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800964a:	2300      	movs	r3, #0
 800964c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009654:	2b00      	cmp	r3, #0
 8009656:	d10a      	bne.n	800966e <xQueueGenericSend+0x32>
	__asm volatile
 8009658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800965c:	f383 8811 	msr	BASEPRI, r3
 8009660:	f3bf 8f6f 	isb	sy
 8009664:	f3bf 8f4f 	dsb	sy
 8009668:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800966a:	bf00      	nop
 800966c:	e7fe      	b.n	800966c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d103      	bne.n	800967c <xQueueGenericSend+0x40>
 8009674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009678:	2b00      	cmp	r3, #0
 800967a:	d101      	bne.n	8009680 <xQueueGenericSend+0x44>
 800967c:	2301      	movs	r3, #1
 800967e:	e000      	b.n	8009682 <xQueueGenericSend+0x46>
 8009680:	2300      	movs	r3, #0
 8009682:	2b00      	cmp	r3, #0
 8009684:	d10a      	bne.n	800969c <xQueueGenericSend+0x60>
	__asm volatile
 8009686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800968a:	f383 8811 	msr	BASEPRI, r3
 800968e:	f3bf 8f6f 	isb	sy
 8009692:	f3bf 8f4f 	dsb	sy
 8009696:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009698:	bf00      	nop
 800969a:	e7fe      	b.n	800969a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	2b02      	cmp	r3, #2
 80096a0:	d103      	bne.n	80096aa <xQueueGenericSend+0x6e>
 80096a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096a6:	2b01      	cmp	r3, #1
 80096a8:	d101      	bne.n	80096ae <xQueueGenericSend+0x72>
 80096aa:	2301      	movs	r3, #1
 80096ac:	e000      	b.n	80096b0 <xQueueGenericSend+0x74>
 80096ae:	2300      	movs	r3, #0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d10a      	bne.n	80096ca <xQueueGenericSend+0x8e>
	__asm volatile
 80096b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b8:	f383 8811 	msr	BASEPRI, r3
 80096bc:	f3bf 8f6f 	isb	sy
 80096c0:	f3bf 8f4f 	dsb	sy
 80096c4:	623b      	str	r3, [r7, #32]
}
 80096c6:	bf00      	nop
 80096c8:	e7fe      	b.n	80096c8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80096ca:	f001 f9e7 	bl	800aa9c <xTaskGetSchedulerState>
 80096ce:	4603      	mov	r3, r0
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d102      	bne.n	80096da <xQueueGenericSend+0x9e>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d101      	bne.n	80096de <xQueueGenericSend+0xa2>
 80096da:	2301      	movs	r3, #1
 80096dc:	e000      	b.n	80096e0 <xQueueGenericSend+0xa4>
 80096de:	2300      	movs	r3, #0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d10a      	bne.n	80096fa <xQueueGenericSend+0xbe>
	__asm volatile
 80096e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e8:	f383 8811 	msr	BASEPRI, r3
 80096ec:	f3bf 8f6f 	isb	sy
 80096f0:	f3bf 8f4f 	dsb	sy
 80096f4:	61fb      	str	r3, [r7, #28]
}
 80096f6:	bf00      	nop
 80096f8:	e7fe      	b.n	80096f8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80096fa:	f001 ff2b 	bl	800b554 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80096fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009700:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009706:	429a      	cmp	r2, r3
 8009708:	d302      	bcc.n	8009710 <xQueueGenericSend+0xd4>
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	2b02      	cmp	r3, #2
 800970e:	d129      	bne.n	8009764 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009710:	683a      	ldr	r2, [r7, #0]
 8009712:	68b9      	ldr	r1, [r7, #8]
 8009714:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009716:	f000 fa0b 	bl	8009b30 <prvCopyDataToQueue>
 800971a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800971c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800971e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009720:	2b00      	cmp	r3, #0
 8009722:	d010      	beq.n	8009746 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009726:	3324      	adds	r3, #36	; 0x24
 8009728:	4618      	mov	r0, r3
 800972a:	f000 fff5 	bl	800a718 <xTaskRemoveFromEventList>
 800972e:	4603      	mov	r3, r0
 8009730:	2b00      	cmp	r3, #0
 8009732:	d013      	beq.n	800975c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009734:	4b3f      	ldr	r3, [pc, #252]	; (8009834 <xQueueGenericSend+0x1f8>)
 8009736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800973a:	601a      	str	r2, [r3, #0]
 800973c:	f3bf 8f4f 	dsb	sy
 8009740:	f3bf 8f6f 	isb	sy
 8009744:	e00a      	b.n	800975c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009748:	2b00      	cmp	r3, #0
 800974a:	d007      	beq.n	800975c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800974c:	4b39      	ldr	r3, [pc, #228]	; (8009834 <xQueueGenericSend+0x1f8>)
 800974e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009752:	601a      	str	r2, [r3, #0]
 8009754:	f3bf 8f4f 	dsb	sy
 8009758:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800975c:	f001 ff2a 	bl	800b5b4 <vPortExitCritical>
				return pdPASS;
 8009760:	2301      	movs	r3, #1
 8009762:	e063      	b.n	800982c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d103      	bne.n	8009772 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800976a:	f001 ff23 	bl	800b5b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800976e:	2300      	movs	r3, #0
 8009770:	e05c      	b.n	800982c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009774:	2b00      	cmp	r3, #0
 8009776:	d106      	bne.n	8009786 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009778:	f107 0314 	add.w	r3, r7, #20
 800977c:	4618      	mov	r0, r3
 800977e:	f001 f82f 	bl	800a7e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009782:	2301      	movs	r3, #1
 8009784:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009786:	f001 ff15 	bl	800b5b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800978a:	f000 fd9b 	bl	800a2c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800978e:	f001 fee1 	bl	800b554 <vPortEnterCritical>
 8009792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009794:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009798:	b25b      	sxtb	r3, r3
 800979a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800979e:	d103      	bne.n	80097a8 <xQueueGenericSend+0x16c>
 80097a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a2:	2200      	movs	r2, #0
 80097a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80097ae:	b25b      	sxtb	r3, r3
 80097b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097b4:	d103      	bne.n	80097be <xQueueGenericSend+0x182>
 80097b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b8:	2200      	movs	r2, #0
 80097ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80097be:	f001 fef9 	bl	800b5b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80097c2:	1d3a      	adds	r2, r7, #4
 80097c4:	f107 0314 	add.w	r3, r7, #20
 80097c8:	4611      	mov	r1, r2
 80097ca:	4618      	mov	r0, r3
 80097cc:	f001 f81e 	bl	800a80c <xTaskCheckForTimeOut>
 80097d0:	4603      	mov	r3, r0
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d124      	bne.n	8009820 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80097d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097d8:	f000 faa2 	bl	8009d20 <prvIsQueueFull>
 80097dc:	4603      	mov	r3, r0
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d018      	beq.n	8009814 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80097e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e4:	3310      	adds	r3, #16
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	4611      	mov	r1, r2
 80097ea:	4618      	mov	r0, r3
 80097ec:	f000 ff44 	bl	800a678 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80097f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097f2:	f000 fa2d 	bl	8009c50 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80097f6:	f000 fd73 	bl	800a2e0 <xTaskResumeAll>
 80097fa:	4603      	mov	r3, r0
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	f47f af7c 	bne.w	80096fa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009802:	4b0c      	ldr	r3, [pc, #48]	; (8009834 <xQueueGenericSend+0x1f8>)
 8009804:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009808:	601a      	str	r2, [r3, #0]
 800980a:	f3bf 8f4f 	dsb	sy
 800980e:	f3bf 8f6f 	isb	sy
 8009812:	e772      	b.n	80096fa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009814:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009816:	f000 fa1b 	bl	8009c50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800981a:	f000 fd61 	bl	800a2e0 <xTaskResumeAll>
 800981e:	e76c      	b.n	80096fa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009820:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009822:	f000 fa15 	bl	8009c50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009826:	f000 fd5b 	bl	800a2e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800982a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800982c:	4618      	mov	r0, r3
 800982e:	3738      	adds	r7, #56	; 0x38
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}
 8009834:	e000ed04 	.word	0xe000ed04

08009838 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b090      	sub	sp, #64	; 0x40
 800983c:	af00      	add	r7, sp, #0
 800983e:	60f8      	str	r0, [r7, #12]
 8009840:	60b9      	str	r1, [r7, #8]
 8009842:	607a      	str	r2, [r7, #4]
 8009844:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800984a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800984c:	2b00      	cmp	r3, #0
 800984e:	d10a      	bne.n	8009866 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009854:	f383 8811 	msr	BASEPRI, r3
 8009858:	f3bf 8f6f 	isb	sy
 800985c:	f3bf 8f4f 	dsb	sy
 8009860:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009862:	bf00      	nop
 8009864:	e7fe      	b.n	8009864 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d103      	bne.n	8009874 <xQueueGenericSendFromISR+0x3c>
 800986c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800986e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009870:	2b00      	cmp	r3, #0
 8009872:	d101      	bne.n	8009878 <xQueueGenericSendFromISR+0x40>
 8009874:	2301      	movs	r3, #1
 8009876:	e000      	b.n	800987a <xQueueGenericSendFromISR+0x42>
 8009878:	2300      	movs	r3, #0
 800987a:	2b00      	cmp	r3, #0
 800987c:	d10a      	bne.n	8009894 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800987e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009882:	f383 8811 	msr	BASEPRI, r3
 8009886:	f3bf 8f6f 	isb	sy
 800988a:	f3bf 8f4f 	dsb	sy
 800988e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009890:	bf00      	nop
 8009892:	e7fe      	b.n	8009892 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	2b02      	cmp	r3, #2
 8009898:	d103      	bne.n	80098a2 <xQueueGenericSendFromISR+0x6a>
 800989a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800989c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800989e:	2b01      	cmp	r3, #1
 80098a0:	d101      	bne.n	80098a6 <xQueueGenericSendFromISR+0x6e>
 80098a2:	2301      	movs	r3, #1
 80098a4:	e000      	b.n	80098a8 <xQueueGenericSendFromISR+0x70>
 80098a6:	2300      	movs	r3, #0
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d10a      	bne.n	80098c2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80098ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b0:	f383 8811 	msr	BASEPRI, r3
 80098b4:	f3bf 8f6f 	isb	sy
 80098b8:	f3bf 8f4f 	dsb	sy
 80098bc:	623b      	str	r3, [r7, #32]
}
 80098be:	bf00      	nop
 80098c0:	e7fe      	b.n	80098c0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80098c2:	f001 ff29 	bl	800b718 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80098c6:	f3ef 8211 	mrs	r2, BASEPRI
 80098ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ce:	f383 8811 	msr	BASEPRI, r3
 80098d2:	f3bf 8f6f 	isb	sy
 80098d6:	f3bf 8f4f 	dsb	sy
 80098da:	61fa      	str	r2, [r7, #28]
 80098dc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80098de:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80098e0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80098e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d302      	bcc.n	80098f4 <xQueueGenericSendFromISR+0xbc>
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	2b02      	cmp	r3, #2
 80098f2:	d12f      	bne.n	8009954 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80098f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80098fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80098fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009902:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009904:	683a      	ldr	r2, [r7, #0]
 8009906:	68b9      	ldr	r1, [r7, #8]
 8009908:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800990a:	f000 f911 	bl	8009b30 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800990e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009916:	d112      	bne.n	800993e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800991a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800991c:	2b00      	cmp	r3, #0
 800991e:	d016      	beq.n	800994e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009922:	3324      	adds	r3, #36	; 0x24
 8009924:	4618      	mov	r0, r3
 8009926:	f000 fef7 	bl	800a718 <xTaskRemoveFromEventList>
 800992a:	4603      	mov	r3, r0
 800992c:	2b00      	cmp	r3, #0
 800992e:	d00e      	beq.n	800994e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d00b      	beq.n	800994e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2201      	movs	r2, #1
 800993a:	601a      	str	r2, [r3, #0]
 800993c:	e007      	b.n	800994e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800993e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009942:	3301      	adds	r3, #1
 8009944:	b2db      	uxtb	r3, r3
 8009946:	b25a      	sxtb	r2, r3
 8009948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800994a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800994e:	2301      	movs	r3, #1
 8009950:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009952:	e001      	b.n	8009958 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009954:	2300      	movs	r3, #0
 8009956:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800995a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009962:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009966:	4618      	mov	r0, r3
 8009968:	3740      	adds	r7, #64	; 0x40
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}
	...

08009970 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b08c      	sub	sp, #48	; 0x30
 8009974:	af00      	add	r7, sp, #0
 8009976:	60f8      	str	r0, [r7, #12]
 8009978:	60b9      	str	r1, [r7, #8]
 800997a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800997c:	2300      	movs	r3, #0
 800997e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009986:	2b00      	cmp	r3, #0
 8009988:	d10a      	bne.n	80099a0 <xQueueReceive+0x30>
	__asm volatile
 800998a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800998e:	f383 8811 	msr	BASEPRI, r3
 8009992:	f3bf 8f6f 	isb	sy
 8009996:	f3bf 8f4f 	dsb	sy
 800999a:	623b      	str	r3, [r7, #32]
}
 800999c:	bf00      	nop
 800999e:	e7fe      	b.n	800999e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d103      	bne.n	80099ae <xQueueReceive+0x3e>
 80099a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d101      	bne.n	80099b2 <xQueueReceive+0x42>
 80099ae:	2301      	movs	r3, #1
 80099b0:	e000      	b.n	80099b4 <xQueueReceive+0x44>
 80099b2:	2300      	movs	r3, #0
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d10a      	bne.n	80099ce <xQueueReceive+0x5e>
	__asm volatile
 80099b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099bc:	f383 8811 	msr	BASEPRI, r3
 80099c0:	f3bf 8f6f 	isb	sy
 80099c4:	f3bf 8f4f 	dsb	sy
 80099c8:	61fb      	str	r3, [r7, #28]
}
 80099ca:	bf00      	nop
 80099cc:	e7fe      	b.n	80099cc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80099ce:	f001 f865 	bl	800aa9c <xTaskGetSchedulerState>
 80099d2:	4603      	mov	r3, r0
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d102      	bne.n	80099de <xQueueReceive+0x6e>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d101      	bne.n	80099e2 <xQueueReceive+0x72>
 80099de:	2301      	movs	r3, #1
 80099e0:	e000      	b.n	80099e4 <xQueueReceive+0x74>
 80099e2:	2300      	movs	r3, #0
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d10a      	bne.n	80099fe <xQueueReceive+0x8e>
	__asm volatile
 80099e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ec:	f383 8811 	msr	BASEPRI, r3
 80099f0:	f3bf 8f6f 	isb	sy
 80099f4:	f3bf 8f4f 	dsb	sy
 80099f8:	61bb      	str	r3, [r7, #24]
}
 80099fa:	bf00      	nop
 80099fc:	e7fe      	b.n	80099fc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80099fe:	f001 fda9 	bl	800b554 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a06:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d01f      	beq.n	8009a4e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009a0e:	68b9      	ldr	r1, [r7, #8]
 8009a10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a12:	f000 f8f7 	bl	8009c04 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a18:	1e5a      	subs	r2, r3, #1
 8009a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a1c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a20:	691b      	ldr	r3, [r3, #16]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d00f      	beq.n	8009a46 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a28:	3310      	adds	r3, #16
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f000 fe74 	bl	800a718 <xTaskRemoveFromEventList>
 8009a30:	4603      	mov	r3, r0
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d007      	beq.n	8009a46 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009a36:	4b3d      	ldr	r3, [pc, #244]	; (8009b2c <xQueueReceive+0x1bc>)
 8009a38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a3c:	601a      	str	r2, [r3, #0]
 8009a3e:	f3bf 8f4f 	dsb	sy
 8009a42:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009a46:	f001 fdb5 	bl	800b5b4 <vPortExitCritical>
				return pdPASS;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	e069      	b.n	8009b22 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d103      	bne.n	8009a5c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009a54:	f001 fdae 	bl	800b5b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	e062      	b.n	8009b22 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d106      	bne.n	8009a70 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009a62:	f107 0310 	add.w	r3, r7, #16
 8009a66:	4618      	mov	r0, r3
 8009a68:	f000 feba 	bl	800a7e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009a70:	f001 fda0 	bl	800b5b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009a74:	f000 fc26 	bl	800a2c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009a78:	f001 fd6c 	bl	800b554 <vPortEnterCritical>
 8009a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a82:	b25b      	sxtb	r3, r3
 8009a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a88:	d103      	bne.n	8009a92 <xQueueReceive+0x122>
 8009a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a98:	b25b      	sxtb	r3, r3
 8009a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a9e:	d103      	bne.n	8009aa8 <xQueueReceive+0x138>
 8009aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009aa8:	f001 fd84 	bl	800b5b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009aac:	1d3a      	adds	r2, r7, #4
 8009aae:	f107 0310 	add.w	r3, r7, #16
 8009ab2:	4611      	mov	r1, r2
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f000 fea9 	bl	800a80c <xTaskCheckForTimeOut>
 8009aba:	4603      	mov	r3, r0
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d123      	bne.n	8009b08 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009ac0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ac2:	f000 f917 	bl	8009cf4 <prvIsQueueEmpty>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d017      	beq.n	8009afc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ace:	3324      	adds	r3, #36	; 0x24
 8009ad0:	687a      	ldr	r2, [r7, #4]
 8009ad2:	4611      	mov	r1, r2
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f000 fdcf 	bl	800a678 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009ada:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009adc:	f000 f8b8 	bl	8009c50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009ae0:	f000 fbfe 	bl	800a2e0 <xTaskResumeAll>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d189      	bne.n	80099fe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009aea:	4b10      	ldr	r3, [pc, #64]	; (8009b2c <xQueueReceive+0x1bc>)
 8009aec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009af0:	601a      	str	r2, [r3, #0]
 8009af2:	f3bf 8f4f 	dsb	sy
 8009af6:	f3bf 8f6f 	isb	sy
 8009afa:	e780      	b.n	80099fe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009afc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009afe:	f000 f8a7 	bl	8009c50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009b02:	f000 fbed 	bl	800a2e0 <xTaskResumeAll>
 8009b06:	e77a      	b.n	80099fe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009b08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b0a:	f000 f8a1 	bl	8009c50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009b0e:	f000 fbe7 	bl	800a2e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b14:	f000 f8ee 	bl	8009cf4 <prvIsQueueEmpty>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	f43f af6f 	beq.w	80099fe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009b20:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3730      	adds	r7, #48	; 0x30
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}
 8009b2a:	bf00      	nop
 8009b2c:	e000ed04 	.word	0xe000ed04

08009b30 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b086      	sub	sp, #24
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	60f8      	str	r0, [r7, #12]
 8009b38:	60b9      	str	r1, [r7, #8]
 8009b3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b44:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d10d      	bne.n	8009b6a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d14d      	bne.n	8009bf2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	689b      	ldr	r3, [r3, #8]
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f000 ffbc 	bl	800aad8 <xTaskPriorityDisinherit>
 8009b60:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2200      	movs	r2, #0
 8009b66:	609a      	str	r2, [r3, #8]
 8009b68:	e043      	b.n	8009bf2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d119      	bne.n	8009ba4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	6858      	ldr	r0, [r3, #4]
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b78:	461a      	mov	r2, r3
 8009b7a:	68b9      	ldr	r1, [r7, #8]
 8009b7c:	f002 f919 	bl	800bdb2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	685a      	ldr	r2, [r3, #4]
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b88:	441a      	add	r2, r3
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	685a      	ldr	r2, [r3, #4]
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	689b      	ldr	r3, [r3, #8]
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d32b      	bcc.n	8009bf2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681a      	ldr	r2, [r3, #0]
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	605a      	str	r2, [r3, #4]
 8009ba2:	e026      	b.n	8009bf2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	68d8      	ldr	r0, [r3, #12]
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bac:	461a      	mov	r2, r3
 8009bae:	68b9      	ldr	r1, [r7, #8]
 8009bb0:	f002 f8ff 	bl	800bdb2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	68da      	ldr	r2, [r3, #12]
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bbc:	425b      	negs	r3, r3
 8009bbe:	441a      	add	r2, r3
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	68da      	ldr	r2, [r3, #12]
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d207      	bcs.n	8009be0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	689a      	ldr	r2, [r3, #8]
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bd8:	425b      	negs	r3, r3
 8009bda:	441a      	add	r2, r3
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2b02      	cmp	r3, #2
 8009be4:	d105      	bne.n	8009bf2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d002      	beq.n	8009bf2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	3b01      	subs	r3, #1
 8009bf0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	1c5a      	adds	r2, r3, #1
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009bfa:	697b      	ldr	r3, [r7, #20]
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3718      	adds	r7, #24
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}

08009c04 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b082      	sub	sp, #8
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d018      	beq.n	8009c48 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	68da      	ldr	r2, [r3, #12]
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c1e:	441a      	add	r2, r3
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	68da      	ldr	r2, [r3, #12]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	689b      	ldr	r3, [r3, #8]
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d303      	bcc.n	8009c38 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	68d9      	ldr	r1, [r3, #12]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c40:	461a      	mov	r2, r3
 8009c42:	6838      	ldr	r0, [r7, #0]
 8009c44:	f002 f8b5 	bl	800bdb2 <memcpy>
	}
}
 8009c48:	bf00      	nop
 8009c4a:	3708      	adds	r7, #8
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}

08009c50 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b084      	sub	sp, #16
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009c58:	f001 fc7c 	bl	800b554 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c62:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009c64:	e011      	b.n	8009c8a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d012      	beq.n	8009c94 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	3324      	adds	r3, #36	; 0x24
 8009c72:	4618      	mov	r0, r3
 8009c74:	f000 fd50 	bl	800a718 <xTaskRemoveFromEventList>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d001      	beq.n	8009c82 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009c7e:	f000 fe27 	bl	800a8d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009c82:	7bfb      	ldrb	r3, [r7, #15]
 8009c84:	3b01      	subs	r3, #1
 8009c86:	b2db      	uxtb	r3, r3
 8009c88:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	dce9      	bgt.n	8009c66 <prvUnlockQueue+0x16>
 8009c92:	e000      	b.n	8009c96 <prvUnlockQueue+0x46>
					break;
 8009c94:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	22ff      	movs	r2, #255	; 0xff
 8009c9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009c9e:	f001 fc89 	bl	800b5b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009ca2:	f001 fc57 	bl	800b554 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009cac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009cae:	e011      	b.n	8009cd4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	691b      	ldr	r3, [r3, #16]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d012      	beq.n	8009cde <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	3310      	adds	r3, #16
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f000 fd2b 	bl	800a718 <xTaskRemoveFromEventList>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d001      	beq.n	8009ccc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009cc8:	f000 fe02 	bl	800a8d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009ccc:	7bbb      	ldrb	r3, [r7, #14]
 8009cce:	3b01      	subs	r3, #1
 8009cd0:	b2db      	uxtb	r3, r3
 8009cd2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009cd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	dce9      	bgt.n	8009cb0 <prvUnlockQueue+0x60>
 8009cdc:	e000      	b.n	8009ce0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009cde:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	22ff      	movs	r2, #255	; 0xff
 8009ce4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009ce8:	f001 fc64 	bl	800b5b4 <vPortExitCritical>
}
 8009cec:	bf00      	nop
 8009cee:	3710      	adds	r7, #16
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}

08009cf4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b084      	sub	sp, #16
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009cfc:	f001 fc2a 	bl	800b554 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d102      	bne.n	8009d0e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009d08:	2301      	movs	r3, #1
 8009d0a:	60fb      	str	r3, [r7, #12]
 8009d0c:	e001      	b.n	8009d12 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009d12:	f001 fc4f 	bl	800b5b4 <vPortExitCritical>

	return xReturn;
 8009d16:	68fb      	ldr	r3, [r7, #12]
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3710      	adds	r7, #16
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}

08009d20 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009d28:	f001 fc14 	bl	800b554 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d102      	bne.n	8009d3e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	60fb      	str	r3, [r7, #12]
 8009d3c:	e001      	b.n	8009d42 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009d42:	f001 fc37 	bl	800b5b4 <vPortExitCritical>

	return xReturn;
 8009d46:	68fb      	ldr	r3, [r7, #12]
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3710      	adds	r7, #16
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}

08009d50 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009d50:	b480      	push	{r7}
 8009d52:	b085      	sub	sp, #20
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
 8009d58:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	60fb      	str	r3, [r7, #12]
 8009d5e:	e014      	b.n	8009d8a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009d60:	4a0f      	ldr	r2, [pc, #60]	; (8009da0 <vQueueAddToRegistry+0x50>)
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d10b      	bne.n	8009d84 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009d6c:	490c      	ldr	r1, [pc, #48]	; (8009da0 <vQueueAddToRegistry+0x50>)
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	683a      	ldr	r2, [r7, #0]
 8009d72:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009d76:	4a0a      	ldr	r2, [pc, #40]	; (8009da0 <vQueueAddToRegistry+0x50>)
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	00db      	lsls	r3, r3, #3
 8009d7c:	4413      	add	r3, r2
 8009d7e:	687a      	ldr	r2, [r7, #4]
 8009d80:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009d82:	e006      	b.n	8009d92 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	3301      	adds	r3, #1
 8009d88:	60fb      	str	r3, [r7, #12]
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	2b07      	cmp	r3, #7
 8009d8e:	d9e7      	bls.n	8009d60 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009d90:	bf00      	nop
 8009d92:	bf00      	nop
 8009d94:	3714      	adds	r7, #20
 8009d96:	46bd      	mov	sp, r7
 8009d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9c:	4770      	bx	lr
 8009d9e:	bf00      	nop
 8009da0:	2000142c 	.word	0x2000142c

08009da4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b086      	sub	sp, #24
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	60f8      	str	r0, [r7, #12]
 8009dac:	60b9      	str	r1, [r7, #8]
 8009dae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009db4:	f001 fbce 	bl	800b554 <vPortEnterCritical>
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009dbe:	b25b      	sxtb	r3, r3
 8009dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dc4:	d103      	bne.n	8009dce <vQueueWaitForMessageRestricted+0x2a>
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009dd4:	b25b      	sxtb	r3, r3
 8009dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dda:	d103      	bne.n	8009de4 <vQueueWaitForMessageRestricted+0x40>
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	2200      	movs	r2, #0
 8009de0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009de4:	f001 fbe6 	bl	800b5b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d106      	bne.n	8009dfe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	3324      	adds	r3, #36	; 0x24
 8009df4:	687a      	ldr	r2, [r7, #4]
 8009df6:	68b9      	ldr	r1, [r7, #8]
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f000 fc61 	bl	800a6c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009dfe:	6978      	ldr	r0, [r7, #20]
 8009e00:	f7ff ff26 	bl	8009c50 <prvUnlockQueue>
	}
 8009e04:	bf00      	nop
 8009e06:	3718      	adds	r7, #24
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}

08009e0c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b08e      	sub	sp, #56	; 0x38
 8009e10:	af04      	add	r7, sp, #16
 8009e12:	60f8      	str	r0, [r7, #12]
 8009e14:	60b9      	str	r1, [r7, #8]
 8009e16:	607a      	str	r2, [r7, #4]
 8009e18:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d10a      	bne.n	8009e36 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e24:	f383 8811 	msr	BASEPRI, r3
 8009e28:	f3bf 8f6f 	isb	sy
 8009e2c:	f3bf 8f4f 	dsb	sy
 8009e30:	623b      	str	r3, [r7, #32]
}
 8009e32:	bf00      	nop
 8009e34:	e7fe      	b.n	8009e34 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d10a      	bne.n	8009e52 <xTaskCreateStatic+0x46>
	__asm volatile
 8009e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e40:	f383 8811 	msr	BASEPRI, r3
 8009e44:	f3bf 8f6f 	isb	sy
 8009e48:	f3bf 8f4f 	dsb	sy
 8009e4c:	61fb      	str	r3, [r7, #28]
}
 8009e4e:	bf00      	nop
 8009e50:	e7fe      	b.n	8009e50 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009e52:	23bc      	movs	r3, #188	; 0xbc
 8009e54:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	2bbc      	cmp	r3, #188	; 0xbc
 8009e5a:	d00a      	beq.n	8009e72 <xTaskCreateStatic+0x66>
	__asm volatile
 8009e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e60:	f383 8811 	msr	BASEPRI, r3
 8009e64:	f3bf 8f6f 	isb	sy
 8009e68:	f3bf 8f4f 	dsb	sy
 8009e6c:	61bb      	str	r3, [r7, #24]
}
 8009e6e:	bf00      	nop
 8009e70:	e7fe      	b.n	8009e70 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009e72:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d01e      	beq.n	8009eb8 <xTaskCreateStatic+0xac>
 8009e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d01b      	beq.n	8009eb8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e82:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e88:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8c:	2202      	movs	r2, #2
 8009e8e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009e92:	2300      	movs	r3, #0
 8009e94:	9303      	str	r3, [sp, #12]
 8009e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e98:	9302      	str	r3, [sp, #8]
 8009e9a:	f107 0314 	add.w	r3, r7, #20
 8009e9e:	9301      	str	r3, [sp, #4]
 8009ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea2:	9300      	str	r3, [sp, #0]
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	687a      	ldr	r2, [r7, #4]
 8009ea8:	68b9      	ldr	r1, [r7, #8]
 8009eaa:	68f8      	ldr	r0, [r7, #12]
 8009eac:	f000 f850 	bl	8009f50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009eb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009eb2:	f000 f8f3 	bl	800a09c <prvAddNewTaskToReadyList>
 8009eb6:	e001      	b.n	8009ebc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009ebc:	697b      	ldr	r3, [r7, #20]
	}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3728      	adds	r7, #40	; 0x28
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}

08009ec6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009ec6:	b580      	push	{r7, lr}
 8009ec8:	b08c      	sub	sp, #48	; 0x30
 8009eca:	af04      	add	r7, sp, #16
 8009ecc:	60f8      	str	r0, [r7, #12]
 8009ece:	60b9      	str	r1, [r7, #8]
 8009ed0:	603b      	str	r3, [r7, #0]
 8009ed2:	4613      	mov	r3, r2
 8009ed4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009ed6:	88fb      	ldrh	r3, [r7, #6]
 8009ed8:	009b      	lsls	r3, r3, #2
 8009eda:	4618      	mov	r0, r3
 8009edc:	f001 fc5c 	bl	800b798 <pvPortMalloc>
 8009ee0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d00e      	beq.n	8009f06 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009ee8:	20bc      	movs	r0, #188	; 0xbc
 8009eea:	f001 fc55 	bl	800b798 <pvPortMalloc>
 8009eee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009ef0:	69fb      	ldr	r3, [r7, #28]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d003      	beq.n	8009efe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009ef6:	69fb      	ldr	r3, [r7, #28]
 8009ef8:	697a      	ldr	r2, [r7, #20]
 8009efa:	631a      	str	r2, [r3, #48]	; 0x30
 8009efc:	e005      	b.n	8009f0a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009efe:	6978      	ldr	r0, [r7, #20]
 8009f00:	f001 fd16 	bl	800b930 <vPortFree>
 8009f04:	e001      	b.n	8009f0a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009f06:	2300      	movs	r3, #0
 8009f08:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009f0a:	69fb      	ldr	r3, [r7, #28]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d017      	beq.n	8009f40 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009f10:	69fb      	ldr	r3, [r7, #28]
 8009f12:	2200      	movs	r2, #0
 8009f14:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009f18:	88fa      	ldrh	r2, [r7, #6]
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	9303      	str	r3, [sp, #12]
 8009f1e:	69fb      	ldr	r3, [r7, #28]
 8009f20:	9302      	str	r3, [sp, #8]
 8009f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f24:	9301      	str	r3, [sp, #4]
 8009f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f28:	9300      	str	r3, [sp, #0]
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	68b9      	ldr	r1, [r7, #8]
 8009f2e:	68f8      	ldr	r0, [r7, #12]
 8009f30:	f000 f80e 	bl	8009f50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009f34:	69f8      	ldr	r0, [r7, #28]
 8009f36:	f000 f8b1 	bl	800a09c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	61bb      	str	r3, [r7, #24]
 8009f3e:	e002      	b.n	8009f46 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009f40:	f04f 33ff 	mov.w	r3, #4294967295
 8009f44:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009f46:	69bb      	ldr	r3, [r7, #24]
	}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3720      	adds	r7, #32
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b088      	sub	sp, #32
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	60f8      	str	r0, [r7, #12]
 8009f58:	60b9      	str	r1, [r7, #8]
 8009f5a:	607a      	str	r2, [r7, #4]
 8009f5c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f60:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	009b      	lsls	r3, r3, #2
 8009f66:	461a      	mov	r2, r3
 8009f68:	21a5      	movs	r1, #165	; 0xa5
 8009f6a:	f001 ff30 	bl	800bdce <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009f78:	3b01      	subs	r3, #1
 8009f7a:	009b      	lsls	r3, r3, #2
 8009f7c:	4413      	add	r3, r2
 8009f7e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009f80:	69bb      	ldr	r3, [r7, #24]
 8009f82:	f023 0307 	bic.w	r3, r3, #7
 8009f86:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009f88:	69bb      	ldr	r3, [r7, #24]
 8009f8a:	f003 0307 	and.w	r3, r3, #7
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d00a      	beq.n	8009fa8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f96:	f383 8811 	msr	BASEPRI, r3
 8009f9a:	f3bf 8f6f 	isb	sy
 8009f9e:	f3bf 8f4f 	dsb	sy
 8009fa2:	617b      	str	r3, [r7, #20]
}
 8009fa4:	bf00      	nop
 8009fa6:	e7fe      	b.n	8009fa6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d01f      	beq.n	8009fee <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009fae:	2300      	movs	r3, #0
 8009fb0:	61fb      	str	r3, [r7, #28]
 8009fb2:	e012      	b.n	8009fda <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009fb4:	68ba      	ldr	r2, [r7, #8]
 8009fb6:	69fb      	ldr	r3, [r7, #28]
 8009fb8:	4413      	add	r3, r2
 8009fba:	7819      	ldrb	r1, [r3, #0]
 8009fbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fbe:	69fb      	ldr	r3, [r7, #28]
 8009fc0:	4413      	add	r3, r2
 8009fc2:	3334      	adds	r3, #52	; 0x34
 8009fc4:	460a      	mov	r2, r1
 8009fc6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009fc8:	68ba      	ldr	r2, [r7, #8]
 8009fca:	69fb      	ldr	r3, [r7, #28]
 8009fcc:	4413      	add	r3, r2
 8009fce:	781b      	ldrb	r3, [r3, #0]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d006      	beq.n	8009fe2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009fd4:	69fb      	ldr	r3, [r7, #28]
 8009fd6:	3301      	adds	r3, #1
 8009fd8:	61fb      	str	r3, [r7, #28]
 8009fda:	69fb      	ldr	r3, [r7, #28]
 8009fdc:	2b0f      	cmp	r3, #15
 8009fde:	d9e9      	bls.n	8009fb4 <prvInitialiseNewTask+0x64>
 8009fe0:	e000      	b.n	8009fe4 <prvInitialiseNewTask+0x94>
			{
				break;
 8009fe2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009fec:	e003      	b.n	8009ff6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ff8:	2b37      	cmp	r3, #55	; 0x37
 8009ffa:	d901      	bls.n	800a000 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009ffc:	2337      	movs	r3, #55	; 0x37
 8009ffe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a002:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a004:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a008:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a00a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a00e:	2200      	movs	r2, #0
 800a010:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a014:	3304      	adds	r3, #4
 800a016:	4618      	mov	r0, r3
 800a018:	f7ff f978 	bl	800930c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a01c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a01e:	3318      	adds	r3, #24
 800a020:	4618      	mov	r0, r3
 800a022:	f7ff f973 	bl	800930c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a028:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a02a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a02e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a034:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a038:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a03a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a03c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a03e:	2200      	movs	r2, #0
 800a040:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a046:	2200      	movs	r2, #0
 800a048:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a04e:	3354      	adds	r3, #84	; 0x54
 800a050:	2260      	movs	r2, #96	; 0x60
 800a052:	2100      	movs	r1, #0
 800a054:	4618      	mov	r0, r3
 800a056:	f001 feba 	bl	800bdce <memset>
 800a05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a05c:	4a0c      	ldr	r2, [pc, #48]	; (800a090 <prvInitialiseNewTask+0x140>)
 800a05e:	659a      	str	r2, [r3, #88]	; 0x58
 800a060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a062:	4a0c      	ldr	r2, [pc, #48]	; (800a094 <prvInitialiseNewTask+0x144>)
 800a064:	65da      	str	r2, [r3, #92]	; 0x5c
 800a066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a068:	4a0b      	ldr	r2, [pc, #44]	; (800a098 <prvInitialiseNewTask+0x148>)
 800a06a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a06c:	683a      	ldr	r2, [r7, #0]
 800a06e:	68f9      	ldr	r1, [r7, #12]
 800a070:	69b8      	ldr	r0, [r7, #24]
 800a072:	f001 f941 	bl	800b2f8 <pxPortInitialiseStack>
 800a076:	4602      	mov	r2, r0
 800a078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a07a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d002      	beq.n	800a088 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a086:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a088:	bf00      	nop
 800a08a:	3720      	adds	r7, #32
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}
 800a090:	0800cfb8 	.word	0x0800cfb8
 800a094:	0800cfd8 	.word	0x0800cfd8
 800a098:	0800cf98 	.word	0x0800cf98

0800a09c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b082      	sub	sp, #8
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a0a4:	f001 fa56 	bl	800b554 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a0a8:	4b2d      	ldr	r3, [pc, #180]	; (800a160 <prvAddNewTaskToReadyList+0xc4>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	3301      	adds	r3, #1
 800a0ae:	4a2c      	ldr	r2, [pc, #176]	; (800a160 <prvAddNewTaskToReadyList+0xc4>)
 800a0b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a0b2:	4b2c      	ldr	r3, [pc, #176]	; (800a164 <prvAddNewTaskToReadyList+0xc8>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d109      	bne.n	800a0ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a0ba:	4a2a      	ldr	r2, [pc, #168]	; (800a164 <prvAddNewTaskToReadyList+0xc8>)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a0c0:	4b27      	ldr	r3, [pc, #156]	; (800a160 <prvAddNewTaskToReadyList+0xc4>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	d110      	bne.n	800a0ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a0c8:	f000 fc26 	bl	800a918 <prvInitialiseTaskLists>
 800a0cc:	e00d      	b.n	800a0ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a0ce:	4b26      	ldr	r3, [pc, #152]	; (800a168 <prvAddNewTaskToReadyList+0xcc>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d109      	bne.n	800a0ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a0d6:	4b23      	ldr	r3, [pc, #140]	; (800a164 <prvAddNewTaskToReadyList+0xc8>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0e0:	429a      	cmp	r2, r3
 800a0e2:	d802      	bhi.n	800a0ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a0e4:	4a1f      	ldr	r2, [pc, #124]	; (800a164 <prvAddNewTaskToReadyList+0xc8>)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a0ea:	4b20      	ldr	r3, [pc, #128]	; (800a16c <prvAddNewTaskToReadyList+0xd0>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	4a1e      	ldr	r2, [pc, #120]	; (800a16c <prvAddNewTaskToReadyList+0xd0>)
 800a0f2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a0f4:	4b1d      	ldr	r3, [pc, #116]	; (800a16c <prvAddNewTaskToReadyList+0xd0>)
 800a0f6:	681a      	ldr	r2, [r3, #0]
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a100:	4b1b      	ldr	r3, [pc, #108]	; (800a170 <prvAddNewTaskToReadyList+0xd4>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	429a      	cmp	r2, r3
 800a106:	d903      	bls.n	800a110 <prvAddNewTaskToReadyList+0x74>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a10c:	4a18      	ldr	r2, [pc, #96]	; (800a170 <prvAddNewTaskToReadyList+0xd4>)
 800a10e:	6013      	str	r3, [r2, #0]
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a114:	4613      	mov	r3, r2
 800a116:	009b      	lsls	r3, r3, #2
 800a118:	4413      	add	r3, r2
 800a11a:	009b      	lsls	r3, r3, #2
 800a11c:	4a15      	ldr	r2, [pc, #84]	; (800a174 <prvAddNewTaskToReadyList+0xd8>)
 800a11e:	441a      	add	r2, r3
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	3304      	adds	r3, #4
 800a124:	4619      	mov	r1, r3
 800a126:	4610      	mov	r0, r2
 800a128:	f7ff f8fd 	bl	8009326 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a12c:	f001 fa42 	bl	800b5b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a130:	4b0d      	ldr	r3, [pc, #52]	; (800a168 <prvAddNewTaskToReadyList+0xcc>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d00e      	beq.n	800a156 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a138:	4b0a      	ldr	r3, [pc, #40]	; (800a164 <prvAddNewTaskToReadyList+0xc8>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a142:	429a      	cmp	r2, r3
 800a144:	d207      	bcs.n	800a156 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a146:	4b0c      	ldr	r3, [pc, #48]	; (800a178 <prvAddNewTaskToReadyList+0xdc>)
 800a148:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a14c:	601a      	str	r2, [r3, #0]
 800a14e:	f3bf 8f4f 	dsb	sy
 800a152:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a156:	bf00      	nop
 800a158:	3708      	adds	r7, #8
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}
 800a15e:	bf00      	nop
 800a160:	20001940 	.word	0x20001940
 800a164:	2000146c 	.word	0x2000146c
 800a168:	2000194c 	.word	0x2000194c
 800a16c:	2000195c 	.word	0x2000195c
 800a170:	20001948 	.word	0x20001948
 800a174:	20001470 	.word	0x20001470
 800a178:	e000ed04 	.word	0xe000ed04

0800a17c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b084      	sub	sp, #16
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a184:	2300      	movs	r3, #0
 800a186:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d017      	beq.n	800a1be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a18e:	4b13      	ldr	r3, [pc, #76]	; (800a1dc <vTaskDelay+0x60>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d00a      	beq.n	800a1ac <vTaskDelay+0x30>
	__asm volatile
 800a196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a19a:	f383 8811 	msr	BASEPRI, r3
 800a19e:	f3bf 8f6f 	isb	sy
 800a1a2:	f3bf 8f4f 	dsb	sy
 800a1a6:	60bb      	str	r3, [r7, #8]
}
 800a1a8:	bf00      	nop
 800a1aa:	e7fe      	b.n	800a1aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a1ac:	f000 f88a 	bl	800a2c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a1b0:	2100      	movs	r1, #0
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f000 fcfe 	bl	800abb4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a1b8:	f000 f892 	bl	800a2e0 <xTaskResumeAll>
 800a1bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d107      	bne.n	800a1d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a1c4:	4b06      	ldr	r3, [pc, #24]	; (800a1e0 <vTaskDelay+0x64>)
 800a1c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1ca:	601a      	str	r2, [r3, #0]
 800a1cc:	f3bf 8f4f 	dsb	sy
 800a1d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a1d4:	bf00      	nop
 800a1d6:	3710      	adds	r7, #16
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}
 800a1dc:	20001968 	.word	0x20001968
 800a1e0:	e000ed04 	.word	0xe000ed04

0800a1e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b08a      	sub	sp, #40	; 0x28
 800a1e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a1f2:	463a      	mov	r2, r7
 800a1f4:	1d39      	adds	r1, r7, #4
 800a1f6:	f107 0308 	add.w	r3, r7, #8
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f7ff f832 	bl	8009264 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a200:	6839      	ldr	r1, [r7, #0]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	68ba      	ldr	r2, [r7, #8]
 800a206:	9202      	str	r2, [sp, #8]
 800a208:	9301      	str	r3, [sp, #4]
 800a20a:	2300      	movs	r3, #0
 800a20c:	9300      	str	r3, [sp, #0]
 800a20e:	2300      	movs	r3, #0
 800a210:	460a      	mov	r2, r1
 800a212:	4924      	ldr	r1, [pc, #144]	; (800a2a4 <vTaskStartScheduler+0xc0>)
 800a214:	4824      	ldr	r0, [pc, #144]	; (800a2a8 <vTaskStartScheduler+0xc4>)
 800a216:	f7ff fdf9 	bl	8009e0c <xTaskCreateStatic>
 800a21a:	4603      	mov	r3, r0
 800a21c:	4a23      	ldr	r2, [pc, #140]	; (800a2ac <vTaskStartScheduler+0xc8>)
 800a21e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a220:	4b22      	ldr	r3, [pc, #136]	; (800a2ac <vTaskStartScheduler+0xc8>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d002      	beq.n	800a22e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a228:	2301      	movs	r3, #1
 800a22a:	617b      	str	r3, [r7, #20]
 800a22c:	e001      	b.n	800a232 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a22e:	2300      	movs	r3, #0
 800a230:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	2b01      	cmp	r3, #1
 800a236:	d102      	bne.n	800a23e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a238:	f000 fd10 	bl	800ac5c <xTimerCreateTimerTask>
 800a23c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	2b01      	cmp	r3, #1
 800a242:	d11b      	bne.n	800a27c <vTaskStartScheduler+0x98>
	__asm volatile
 800a244:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a248:	f383 8811 	msr	BASEPRI, r3
 800a24c:	f3bf 8f6f 	isb	sy
 800a250:	f3bf 8f4f 	dsb	sy
 800a254:	613b      	str	r3, [r7, #16]
}
 800a256:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a258:	4b15      	ldr	r3, [pc, #84]	; (800a2b0 <vTaskStartScheduler+0xcc>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	3354      	adds	r3, #84	; 0x54
 800a25e:	4a15      	ldr	r2, [pc, #84]	; (800a2b4 <vTaskStartScheduler+0xd0>)
 800a260:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a262:	4b15      	ldr	r3, [pc, #84]	; (800a2b8 <vTaskStartScheduler+0xd4>)
 800a264:	f04f 32ff 	mov.w	r2, #4294967295
 800a268:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a26a:	4b14      	ldr	r3, [pc, #80]	; (800a2bc <vTaskStartScheduler+0xd8>)
 800a26c:	2201      	movs	r2, #1
 800a26e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a270:	4b13      	ldr	r3, [pc, #76]	; (800a2c0 <vTaskStartScheduler+0xdc>)
 800a272:	2200      	movs	r2, #0
 800a274:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a276:	f001 f8cb 	bl	800b410 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a27a:	e00e      	b.n	800a29a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a282:	d10a      	bne.n	800a29a <vTaskStartScheduler+0xb6>
	__asm volatile
 800a284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a288:	f383 8811 	msr	BASEPRI, r3
 800a28c:	f3bf 8f6f 	isb	sy
 800a290:	f3bf 8f4f 	dsb	sy
 800a294:	60fb      	str	r3, [r7, #12]
}
 800a296:	bf00      	nop
 800a298:	e7fe      	b.n	800a298 <vTaskStartScheduler+0xb4>
}
 800a29a:	bf00      	nop
 800a29c:	3718      	adds	r7, #24
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}
 800a2a2:	bf00      	nop
 800a2a4:	0800ce9c 	.word	0x0800ce9c
 800a2a8:	0800a8e9 	.word	0x0800a8e9
 800a2ac:	20001964 	.word	0x20001964
 800a2b0:	2000146c 	.word	0x2000146c
 800a2b4:	200000b0 	.word	0x200000b0
 800a2b8:	20001960 	.word	0x20001960
 800a2bc:	2000194c 	.word	0x2000194c
 800a2c0:	20001944 	.word	0x20001944

0800a2c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a2c8:	4b04      	ldr	r3, [pc, #16]	; (800a2dc <vTaskSuspendAll+0x18>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	3301      	adds	r3, #1
 800a2ce:	4a03      	ldr	r2, [pc, #12]	; (800a2dc <vTaskSuspendAll+0x18>)
 800a2d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a2d2:	bf00      	nop
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr
 800a2dc:	20001968 	.word	0x20001968

0800a2e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b084      	sub	sp, #16
 800a2e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a2ee:	4b42      	ldr	r3, [pc, #264]	; (800a3f8 <xTaskResumeAll+0x118>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d10a      	bne.n	800a30c <xTaskResumeAll+0x2c>
	__asm volatile
 800a2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2fa:	f383 8811 	msr	BASEPRI, r3
 800a2fe:	f3bf 8f6f 	isb	sy
 800a302:	f3bf 8f4f 	dsb	sy
 800a306:	603b      	str	r3, [r7, #0]
}
 800a308:	bf00      	nop
 800a30a:	e7fe      	b.n	800a30a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a30c:	f001 f922 	bl	800b554 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a310:	4b39      	ldr	r3, [pc, #228]	; (800a3f8 <xTaskResumeAll+0x118>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	3b01      	subs	r3, #1
 800a316:	4a38      	ldr	r2, [pc, #224]	; (800a3f8 <xTaskResumeAll+0x118>)
 800a318:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a31a:	4b37      	ldr	r3, [pc, #220]	; (800a3f8 <xTaskResumeAll+0x118>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d162      	bne.n	800a3e8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a322:	4b36      	ldr	r3, [pc, #216]	; (800a3fc <xTaskResumeAll+0x11c>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d05e      	beq.n	800a3e8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a32a:	e02f      	b.n	800a38c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a32c:	4b34      	ldr	r3, [pc, #208]	; (800a400 <xTaskResumeAll+0x120>)
 800a32e:	68db      	ldr	r3, [r3, #12]
 800a330:	68db      	ldr	r3, [r3, #12]
 800a332:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	3318      	adds	r3, #24
 800a338:	4618      	mov	r0, r3
 800a33a:	f7ff f851 	bl	80093e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	3304      	adds	r3, #4
 800a342:	4618      	mov	r0, r3
 800a344:	f7ff f84c 	bl	80093e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a34c:	4b2d      	ldr	r3, [pc, #180]	; (800a404 <xTaskResumeAll+0x124>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	429a      	cmp	r2, r3
 800a352:	d903      	bls.n	800a35c <xTaskResumeAll+0x7c>
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a358:	4a2a      	ldr	r2, [pc, #168]	; (800a404 <xTaskResumeAll+0x124>)
 800a35a:	6013      	str	r3, [r2, #0]
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a360:	4613      	mov	r3, r2
 800a362:	009b      	lsls	r3, r3, #2
 800a364:	4413      	add	r3, r2
 800a366:	009b      	lsls	r3, r3, #2
 800a368:	4a27      	ldr	r2, [pc, #156]	; (800a408 <xTaskResumeAll+0x128>)
 800a36a:	441a      	add	r2, r3
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	3304      	adds	r3, #4
 800a370:	4619      	mov	r1, r3
 800a372:	4610      	mov	r0, r2
 800a374:	f7fe ffd7 	bl	8009326 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a37c:	4b23      	ldr	r3, [pc, #140]	; (800a40c <xTaskResumeAll+0x12c>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a382:	429a      	cmp	r2, r3
 800a384:	d302      	bcc.n	800a38c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a386:	4b22      	ldr	r3, [pc, #136]	; (800a410 <xTaskResumeAll+0x130>)
 800a388:	2201      	movs	r2, #1
 800a38a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a38c:	4b1c      	ldr	r3, [pc, #112]	; (800a400 <xTaskResumeAll+0x120>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d1cb      	bne.n	800a32c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d001      	beq.n	800a39e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a39a:	f000 fb5f 	bl	800aa5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a39e:	4b1d      	ldr	r3, [pc, #116]	; (800a414 <xTaskResumeAll+0x134>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d010      	beq.n	800a3cc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a3aa:	f000 f847 	bl	800a43c <xTaskIncrementTick>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d002      	beq.n	800a3ba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a3b4:	4b16      	ldr	r3, [pc, #88]	; (800a410 <xTaskResumeAll+0x130>)
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	3b01      	subs	r3, #1
 800a3be:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d1f1      	bne.n	800a3aa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a3c6:	4b13      	ldr	r3, [pc, #76]	; (800a414 <xTaskResumeAll+0x134>)
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a3cc:	4b10      	ldr	r3, [pc, #64]	; (800a410 <xTaskResumeAll+0x130>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d009      	beq.n	800a3e8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a3d8:	4b0f      	ldr	r3, [pc, #60]	; (800a418 <xTaskResumeAll+0x138>)
 800a3da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3de:	601a      	str	r2, [r3, #0]
 800a3e0:	f3bf 8f4f 	dsb	sy
 800a3e4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a3e8:	f001 f8e4 	bl	800b5b4 <vPortExitCritical>

	return xAlreadyYielded;
 800a3ec:	68bb      	ldr	r3, [r7, #8]
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	3710      	adds	r7, #16
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}
 800a3f6:	bf00      	nop
 800a3f8:	20001968 	.word	0x20001968
 800a3fc:	20001940 	.word	0x20001940
 800a400:	20001900 	.word	0x20001900
 800a404:	20001948 	.word	0x20001948
 800a408:	20001470 	.word	0x20001470
 800a40c:	2000146c 	.word	0x2000146c
 800a410:	20001954 	.word	0x20001954
 800a414:	20001950 	.word	0x20001950
 800a418:	e000ed04 	.word	0xe000ed04

0800a41c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a41c:	b480      	push	{r7}
 800a41e:	b083      	sub	sp, #12
 800a420:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a422:	4b05      	ldr	r3, [pc, #20]	; (800a438 <xTaskGetTickCount+0x1c>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a428:	687b      	ldr	r3, [r7, #4]
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	370c      	adds	r7, #12
 800a42e:	46bd      	mov	sp, r7
 800a430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a434:	4770      	bx	lr
 800a436:	bf00      	nop
 800a438:	20001944 	.word	0x20001944

0800a43c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b086      	sub	sp, #24
 800a440:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a442:	2300      	movs	r3, #0
 800a444:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a446:	4b4f      	ldr	r3, [pc, #316]	; (800a584 <xTaskIncrementTick+0x148>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	f040 808f 	bne.w	800a56e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a450:	4b4d      	ldr	r3, [pc, #308]	; (800a588 <xTaskIncrementTick+0x14c>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	3301      	adds	r3, #1
 800a456:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a458:	4a4b      	ldr	r2, [pc, #300]	; (800a588 <xTaskIncrementTick+0x14c>)
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d120      	bne.n	800a4a6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a464:	4b49      	ldr	r3, [pc, #292]	; (800a58c <xTaskIncrementTick+0x150>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d00a      	beq.n	800a484 <xTaskIncrementTick+0x48>
	__asm volatile
 800a46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a472:	f383 8811 	msr	BASEPRI, r3
 800a476:	f3bf 8f6f 	isb	sy
 800a47a:	f3bf 8f4f 	dsb	sy
 800a47e:	603b      	str	r3, [r7, #0]
}
 800a480:	bf00      	nop
 800a482:	e7fe      	b.n	800a482 <xTaskIncrementTick+0x46>
 800a484:	4b41      	ldr	r3, [pc, #260]	; (800a58c <xTaskIncrementTick+0x150>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	60fb      	str	r3, [r7, #12]
 800a48a:	4b41      	ldr	r3, [pc, #260]	; (800a590 <xTaskIncrementTick+0x154>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	4a3f      	ldr	r2, [pc, #252]	; (800a58c <xTaskIncrementTick+0x150>)
 800a490:	6013      	str	r3, [r2, #0]
 800a492:	4a3f      	ldr	r2, [pc, #252]	; (800a590 <xTaskIncrementTick+0x154>)
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	6013      	str	r3, [r2, #0]
 800a498:	4b3e      	ldr	r3, [pc, #248]	; (800a594 <xTaskIncrementTick+0x158>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	3301      	adds	r3, #1
 800a49e:	4a3d      	ldr	r2, [pc, #244]	; (800a594 <xTaskIncrementTick+0x158>)
 800a4a0:	6013      	str	r3, [r2, #0]
 800a4a2:	f000 fadb 	bl	800aa5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a4a6:	4b3c      	ldr	r3, [pc, #240]	; (800a598 <xTaskIncrementTick+0x15c>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	693a      	ldr	r2, [r7, #16]
 800a4ac:	429a      	cmp	r2, r3
 800a4ae:	d349      	bcc.n	800a544 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a4b0:	4b36      	ldr	r3, [pc, #216]	; (800a58c <xTaskIncrementTick+0x150>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d104      	bne.n	800a4c4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4ba:	4b37      	ldr	r3, [pc, #220]	; (800a598 <xTaskIncrementTick+0x15c>)
 800a4bc:	f04f 32ff 	mov.w	r2, #4294967295
 800a4c0:	601a      	str	r2, [r3, #0]
					break;
 800a4c2:	e03f      	b.n	800a544 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4c4:	4b31      	ldr	r3, [pc, #196]	; (800a58c <xTaskIncrementTick+0x150>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	68db      	ldr	r3, [r3, #12]
 800a4ca:	68db      	ldr	r3, [r3, #12]
 800a4cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	685b      	ldr	r3, [r3, #4]
 800a4d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a4d4:	693a      	ldr	r2, [r7, #16]
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	d203      	bcs.n	800a4e4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a4dc:	4a2e      	ldr	r2, [pc, #184]	; (800a598 <xTaskIncrementTick+0x15c>)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a4e2:	e02f      	b.n	800a544 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	3304      	adds	r3, #4
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f7fe ff79 	bl	80093e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d004      	beq.n	800a500 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	3318      	adds	r3, #24
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f7fe ff70 	bl	80093e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a504:	4b25      	ldr	r3, [pc, #148]	; (800a59c <xTaskIncrementTick+0x160>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	429a      	cmp	r2, r3
 800a50a:	d903      	bls.n	800a514 <xTaskIncrementTick+0xd8>
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a510:	4a22      	ldr	r2, [pc, #136]	; (800a59c <xTaskIncrementTick+0x160>)
 800a512:	6013      	str	r3, [r2, #0]
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a518:	4613      	mov	r3, r2
 800a51a:	009b      	lsls	r3, r3, #2
 800a51c:	4413      	add	r3, r2
 800a51e:	009b      	lsls	r3, r3, #2
 800a520:	4a1f      	ldr	r2, [pc, #124]	; (800a5a0 <xTaskIncrementTick+0x164>)
 800a522:	441a      	add	r2, r3
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	3304      	adds	r3, #4
 800a528:	4619      	mov	r1, r3
 800a52a:	4610      	mov	r0, r2
 800a52c:	f7fe fefb 	bl	8009326 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a534:	4b1b      	ldr	r3, [pc, #108]	; (800a5a4 <xTaskIncrementTick+0x168>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a53a:	429a      	cmp	r2, r3
 800a53c:	d3b8      	bcc.n	800a4b0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a53e:	2301      	movs	r3, #1
 800a540:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a542:	e7b5      	b.n	800a4b0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a544:	4b17      	ldr	r3, [pc, #92]	; (800a5a4 <xTaskIncrementTick+0x168>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a54a:	4915      	ldr	r1, [pc, #84]	; (800a5a0 <xTaskIncrementTick+0x164>)
 800a54c:	4613      	mov	r3, r2
 800a54e:	009b      	lsls	r3, r3, #2
 800a550:	4413      	add	r3, r2
 800a552:	009b      	lsls	r3, r3, #2
 800a554:	440b      	add	r3, r1
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	2b01      	cmp	r3, #1
 800a55a:	d901      	bls.n	800a560 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a55c:	2301      	movs	r3, #1
 800a55e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a560:	4b11      	ldr	r3, [pc, #68]	; (800a5a8 <xTaskIncrementTick+0x16c>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d007      	beq.n	800a578 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a568:	2301      	movs	r3, #1
 800a56a:	617b      	str	r3, [r7, #20]
 800a56c:	e004      	b.n	800a578 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a56e:	4b0f      	ldr	r3, [pc, #60]	; (800a5ac <xTaskIncrementTick+0x170>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	3301      	adds	r3, #1
 800a574:	4a0d      	ldr	r2, [pc, #52]	; (800a5ac <xTaskIncrementTick+0x170>)
 800a576:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a578:	697b      	ldr	r3, [r7, #20]
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	3718      	adds	r7, #24
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}
 800a582:	bf00      	nop
 800a584:	20001968 	.word	0x20001968
 800a588:	20001944 	.word	0x20001944
 800a58c:	200018f8 	.word	0x200018f8
 800a590:	200018fc 	.word	0x200018fc
 800a594:	20001958 	.word	0x20001958
 800a598:	20001960 	.word	0x20001960
 800a59c:	20001948 	.word	0x20001948
 800a5a0:	20001470 	.word	0x20001470
 800a5a4:	2000146c 	.word	0x2000146c
 800a5a8:	20001954 	.word	0x20001954
 800a5ac:	20001950 	.word	0x20001950

0800a5b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b085      	sub	sp, #20
 800a5b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a5b6:	4b2a      	ldr	r3, [pc, #168]	; (800a660 <vTaskSwitchContext+0xb0>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d003      	beq.n	800a5c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a5be:	4b29      	ldr	r3, [pc, #164]	; (800a664 <vTaskSwitchContext+0xb4>)
 800a5c0:	2201      	movs	r2, #1
 800a5c2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a5c4:	e046      	b.n	800a654 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a5c6:	4b27      	ldr	r3, [pc, #156]	; (800a664 <vTaskSwitchContext+0xb4>)
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5cc:	4b26      	ldr	r3, [pc, #152]	; (800a668 <vTaskSwitchContext+0xb8>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	60fb      	str	r3, [r7, #12]
 800a5d2:	e010      	b.n	800a5f6 <vTaskSwitchContext+0x46>
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d10a      	bne.n	800a5f0 <vTaskSwitchContext+0x40>
	__asm volatile
 800a5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5de:	f383 8811 	msr	BASEPRI, r3
 800a5e2:	f3bf 8f6f 	isb	sy
 800a5e6:	f3bf 8f4f 	dsb	sy
 800a5ea:	607b      	str	r3, [r7, #4]
}
 800a5ec:	bf00      	nop
 800a5ee:	e7fe      	b.n	800a5ee <vTaskSwitchContext+0x3e>
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	3b01      	subs	r3, #1
 800a5f4:	60fb      	str	r3, [r7, #12]
 800a5f6:	491d      	ldr	r1, [pc, #116]	; (800a66c <vTaskSwitchContext+0xbc>)
 800a5f8:	68fa      	ldr	r2, [r7, #12]
 800a5fa:	4613      	mov	r3, r2
 800a5fc:	009b      	lsls	r3, r3, #2
 800a5fe:	4413      	add	r3, r2
 800a600:	009b      	lsls	r3, r3, #2
 800a602:	440b      	add	r3, r1
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d0e4      	beq.n	800a5d4 <vTaskSwitchContext+0x24>
 800a60a:	68fa      	ldr	r2, [r7, #12]
 800a60c:	4613      	mov	r3, r2
 800a60e:	009b      	lsls	r3, r3, #2
 800a610:	4413      	add	r3, r2
 800a612:	009b      	lsls	r3, r3, #2
 800a614:	4a15      	ldr	r2, [pc, #84]	; (800a66c <vTaskSwitchContext+0xbc>)
 800a616:	4413      	add	r3, r2
 800a618:	60bb      	str	r3, [r7, #8]
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	685b      	ldr	r3, [r3, #4]
 800a61e:	685a      	ldr	r2, [r3, #4]
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	605a      	str	r2, [r3, #4]
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	685a      	ldr	r2, [r3, #4]
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	3308      	adds	r3, #8
 800a62c:	429a      	cmp	r2, r3
 800a62e:	d104      	bne.n	800a63a <vTaskSwitchContext+0x8a>
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	685b      	ldr	r3, [r3, #4]
 800a634:	685a      	ldr	r2, [r3, #4]
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	605a      	str	r2, [r3, #4]
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	68db      	ldr	r3, [r3, #12]
 800a640:	4a0b      	ldr	r2, [pc, #44]	; (800a670 <vTaskSwitchContext+0xc0>)
 800a642:	6013      	str	r3, [r2, #0]
 800a644:	4a08      	ldr	r2, [pc, #32]	; (800a668 <vTaskSwitchContext+0xb8>)
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a64a:	4b09      	ldr	r3, [pc, #36]	; (800a670 <vTaskSwitchContext+0xc0>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	3354      	adds	r3, #84	; 0x54
 800a650:	4a08      	ldr	r2, [pc, #32]	; (800a674 <vTaskSwitchContext+0xc4>)
 800a652:	6013      	str	r3, [r2, #0]
}
 800a654:	bf00      	nop
 800a656:	3714      	adds	r7, #20
 800a658:	46bd      	mov	sp, r7
 800a65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65e:	4770      	bx	lr
 800a660:	20001968 	.word	0x20001968
 800a664:	20001954 	.word	0x20001954
 800a668:	20001948 	.word	0x20001948
 800a66c:	20001470 	.word	0x20001470
 800a670:	2000146c 	.word	0x2000146c
 800a674:	200000b0 	.word	0x200000b0

0800a678 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b084      	sub	sp, #16
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d10a      	bne.n	800a69e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a68c:	f383 8811 	msr	BASEPRI, r3
 800a690:	f3bf 8f6f 	isb	sy
 800a694:	f3bf 8f4f 	dsb	sy
 800a698:	60fb      	str	r3, [r7, #12]
}
 800a69a:	bf00      	nop
 800a69c:	e7fe      	b.n	800a69c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a69e:	4b07      	ldr	r3, [pc, #28]	; (800a6bc <vTaskPlaceOnEventList+0x44>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	3318      	adds	r3, #24
 800a6a4:	4619      	mov	r1, r3
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f7fe fe61 	bl	800936e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a6ac:	2101      	movs	r1, #1
 800a6ae:	6838      	ldr	r0, [r7, #0]
 800a6b0:	f000 fa80 	bl	800abb4 <prvAddCurrentTaskToDelayedList>
}
 800a6b4:	bf00      	nop
 800a6b6:	3710      	adds	r7, #16
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}
 800a6bc:	2000146c 	.word	0x2000146c

0800a6c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b086      	sub	sp, #24
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	60f8      	str	r0, [r7, #12]
 800a6c8:	60b9      	str	r1, [r7, #8]
 800a6ca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d10a      	bne.n	800a6e8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a6d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d6:	f383 8811 	msr	BASEPRI, r3
 800a6da:	f3bf 8f6f 	isb	sy
 800a6de:	f3bf 8f4f 	dsb	sy
 800a6e2:	617b      	str	r3, [r7, #20]
}
 800a6e4:	bf00      	nop
 800a6e6:	e7fe      	b.n	800a6e6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a6e8:	4b0a      	ldr	r3, [pc, #40]	; (800a714 <vTaskPlaceOnEventListRestricted+0x54>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	3318      	adds	r3, #24
 800a6ee:	4619      	mov	r1, r3
 800a6f0:	68f8      	ldr	r0, [r7, #12]
 800a6f2:	f7fe fe18 	bl	8009326 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d002      	beq.n	800a702 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a6fc:	f04f 33ff 	mov.w	r3, #4294967295
 800a700:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a702:	6879      	ldr	r1, [r7, #4]
 800a704:	68b8      	ldr	r0, [r7, #8]
 800a706:	f000 fa55 	bl	800abb4 <prvAddCurrentTaskToDelayedList>
	}
 800a70a:	bf00      	nop
 800a70c:	3718      	adds	r7, #24
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}
 800a712:	bf00      	nop
 800a714:	2000146c 	.word	0x2000146c

0800a718 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b086      	sub	sp, #24
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	68db      	ldr	r3, [r3, #12]
 800a724:	68db      	ldr	r3, [r3, #12]
 800a726:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a728:	693b      	ldr	r3, [r7, #16]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d10a      	bne.n	800a744 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a72e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a732:	f383 8811 	msr	BASEPRI, r3
 800a736:	f3bf 8f6f 	isb	sy
 800a73a:	f3bf 8f4f 	dsb	sy
 800a73e:	60fb      	str	r3, [r7, #12]
}
 800a740:	bf00      	nop
 800a742:	e7fe      	b.n	800a742 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a744:	693b      	ldr	r3, [r7, #16]
 800a746:	3318      	adds	r3, #24
 800a748:	4618      	mov	r0, r3
 800a74a:	f7fe fe49 	bl	80093e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a74e:	4b1e      	ldr	r3, [pc, #120]	; (800a7c8 <xTaskRemoveFromEventList+0xb0>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d11d      	bne.n	800a792 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	3304      	adds	r3, #4
 800a75a:	4618      	mov	r0, r3
 800a75c:	f7fe fe40 	bl	80093e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a764:	4b19      	ldr	r3, [pc, #100]	; (800a7cc <xTaskRemoveFromEventList+0xb4>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	429a      	cmp	r2, r3
 800a76a:	d903      	bls.n	800a774 <xTaskRemoveFromEventList+0x5c>
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a770:	4a16      	ldr	r2, [pc, #88]	; (800a7cc <xTaskRemoveFromEventList+0xb4>)
 800a772:	6013      	str	r3, [r2, #0]
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a778:	4613      	mov	r3, r2
 800a77a:	009b      	lsls	r3, r3, #2
 800a77c:	4413      	add	r3, r2
 800a77e:	009b      	lsls	r3, r3, #2
 800a780:	4a13      	ldr	r2, [pc, #76]	; (800a7d0 <xTaskRemoveFromEventList+0xb8>)
 800a782:	441a      	add	r2, r3
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	3304      	adds	r3, #4
 800a788:	4619      	mov	r1, r3
 800a78a:	4610      	mov	r0, r2
 800a78c:	f7fe fdcb 	bl	8009326 <vListInsertEnd>
 800a790:	e005      	b.n	800a79e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	3318      	adds	r3, #24
 800a796:	4619      	mov	r1, r3
 800a798:	480e      	ldr	r0, [pc, #56]	; (800a7d4 <xTaskRemoveFromEventList+0xbc>)
 800a79a:	f7fe fdc4 	bl	8009326 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a79e:	693b      	ldr	r3, [r7, #16]
 800a7a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7a2:	4b0d      	ldr	r3, [pc, #52]	; (800a7d8 <xTaskRemoveFromEventList+0xc0>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7a8:	429a      	cmp	r2, r3
 800a7aa:	d905      	bls.n	800a7b8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a7b0:	4b0a      	ldr	r3, [pc, #40]	; (800a7dc <xTaskRemoveFromEventList+0xc4>)
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	601a      	str	r2, [r3, #0]
 800a7b6:	e001      	b.n	800a7bc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a7bc:	697b      	ldr	r3, [r7, #20]
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3718      	adds	r7, #24
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
 800a7c6:	bf00      	nop
 800a7c8:	20001968 	.word	0x20001968
 800a7cc:	20001948 	.word	0x20001948
 800a7d0:	20001470 	.word	0x20001470
 800a7d4:	20001900 	.word	0x20001900
 800a7d8:	2000146c 	.word	0x2000146c
 800a7dc:	20001954 	.word	0x20001954

0800a7e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b083      	sub	sp, #12
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a7e8:	4b06      	ldr	r3, [pc, #24]	; (800a804 <vTaskInternalSetTimeOutState+0x24>)
 800a7ea:	681a      	ldr	r2, [r3, #0]
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a7f0:	4b05      	ldr	r3, [pc, #20]	; (800a808 <vTaskInternalSetTimeOutState+0x28>)
 800a7f2:	681a      	ldr	r2, [r3, #0]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	605a      	str	r2, [r3, #4]
}
 800a7f8:	bf00      	nop
 800a7fa:	370c      	adds	r7, #12
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a802:	4770      	bx	lr
 800a804:	20001958 	.word	0x20001958
 800a808:	20001944 	.word	0x20001944

0800a80c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b088      	sub	sp, #32
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d10a      	bne.n	800a832 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a81c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a820:	f383 8811 	msr	BASEPRI, r3
 800a824:	f3bf 8f6f 	isb	sy
 800a828:	f3bf 8f4f 	dsb	sy
 800a82c:	613b      	str	r3, [r7, #16]
}
 800a82e:	bf00      	nop
 800a830:	e7fe      	b.n	800a830 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d10a      	bne.n	800a84e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a83c:	f383 8811 	msr	BASEPRI, r3
 800a840:	f3bf 8f6f 	isb	sy
 800a844:	f3bf 8f4f 	dsb	sy
 800a848:	60fb      	str	r3, [r7, #12]
}
 800a84a:	bf00      	nop
 800a84c:	e7fe      	b.n	800a84c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a84e:	f000 fe81 	bl	800b554 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a852:	4b1d      	ldr	r3, [pc, #116]	; (800a8c8 <xTaskCheckForTimeOut+0xbc>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	685b      	ldr	r3, [r3, #4]
 800a85c:	69ba      	ldr	r2, [r7, #24]
 800a85e:	1ad3      	subs	r3, r2, r3
 800a860:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a86a:	d102      	bne.n	800a872 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a86c:	2300      	movs	r3, #0
 800a86e:	61fb      	str	r3, [r7, #28]
 800a870:	e023      	b.n	800a8ba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681a      	ldr	r2, [r3, #0]
 800a876:	4b15      	ldr	r3, [pc, #84]	; (800a8cc <xTaskCheckForTimeOut+0xc0>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d007      	beq.n	800a88e <xTaskCheckForTimeOut+0x82>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	685b      	ldr	r3, [r3, #4]
 800a882:	69ba      	ldr	r2, [r7, #24]
 800a884:	429a      	cmp	r2, r3
 800a886:	d302      	bcc.n	800a88e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a888:	2301      	movs	r3, #1
 800a88a:	61fb      	str	r3, [r7, #28]
 800a88c:	e015      	b.n	800a8ba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	697a      	ldr	r2, [r7, #20]
 800a894:	429a      	cmp	r2, r3
 800a896:	d20b      	bcs.n	800a8b0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	681a      	ldr	r2, [r3, #0]
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	1ad2      	subs	r2, r2, r3
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f7ff ff9b 	bl	800a7e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	61fb      	str	r3, [r7, #28]
 800a8ae:	e004      	b.n	800a8ba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a8ba:	f000 fe7b 	bl	800b5b4 <vPortExitCritical>

	return xReturn;
 800a8be:	69fb      	ldr	r3, [r7, #28]
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3720      	adds	r7, #32
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}
 800a8c8:	20001944 	.word	0x20001944
 800a8cc:	20001958 	.word	0x20001958

0800a8d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a8d4:	4b03      	ldr	r3, [pc, #12]	; (800a8e4 <vTaskMissedYield+0x14>)
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	601a      	str	r2, [r3, #0]
}
 800a8da:	bf00      	nop
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e2:	4770      	bx	lr
 800a8e4:	20001954 	.word	0x20001954

0800a8e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b082      	sub	sp, #8
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a8f0:	f000 f852 	bl	800a998 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a8f4:	4b06      	ldr	r3, [pc, #24]	; (800a910 <prvIdleTask+0x28>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	2b01      	cmp	r3, #1
 800a8fa:	d9f9      	bls.n	800a8f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a8fc:	4b05      	ldr	r3, [pc, #20]	; (800a914 <prvIdleTask+0x2c>)
 800a8fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a902:	601a      	str	r2, [r3, #0]
 800a904:	f3bf 8f4f 	dsb	sy
 800a908:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a90c:	e7f0      	b.n	800a8f0 <prvIdleTask+0x8>
 800a90e:	bf00      	nop
 800a910:	20001470 	.word	0x20001470
 800a914:	e000ed04 	.word	0xe000ed04

0800a918 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b082      	sub	sp, #8
 800a91c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a91e:	2300      	movs	r3, #0
 800a920:	607b      	str	r3, [r7, #4]
 800a922:	e00c      	b.n	800a93e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a924:	687a      	ldr	r2, [r7, #4]
 800a926:	4613      	mov	r3, r2
 800a928:	009b      	lsls	r3, r3, #2
 800a92a:	4413      	add	r3, r2
 800a92c:	009b      	lsls	r3, r3, #2
 800a92e:	4a12      	ldr	r2, [pc, #72]	; (800a978 <prvInitialiseTaskLists+0x60>)
 800a930:	4413      	add	r3, r2
 800a932:	4618      	mov	r0, r3
 800a934:	f7fe fcca 	bl	80092cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	3301      	adds	r3, #1
 800a93c:	607b      	str	r3, [r7, #4]
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2b37      	cmp	r3, #55	; 0x37
 800a942:	d9ef      	bls.n	800a924 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a944:	480d      	ldr	r0, [pc, #52]	; (800a97c <prvInitialiseTaskLists+0x64>)
 800a946:	f7fe fcc1 	bl	80092cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a94a:	480d      	ldr	r0, [pc, #52]	; (800a980 <prvInitialiseTaskLists+0x68>)
 800a94c:	f7fe fcbe 	bl	80092cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a950:	480c      	ldr	r0, [pc, #48]	; (800a984 <prvInitialiseTaskLists+0x6c>)
 800a952:	f7fe fcbb 	bl	80092cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a956:	480c      	ldr	r0, [pc, #48]	; (800a988 <prvInitialiseTaskLists+0x70>)
 800a958:	f7fe fcb8 	bl	80092cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a95c:	480b      	ldr	r0, [pc, #44]	; (800a98c <prvInitialiseTaskLists+0x74>)
 800a95e:	f7fe fcb5 	bl	80092cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a962:	4b0b      	ldr	r3, [pc, #44]	; (800a990 <prvInitialiseTaskLists+0x78>)
 800a964:	4a05      	ldr	r2, [pc, #20]	; (800a97c <prvInitialiseTaskLists+0x64>)
 800a966:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a968:	4b0a      	ldr	r3, [pc, #40]	; (800a994 <prvInitialiseTaskLists+0x7c>)
 800a96a:	4a05      	ldr	r2, [pc, #20]	; (800a980 <prvInitialiseTaskLists+0x68>)
 800a96c:	601a      	str	r2, [r3, #0]
}
 800a96e:	bf00      	nop
 800a970:	3708      	adds	r7, #8
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}
 800a976:	bf00      	nop
 800a978:	20001470 	.word	0x20001470
 800a97c:	200018d0 	.word	0x200018d0
 800a980:	200018e4 	.word	0x200018e4
 800a984:	20001900 	.word	0x20001900
 800a988:	20001914 	.word	0x20001914
 800a98c:	2000192c 	.word	0x2000192c
 800a990:	200018f8 	.word	0x200018f8
 800a994:	200018fc 	.word	0x200018fc

0800a998 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b082      	sub	sp, #8
 800a99c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a99e:	e019      	b.n	800a9d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a9a0:	f000 fdd8 	bl	800b554 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9a4:	4b10      	ldr	r3, [pc, #64]	; (800a9e8 <prvCheckTasksWaitingTermination+0x50>)
 800a9a6:	68db      	ldr	r3, [r3, #12]
 800a9a8:	68db      	ldr	r3, [r3, #12]
 800a9aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	3304      	adds	r3, #4
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f7fe fd15 	bl	80093e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a9b6:	4b0d      	ldr	r3, [pc, #52]	; (800a9ec <prvCheckTasksWaitingTermination+0x54>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	3b01      	subs	r3, #1
 800a9bc:	4a0b      	ldr	r2, [pc, #44]	; (800a9ec <prvCheckTasksWaitingTermination+0x54>)
 800a9be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a9c0:	4b0b      	ldr	r3, [pc, #44]	; (800a9f0 <prvCheckTasksWaitingTermination+0x58>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	3b01      	subs	r3, #1
 800a9c6:	4a0a      	ldr	r2, [pc, #40]	; (800a9f0 <prvCheckTasksWaitingTermination+0x58>)
 800a9c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a9ca:	f000 fdf3 	bl	800b5b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f000 f810 	bl	800a9f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a9d4:	4b06      	ldr	r3, [pc, #24]	; (800a9f0 <prvCheckTasksWaitingTermination+0x58>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d1e1      	bne.n	800a9a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a9dc:	bf00      	nop
 800a9de:	bf00      	nop
 800a9e0:	3708      	adds	r7, #8
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}
 800a9e6:	bf00      	nop
 800a9e8:	20001914 	.word	0x20001914
 800a9ec:	20001940 	.word	0x20001940
 800a9f0:	20001928 	.word	0x20001928

0800a9f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b084      	sub	sp, #16
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	3354      	adds	r3, #84	; 0x54
 800aa00:	4618      	mov	r0, r3
 800aa02:	f001 fb05 	bl	800c010 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d108      	bne.n	800aa22 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa14:	4618      	mov	r0, r3
 800aa16:	f000 ff8b 	bl	800b930 <vPortFree>
				vPortFree( pxTCB );
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f000 ff88 	bl	800b930 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aa20:	e018      	b.n	800aa54 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800aa28:	2b01      	cmp	r3, #1
 800aa2a:	d103      	bne.n	800aa34 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f000 ff7f 	bl	800b930 <vPortFree>
	}
 800aa32:	e00f      	b.n	800aa54 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800aa3a:	2b02      	cmp	r3, #2
 800aa3c:	d00a      	beq.n	800aa54 <prvDeleteTCB+0x60>
	__asm volatile
 800aa3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa42:	f383 8811 	msr	BASEPRI, r3
 800aa46:	f3bf 8f6f 	isb	sy
 800aa4a:	f3bf 8f4f 	dsb	sy
 800aa4e:	60fb      	str	r3, [r7, #12]
}
 800aa50:	bf00      	nop
 800aa52:	e7fe      	b.n	800aa52 <prvDeleteTCB+0x5e>
	}
 800aa54:	bf00      	nop
 800aa56:	3710      	adds	r7, #16
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}

0800aa5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b083      	sub	sp, #12
 800aa60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa62:	4b0c      	ldr	r3, [pc, #48]	; (800aa94 <prvResetNextTaskUnblockTime+0x38>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d104      	bne.n	800aa76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aa6c:	4b0a      	ldr	r3, [pc, #40]	; (800aa98 <prvResetNextTaskUnblockTime+0x3c>)
 800aa6e:	f04f 32ff 	mov.w	r2, #4294967295
 800aa72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aa74:	e008      	b.n	800aa88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa76:	4b07      	ldr	r3, [pc, #28]	; (800aa94 <prvResetNextTaskUnblockTime+0x38>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	68db      	ldr	r3, [r3, #12]
 800aa7c:	68db      	ldr	r3, [r3, #12]
 800aa7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	685b      	ldr	r3, [r3, #4]
 800aa84:	4a04      	ldr	r2, [pc, #16]	; (800aa98 <prvResetNextTaskUnblockTime+0x3c>)
 800aa86:	6013      	str	r3, [r2, #0]
}
 800aa88:	bf00      	nop
 800aa8a:	370c      	adds	r7, #12
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa92:	4770      	bx	lr
 800aa94:	200018f8 	.word	0x200018f8
 800aa98:	20001960 	.word	0x20001960

0800aa9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b083      	sub	sp, #12
 800aaa0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aaa2:	4b0b      	ldr	r3, [pc, #44]	; (800aad0 <xTaskGetSchedulerState+0x34>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d102      	bne.n	800aab0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aaaa:	2301      	movs	r3, #1
 800aaac:	607b      	str	r3, [r7, #4]
 800aaae:	e008      	b.n	800aac2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aab0:	4b08      	ldr	r3, [pc, #32]	; (800aad4 <xTaskGetSchedulerState+0x38>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d102      	bne.n	800aabe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800aab8:	2302      	movs	r3, #2
 800aaba:	607b      	str	r3, [r7, #4]
 800aabc:	e001      	b.n	800aac2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800aabe:	2300      	movs	r3, #0
 800aac0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800aac2:	687b      	ldr	r3, [r7, #4]
	}
 800aac4:	4618      	mov	r0, r3
 800aac6:	370c      	adds	r7, #12
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr
 800aad0:	2000194c 	.word	0x2000194c
 800aad4:	20001968 	.word	0x20001968

0800aad8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b086      	sub	sp, #24
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800aae4:	2300      	movs	r3, #0
 800aae6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d056      	beq.n	800ab9c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800aaee:	4b2e      	ldr	r3, [pc, #184]	; (800aba8 <xTaskPriorityDisinherit+0xd0>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	693a      	ldr	r2, [r7, #16]
 800aaf4:	429a      	cmp	r2, r3
 800aaf6:	d00a      	beq.n	800ab0e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800aaf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aafc:	f383 8811 	msr	BASEPRI, r3
 800ab00:	f3bf 8f6f 	isb	sy
 800ab04:	f3bf 8f4f 	dsb	sy
 800ab08:	60fb      	str	r3, [r7, #12]
}
 800ab0a:	bf00      	nop
 800ab0c:	e7fe      	b.n	800ab0c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d10a      	bne.n	800ab2c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ab16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab1a:	f383 8811 	msr	BASEPRI, r3
 800ab1e:	f3bf 8f6f 	isb	sy
 800ab22:	f3bf 8f4f 	dsb	sy
 800ab26:	60bb      	str	r3, [r7, #8]
}
 800ab28:	bf00      	nop
 800ab2a:	e7fe      	b.n	800ab2a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ab2c:	693b      	ldr	r3, [r7, #16]
 800ab2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab30:	1e5a      	subs	r2, r3, #1
 800ab32:	693b      	ldr	r3, [r7, #16]
 800ab34:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab3e:	429a      	cmp	r2, r3
 800ab40:	d02c      	beq.n	800ab9c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ab42:	693b      	ldr	r3, [r7, #16]
 800ab44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d128      	bne.n	800ab9c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab4a:	693b      	ldr	r3, [r7, #16]
 800ab4c:	3304      	adds	r3, #4
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f7fe fc46 	bl	80093e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ab58:	693b      	ldr	r3, [r7, #16]
 800ab5a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab60:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab6c:	4b0f      	ldr	r3, [pc, #60]	; (800abac <xTaskPriorityDisinherit+0xd4>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	429a      	cmp	r2, r3
 800ab72:	d903      	bls.n	800ab7c <xTaskPriorityDisinherit+0xa4>
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab78:	4a0c      	ldr	r2, [pc, #48]	; (800abac <xTaskPriorityDisinherit+0xd4>)
 800ab7a:	6013      	str	r3, [r2, #0]
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab80:	4613      	mov	r3, r2
 800ab82:	009b      	lsls	r3, r3, #2
 800ab84:	4413      	add	r3, r2
 800ab86:	009b      	lsls	r3, r3, #2
 800ab88:	4a09      	ldr	r2, [pc, #36]	; (800abb0 <xTaskPriorityDisinherit+0xd8>)
 800ab8a:	441a      	add	r2, r3
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	3304      	adds	r3, #4
 800ab90:	4619      	mov	r1, r3
 800ab92:	4610      	mov	r0, r2
 800ab94:	f7fe fbc7 	bl	8009326 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ab98:	2301      	movs	r3, #1
 800ab9a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ab9c:	697b      	ldr	r3, [r7, #20]
	}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3718      	adds	r7, #24
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}
 800aba6:	bf00      	nop
 800aba8:	2000146c 	.word	0x2000146c
 800abac:	20001948 	.word	0x20001948
 800abb0:	20001470 	.word	0x20001470

0800abb4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b084      	sub	sp, #16
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
 800abbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800abbe:	4b21      	ldr	r3, [pc, #132]	; (800ac44 <prvAddCurrentTaskToDelayedList+0x90>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800abc4:	4b20      	ldr	r3, [pc, #128]	; (800ac48 <prvAddCurrentTaskToDelayedList+0x94>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	3304      	adds	r3, #4
 800abca:	4618      	mov	r0, r3
 800abcc:	f7fe fc08 	bl	80093e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abd6:	d10a      	bne.n	800abee <prvAddCurrentTaskToDelayedList+0x3a>
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d007      	beq.n	800abee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800abde:	4b1a      	ldr	r3, [pc, #104]	; (800ac48 <prvAddCurrentTaskToDelayedList+0x94>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	3304      	adds	r3, #4
 800abe4:	4619      	mov	r1, r3
 800abe6:	4819      	ldr	r0, [pc, #100]	; (800ac4c <prvAddCurrentTaskToDelayedList+0x98>)
 800abe8:	f7fe fb9d 	bl	8009326 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800abec:	e026      	b.n	800ac3c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800abee:	68fa      	ldr	r2, [r7, #12]
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	4413      	add	r3, r2
 800abf4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800abf6:	4b14      	ldr	r3, [pc, #80]	; (800ac48 <prvAddCurrentTaskToDelayedList+0x94>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	68ba      	ldr	r2, [r7, #8]
 800abfc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800abfe:	68ba      	ldr	r2, [r7, #8]
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	429a      	cmp	r2, r3
 800ac04:	d209      	bcs.n	800ac1a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac06:	4b12      	ldr	r3, [pc, #72]	; (800ac50 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ac08:	681a      	ldr	r2, [r3, #0]
 800ac0a:	4b0f      	ldr	r3, [pc, #60]	; (800ac48 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	3304      	adds	r3, #4
 800ac10:	4619      	mov	r1, r3
 800ac12:	4610      	mov	r0, r2
 800ac14:	f7fe fbab 	bl	800936e <vListInsert>
}
 800ac18:	e010      	b.n	800ac3c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac1a:	4b0e      	ldr	r3, [pc, #56]	; (800ac54 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ac1c:	681a      	ldr	r2, [r3, #0]
 800ac1e:	4b0a      	ldr	r3, [pc, #40]	; (800ac48 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	3304      	adds	r3, #4
 800ac24:	4619      	mov	r1, r3
 800ac26:	4610      	mov	r0, r2
 800ac28:	f7fe fba1 	bl	800936e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ac2c:	4b0a      	ldr	r3, [pc, #40]	; (800ac58 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	68ba      	ldr	r2, [r7, #8]
 800ac32:	429a      	cmp	r2, r3
 800ac34:	d202      	bcs.n	800ac3c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ac36:	4a08      	ldr	r2, [pc, #32]	; (800ac58 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	6013      	str	r3, [r2, #0]
}
 800ac3c:	bf00      	nop
 800ac3e:	3710      	adds	r7, #16
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}
 800ac44:	20001944 	.word	0x20001944
 800ac48:	2000146c 	.word	0x2000146c
 800ac4c:	2000192c 	.word	0x2000192c
 800ac50:	200018fc 	.word	0x200018fc
 800ac54:	200018f8 	.word	0x200018f8
 800ac58:	20001960 	.word	0x20001960

0800ac5c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b08a      	sub	sp, #40	; 0x28
 800ac60:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ac62:	2300      	movs	r3, #0
 800ac64:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ac66:	f000 fb07 	bl	800b278 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ac6a:	4b1c      	ldr	r3, [pc, #112]	; (800acdc <xTimerCreateTimerTask+0x80>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d021      	beq.n	800acb6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ac72:	2300      	movs	r3, #0
 800ac74:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ac76:	2300      	movs	r3, #0
 800ac78:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ac7a:	1d3a      	adds	r2, r7, #4
 800ac7c:	f107 0108 	add.w	r1, r7, #8
 800ac80:	f107 030c 	add.w	r3, r7, #12
 800ac84:	4618      	mov	r0, r3
 800ac86:	f7fe fb07 	bl	8009298 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ac8a:	6879      	ldr	r1, [r7, #4]
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	68fa      	ldr	r2, [r7, #12]
 800ac90:	9202      	str	r2, [sp, #8]
 800ac92:	9301      	str	r3, [sp, #4]
 800ac94:	2302      	movs	r3, #2
 800ac96:	9300      	str	r3, [sp, #0]
 800ac98:	2300      	movs	r3, #0
 800ac9a:	460a      	mov	r2, r1
 800ac9c:	4910      	ldr	r1, [pc, #64]	; (800ace0 <xTimerCreateTimerTask+0x84>)
 800ac9e:	4811      	ldr	r0, [pc, #68]	; (800ace4 <xTimerCreateTimerTask+0x88>)
 800aca0:	f7ff f8b4 	bl	8009e0c <xTaskCreateStatic>
 800aca4:	4603      	mov	r3, r0
 800aca6:	4a10      	ldr	r2, [pc, #64]	; (800ace8 <xTimerCreateTimerTask+0x8c>)
 800aca8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800acaa:	4b0f      	ldr	r3, [pc, #60]	; (800ace8 <xTimerCreateTimerTask+0x8c>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d001      	beq.n	800acb6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800acb2:	2301      	movs	r3, #1
 800acb4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d10a      	bne.n	800acd2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800acbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc0:	f383 8811 	msr	BASEPRI, r3
 800acc4:	f3bf 8f6f 	isb	sy
 800acc8:	f3bf 8f4f 	dsb	sy
 800accc:	613b      	str	r3, [r7, #16]
}
 800acce:	bf00      	nop
 800acd0:	e7fe      	b.n	800acd0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800acd2:	697b      	ldr	r3, [r7, #20]
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	3718      	adds	r7, #24
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}
 800acdc:	2000199c 	.word	0x2000199c
 800ace0:	0800cea4 	.word	0x0800cea4
 800ace4:	0800ae21 	.word	0x0800ae21
 800ace8:	200019a0 	.word	0x200019a0

0800acec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b08a      	sub	sp, #40	; 0x28
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	60f8      	str	r0, [r7, #12]
 800acf4:	60b9      	str	r1, [r7, #8]
 800acf6:	607a      	str	r2, [r7, #4]
 800acf8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800acfa:	2300      	movs	r3, #0
 800acfc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d10a      	bne.n	800ad1a <xTimerGenericCommand+0x2e>
	__asm volatile
 800ad04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad08:	f383 8811 	msr	BASEPRI, r3
 800ad0c:	f3bf 8f6f 	isb	sy
 800ad10:	f3bf 8f4f 	dsb	sy
 800ad14:	623b      	str	r3, [r7, #32]
}
 800ad16:	bf00      	nop
 800ad18:	e7fe      	b.n	800ad18 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ad1a:	4b1a      	ldr	r3, [pc, #104]	; (800ad84 <xTimerGenericCommand+0x98>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d02a      	beq.n	800ad78 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	2b05      	cmp	r3, #5
 800ad32:	dc18      	bgt.n	800ad66 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ad34:	f7ff feb2 	bl	800aa9c <xTaskGetSchedulerState>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	2b02      	cmp	r3, #2
 800ad3c:	d109      	bne.n	800ad52 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ad3e:	4b11      	ldr	r3, [pc, #68]	; (800ad84 <xTimerGenericCommand+0x98>)
 800ad40:	6818      	ldr	r0, [r3, #0]
 800ad42:	f107 0110 	add.w	r1, r7, #16
 800ad46:	2300      	movs	r3, #0
 800ad48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad4a:	f7fe fc77 	bl	800963c <xQueueGenericSend>
 800ad4e:	6278      	str	r0, [r7, #36]	; 0x24
 800ad50:	e012      	b.n	800ad78 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ad52:	4b0c      	ldr	r3, [pc, #48]	; (800ad84 <xTimerGenericCommand+0x98>)
 800ad54:	6818      	ldr	r0, [r3, #0]
 800ad56:	f107 0110 	add.w	r1, r7, #16
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	f7fe fc6d 	bl	800963c <xQueueGenericSend>
 800ad62:	6278      	str	r0, [r7, #36]	; 0x24
 800ad64:	e008      	b.n	800ad78 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ad66:	4b07      	ldr	r3, [pc, #28]	; (800ad84 <xTimerGenericCommand+0x98>)
 800ad68:	6818      	ldr	r0, [r3, #0]
 800ad6a:	f107 0110 	add.w	r1, r7, #16
 800ad6e:	2300      	movs	r3, #0
 800ad70:	683a      	ldr	r2, [r7, #0]
 800ad72:	f7fe fd61 	bl	8009838 <xQueueGenericSendFromISR>
 800ad76:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ad78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3728      	adds	r7, #40	; 0x28
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}
 800ad82:	bf00      	nop
 800ad84:	2000199c 	.word	0x2000199c

0800ad88 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b088      	sub	sp, #32
 800ad8c:	af02      	add	r7, sp, #8
 800ad8e:	6078      	str	r0, [r7, #4]
 800ad90:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad92:	4b22      	ldr	r3, [pc, #136]	; (800ae1c <prvProcessExpiredTimer+0x94>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	68db      	ldr	r3, [r3, #12]
 800ad98:	68db      	ldr	r3, [r3, #12]
 800ad9a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	3304      	adds	r3, #4
 800ada0:	4618      	mov	r0, r3
 800ada2:	f7fe fb1d 	bl	80093e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800adac:	f003 0304 	and.w	r3, r3, #4
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d022      	beq.n	800adfa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800adb4:	697b      	ldr	r3, [r7, #20]
 800adb6:	699a      	ldr	r2, [r3, #24]
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	18d1      	adds	r1, r2, r3
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	683a      	ldr	r2, [r7, #0]
 800adc0:	6978      	ldr	r0, [r7, #20]
 800adc2:	f000 f8d1 	bl	800af68 <prvInsertTimerInActiveList>
 800adc6:	4603      	mov	r3, r0
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d01f      	beq.n	800ae0c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800adcc:	2300      	movs	r3, #0
 800adce:	9300      	str	r3, [sp, #0]
 800add0:	2300      	movs	r3, #0
 800add2:	687a      	ldr	r2, [r7, #4]
 800add4:	2100      	movs	r1, #0
 800add6:	6978      	ldr	r0, [r7, #20]
 800add8:	f7ff ff88 	bl	800acec <xTimerGenericCommand>
 800addc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800adde:	693b      	ldr	r3, [r7, #16]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d113      	bne.n	800ae0c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ade4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade8:	f383 8811 	msr	BASEPRI, r3
 800adec:	f3bf 8f6f 	isb	sy
 800adf0:	f3bf 8f4f 	dsb	sy
 800adf4:	60fb      	str	r3, [r7, #12]
}
 800adf6:	bf00      	nop
 800adf8:	e7fe      	b.n	800adf8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae00:	f023 0301 	bic.w	r3, r3, #1
 800ae04:	b2da      	uxtb	r2, r3
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	6a1b      	ldr	r3, [r3, #32]
 800ae10:	6978      	ldr	r0, [r7, #20]
 800ae12:	4798      	blx	r3
}
 800ae14:	bf00      	nop
 800ae16:	3718      	adds	r7, #24
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}
 800ae1c:	20001994 	.word	0x20001994

0800ae20 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b084      	sub	sp, #16
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ae28:	f107 0308 	add.w	r3, r7, #8
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f000 f857 	bl	800aee0 <prvGetNextExpireTime>
 800ae32:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	4619      	mov	r1, r3
 800ae38:	68f8      	ldr	r0, [r7, #12]
 800ae3a:	f000 f803 	bl	800ae44 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ae3e:	f000 f8d5 	bl	800afec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ae42:	e7f1      	b.n	800ae28 <prvTimerTask+0x8>

0800ae44 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b084      	sub	sp, #16
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ae4e:	f7ff fa39 	bl	800a2c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ae52:	f107 0308 	add.w	r3, r7, #8
 800ae56:	4618      	mov	r0, r3
 800ae58:	f000 f866 	bl	800af28 <prvSampleTimeNow>
 800ae5c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d130      	bne.n	800aec6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d10a      	bne.n	800ae80 <prvProcessTimerOrBlockTask+0x3c>
 800ae6a:	687a      	ldr	r2, [r7, #4]
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	429a      	cmp	r2, r3
 800ae70:	d806      	bhi.n	800ae80 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ae72:	f7ff fa35 	bl	800a2e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ae76:	68f9      	ldr	r1, [r7, #12]
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f7ff ff85 	bl	800ad88 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ae7e:	e024      	b.n	800aeca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d008      	beq.n	800ae98 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ae86:	4b13      	ldr	r3, [pc, #76]	; (800aed4 <prvProcessTimerOrBlockTask+0x90>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d101      	bne.n	800ae94 <prvProcessTimerOrBlockTask+0x50>
 800ae90:	2301      	movs	r3, #1
 800ae92:	e000      	b.n	800ae96 <prvProcessTimerOrBlockTask+0x52>
 800ae94:	2300      	movs	r3, #0
 800ae96:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ae98:	4b0f      	ldr	r3, [pc, #60]	; (800aed8 <prvProcessTimerOrBlockTask+0x94>)
 800ae9a:	6818      	ldr	r0, [r3, #0]
 800ae9c:	687a      	ldr	r2, [r7, #4]
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	1ad3      	subs	r3, r2, r3
 800aea2:	683a      	ldr	r2, [r7, #0]
 800aea4:	4619      	mov	r1, r3
 800aea6:	f7fe ff7d 	bl	8009da4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800aeaa:	f7ff fa19 	bl	800a2e0 <xTaskResumeAll>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d10a      	bne.n	800aeca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800aeb4:	4b09      	ldr	r3, [pc, #36]	; (800aedc <prvProcessTimerOrBlockTask+0x98>)
 800aeb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aeba:	601a      	str	r2, [r3, #0]
 800aebc:	f3bf 8f4f 	dsb	sy
 800aec0:	f3bf 8f6f 	isb	sy
}
 800aec4:	e001      	b.n	800aeca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800aec6:	f7ff fa0b 	bl	800a2e0 <xTaskResumeAll>
}
 800aeca:	bf00      	nop
 800aecc:	3710      	adds	r7, #16
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}
 800aed2:	bf00      	nop
 800aed4:	20001998 	.word	0x20001998
 800aed8:	2000199c 	.word	0x2000199c
 800aedc:	e000ed04 	.word	0xe000ed04

0800aee0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800aee0:	b480      	push	{r7}
 800aee2:	b085      	sub	sp, #20
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800aee8:	4b0e      	ldr	r3, [pc, #56]	; (800af24 <prvGetNextExpireTime+0x44>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d101      	bne.n	800aef6 <prvGetNextExpireTime+0x16>
 800aef2:	2201      	movs	r2, #1
 800aef4:	e000      	b.n	800aef8 <prvGetNextExpireTime+0x18>
 800aef6:	2200      	movs	r2, #0
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d105      	bne.n	800af10 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800af04:	4b07      	ldr	r3, [pc, #28]	; (800af24 <prvGetNextExpireTime+0x44>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	68db      	ldr	r3, [r3, #12]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	60fb      	str	r3, [r7, #12]
 800af0e:	e001      	b.n	800af14 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800af10:	2300      	movs	r3, #0
 800af12:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800af14:	68fb      	ldr	r3, [r7, #12]
}
 800af16:	4618      	mov	r0, r3
 800af18:	3714      	adds	r7, #20
 800af1a:	46bd      	mov	sp, r7
 800af1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af20:	4770      	bx	lr
 800af22:	bf00      	nop
 800af24:	20001994 	.word	0x20001994

0800af28 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b084      	sub	sp, #16
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800af30:	f7ff fa74 	bl	800a41c <xTaskGetTickCount>
 800af34:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800af36:	4b0b      	ldr	r3, [pc, #44]	; (800af64 <prvSampleTimeNow+0x3c>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	68fa      	ldr	r2, [r7, #12]
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d205      	bcs.n	800af4c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800af40:	f000 f936 	bl	800b1b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2201      	movs	r2, #1
 800af48:	601a      	str	r2, [r3, #0]
 800af4a:	e002      	b.n	800af52 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2200      	movs	r2, #0
 800af50:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800af52:	4a04      	ldr	r2, [pc, #16]	; (800af64 <prvSampleTimeNow+0x3c>)
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800af58:	68fb      	ldr	r3, [r7, #12]
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3710      	adds	r7, #16
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}
 800af62:	bf00      	nop
 800af64:	200019a4 	.word	0x200019a4

0800af68 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b086      	sub	sp, #24
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	60f8      	str	r0, [r7, #12]
 800af70:	60b9      	str	r1, [r7, #8]
 800af72:	607a      	str	r2, [r7, #4]
 800af74:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800af76:	2300      	movs	r3, #0
 800af78:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	68ba      	ldr	r2, [r7, #8]
 800af7e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	68fa      	ldr	r2, [r7, #12]
 800af84:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800af86:	68ba      	ldr	r2, [r7, #8]
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	429a      	cmp	r2, r3
 800af8c:	d812      	bhi.n	800afb4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af8e:	687a      	ldr	r2, [r7, #4]
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	1ad2      	subs	r2, r2, r3
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	699b      	ldr	r3, [r3, #24]
 800af98:	429a      	cmp	r2, r3
 800af9a:	d302      	bcc.n	800afa2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800af9c:	2301      	movs	r3, #1
 800af9e:	617b      	str	r3, [r7, #20]
 800afa0:	e01b      	b.n	800afda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800afa2:	4b10      	ldr	r3, [pc, #64]	; (800afe4 <prvInsertTimerInActiveList+0x7c>)
 800afa4:	681a      	ldr	r2, [r3, #0]
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	3304      	adds	r3, #4
 800afaa:	4619      	mov	r1, r3
 800afac:	4610      	mov	r0, r2
 800afae:	f7fe f9de 	bl	800936e <vListInsert>
 800afb2:	e012      	b.n	800afda <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800afb4:	687a      	ldr	r2, [r7, #4]
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	429a      	cmp	r2, r3
 800afba:	d206      	bcs.n	800afca <prvInsertTimerInActiveList+0x62>
 800afbc:	68ba      	ldr	r2, [r7, #8]
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	429a      	cmp	r2, r3
 800afc2:	d302      	bcc.n	800afca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800afc4:	2301      	movs	r3, #1
 800afc6:	617b      	str	r3, [r7, #20]
 800afc8:	e007      	b.n	800afda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800afca:	4b07      	ldr	r3, [pc, #28]	; (800afe8 <prvInsertTimerInActiveList+0x80>)
 800afcc:	681a      	ldr	r2, [r3, #0]
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	3304      	adds	r3, #4
 800afd2:	4619      	mov	r1, r3
 800afd4:	4610      	mov	r0, r2
 800afd6:	f7fe f9ca 	bl	800936e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800afda:	697b      	ldr	r3, [r7, #20]
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3718      	adds	r7, #24
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}
 800afe4:	20001998 	.word	0x20001998
 800afe8:	20001994 	.word	0x20001994

0800afec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b08e      	sub	sp, #56	; 0x38
 800aff0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aff2:	e0ca      	b.n	800b18a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	da18      	bge.n	800b02c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800affa:	1d3b      	adds	r3, r7, #4
 800affc:	3304      	adds	r3, #4
 800affe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b002:	2b00      	cmp	r3, #0
 800b004:	d10a      	bne.n	800b01c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b00a:	f383 8811 	msr	BASEPRI, r3
 800b00e:	f3bf 8f6f 	isb	sy
 800b012:	f3bf 8f4f 	dsb	sy
 800b016:	61fb      	str	r3, [r7, #28]
}
 800b018:	bf00      	nop
 800b01a:	e7fe      	b.n	800b01a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b022:	6850      	ldr	r0, [r2, #4]
 800b024:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b026:	6892      	ldr	r2, [r2, #8]
 800b028:	4611      	mov	r1, r2
 800b02a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	f2c0 80aa 	blt.w	800b188 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b03a:	695b      	ldr	r3, [r3, #20]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d004      	beq.n	800b04a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b042:	3304      	adds	r3, #4
 800b044:	4618      	mov	r0, r3
 800b046:	f7fe f9cb 	bl	80093e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b04a:	463b      	mov	r3, r7
 800b04c:	4618      	mov	r0, r3
 800b04e:	f7ff ff6b 	bl	800af28 <prvSampleTimeNow>
 800b052:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2b09      	cmp	r3, #9
 800b058:	f200 8097 	bhi.w	800b18a <prvProcessReceivedCommands+0x19e>
 800b05c:	a201      	add	r2, pc, #4	; (adr r2, 800b064 <prvProcessReceivedCommands+0x78>)
 800b05e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b062:	bf00      	nop
 800b064:	0800b08d 	.word	0x0800b08d
 800b068:	0800b08d 	.word	0x0800b08d
 800b06c:	0800b08d 	.word	0x0800b08d
 800b070:	0800b101 	.word	0x0800b101
 800b074:	0800b115 	.word	0x0800b115
 800b078:	0800b15f 	.word	0x0800b15f
 800b07c:	0800b08d 	.word	0x0800b08d
 800b080:	0800b08d 	.word	0x0800b08d
 800b084:	0800b101 	.word	0x0800b101
 800b088:	0800b115 	.word	0x0800b115
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b08e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b092:	f043 0301 	orr.w	r3, r3, #1
 800b096:	b2da      	uxtb	r2, r3
 800b098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b09a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b09e:	68ba      	ldr	r2, [r7, #8]
 800b0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0a2:	699b      	ldr	r3, [r3, #24]
 800b0a4:	18d1      	adds	r1, r2, r3
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0ac:	f7ff ff5c 	bl	800af68 <prvInsertTimerInActiveList>
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d069      	beq.n	800b18a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0b8:	6a1b      	ldr	r3, [r3, #32]
 800b0ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0c4:	f003 0304 	and.w	r3, r3, #4
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d05e      	beq.n	800b18a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b0cc:	68ba      	ldr	r2, [r7, #8]
 800b0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0d0:	699b      	ldr	r3, [r3, #24]
 800b0d2:	441a      	add	r2, r3
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	9300      	str	r3, [sp, #0]
 800b0d8:	2300      	movs	r3, #0
 800b0da:	2100      	movs	r1, #0
 800b0dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0de:	f7ff fe05 	bl	800acec <xTimerGenericCommand>
 800b0e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b0e4:	6a3b      	ldr	r3, [r7, #32]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d14f      	bne.n	800b18a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ee:	f383 8811 	msr	BASEPRI, r3
 800b0f2:	f3bf 8f6f 	isb	sy
 800b0f6:	f3bf 8f4f 	dsb	sy
 800b0fa:	61bb      	str	r3, [r7, #24]
}
 800b0fc:	bf00      	nop
 800b0fe:	e7fe      	b.n	800b0fe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b102:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b106:	f023 0301 	bic.w	r3, r3, #1
 800b10a:	b2da      	uxtb	r2, r3
 800b10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b10e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b112:	e03a      	b.n	800b18a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b116:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b11a:	f043 0301 	orr.w	r3, r3, #1
 800b11e:	b2da      	uxtb	r2, r3
 800b120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b122:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b126:	68ba      	ldr	r2, [r7, #8]
 800b128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b12a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b12e:	699b      	ldr	r3, [r3, #24]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d10a      	bne.n	800b14a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b138:	f383 8811 	msr	BASEPRI, r3
 800b13c:	f3bf 8f6f 	isb	sy
 800b140:	f3bf 8f4f 	dsb	sy
 800b144:	617b      	str	r3, [r7, #20]
}
 800b146:	bf00      	nop
 800b148:	e7fe      	b.n	800b148 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b14c:	699a      	ldr	r2, [r3, #24]
 800b14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b150:	18d1      	adds	r1, r2, r3
 800b152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b156:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b158:	f7ff ff06 	bl	800af68 <prvInsertTimerInActiveList>
					break;
 800b15c:	e015      	b.n	800b18a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b160:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b164:	f003 0302 	and.w	r3, r3, #2
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d103      	bne.n	800b174 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b16c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b16e:	f000 fbdf 	bl	800b930 <vPortFree>
 800b172:	e00a      	b.n	800b18a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b176:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b17a:	f023 0301 	bic.w	r3, r3, #1
 800b17e:	b2da      	uxtb	r2, r3
 800b180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b182:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b186:	e000      	b.n	800b18a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b188:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b18a:	4b08      	ldr	r3, [pc, #32]	; (800b1ac <prvProcessReceivedCommands+0x1c0>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	1d39      	adds	r1, r7, #4
 800b190:	2200      	movs	r2, #0
 800b192:	4618      	mov	r0, r3
 800b194:	f7fe fbec 	bl	8009970 <xQueueReceive>
 800b198:	4603      	mov	r3, r0
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	f47f af2a 	bne.w	800aff4 <prvProcessReceivedCommands+0x8>
	}
}
 800b1a0:	bf00      	nop
 800b1a2:	bf00      	nop
 800b1a4:	3730      	adds	r7, #48	; 0x30
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}
 800b1aa:	bf00      	nop
 800b1ac:	2000199c 	.word	0x2000199c

0800b1b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b088      	sub	sp, #32
 800b1b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b1b6:	e048      	b.n	800b24a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b1b8:	4b2d      	ldr	r3, [pc, #180]	; (800b270 <prvSwitchTimerLists+0xc0>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	68db      	ldr	r3, [r3, #12]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1c2:	4b2b      	ldr	r3, [pc, #172]	; (800b270 <prvSwitchTimerLists+0xc0>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	68db      	ldr	r3, [r3, #12]
 800b1c8:	68db      	ldr	r3, [r3, #12]
 800b1ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	3304      	adds	r3, #4
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f7fe f905 	bl	80093e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	6a1b      	ldr	r3, [r3, #32]
 800b1da:	68f8      	ldr	r0, [r7, #12]
 800b1dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1e4:	f003 0304 	and.w	r3, r3, #4
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d02e      	beq.n	800b24a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	699b      	ldr	r3, [r3, #24]
 800b1f0:	693a      	ldr	r2, [r7, #16]
 800b1f2:	4413      	add	r3, r2
 800b1f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b1f6:	68ba      	ldr	r2, [r7, #8]
 800b1f8:	693b      	ldr	r3, [r7, #16]
 800b1fa:	429a      	cmp	r2, r3
 800b1fc:	d90e      	bls.n	800b21c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	68ba      	ldr	r2, [r7, #8]
 800b202:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	68fa      	ldr	r2, [r7, #12]
 800b208:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b20a:	4b19      	ldr	r3, [pc, #100]	; (800b270 <prvSwitchTimerLists+0xc0>)
 800b20c:	681a      	ldr	r2, [r3, #0]
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	3304      	adds	r3, #4
 800b212:	4619      	mov	r1, r3
 800b214:	4610      	mov	r0, r2
 800b216:	f7fe f8aa 	bl	800936e <vListInsert>
 800b21a:	e016      	b.n	800b24a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b21c:	2300      	movs	r3, #0
 800b21e:	9300      	str	r3, [sp, #0]
 800b220:	2300      	movs	r3, #0
 800b222:	693a      	ldr	r2, [r7, #16]
 800b224:	2100      	movs	r1, #0
 800b226:	68f8      	ldr	r0, [r7, #12]
 800b228:	f7ff fd60 	bl	800acec <xTimerGenericCommand>
 800b22c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d10a      	bne.n	800b24a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b234:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b238:	f383 8811 	msr	BASEPRI, r3
 800b23c:	f3bf 8f6f 	isb	sy
 800b240:	f3bf 8f4f 	dsb	sy
 800b244:	603b      	str	r3, [r7, #0]
}
 800b246:	bf00      	nop
 800b248:	e7fe      	b.n	800b248 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b24a:	4b09      	ldr	r3, [pc, #36]	; (800b270 <prvSwitchTimerLists+0xc0>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d1b1      	bne.n	800b1b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b254:	4b06      	ldr	r3, [pc, #24]	; (800b270 <prvSwitchTimerLists+0xc0>)
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b25a:	4b06      	ldr	r3, [pc, #24]	; (800b274 <prvSwitchTimerLists+0xc4>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	4a04      	ldr	r2, [pc, #16]	; (800b270 <prvSwitchTimerLists+0xc0>)
 800b260:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b262:	4a04      	ldr	r2, [pc, #16]	; (800b274 <prvSwitchTimerLists+0xc4>)
 800b264:	697b      	ldr	r3, [r7, #20]
 800b266:	6013      	str	r3, [r2, #0]
}
 800b268:	bf00      	nop
 800b26a:	3718      	adds	r7, #24
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}
 800b270:	20001994 	.word	0x20001994
 800b274:	20001998 	.word	0x20001998

0800b278 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b082      	sub	sp, #8
 800b27c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b27e:	f000 f969 	bl	800b554 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b282:	4b15      	ldr	r3, [pc, #84]	; (800b2d8 <prvCheckForValidListAndQueue+0x60>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d120      	bne.n	800b2cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b28a:	4814      	ldr	r0, [pc, #80]	; (800b2dc <prvCheckForValidListAndQueue+0x64>)
 800b28c:	f7fe f81e 	bl	80092cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b290:	4813      	ldr	r0, [pc, #76]	; (800b2e0 <prvCheckForValidListAndQueue+0x68>)
 800b292:	f7fe f81b 	bl	80092cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b296:	4b13      	ldr	r3, [pc, #76]	; (800b2e4 <prvCheckForValidListAndQueue+0x6c>)
 800b298:	4a10      	ldr	r2, [pc, #64]	; (800b2dc <prvCheckForValidListAndQueue+0x64>)
 800b29a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b29c:	4b12      	ldr	r3, [pc, #72]	; (800b2e8 <prvCheckForValidListAndQueue+0x70>)
 800b29e:	4a10      	ldr	r2, [pc, #64]	; (800b2e0 <prvCheckForValidListAndQueue+0x68>)
 800b2a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	9300      	str	r3, [sp, #0]
 800b2a6:	4b11      	ldr	r3, [pc, #68]	; (800b2ec <prvCheckForValidListAndQueue+0x74>)
 800b2a8:	4a11      	ldr	r2, [pc, #68]	; (800b2f0 <prvCheckForValidListAndQueue+0x78>)
 800b2aa:	2110      	movs	r1, #16
 800b2ac:	200a      	movs	r0, #10
 800b2ae:	f7fe f929 	bl	8009504 <xQueueGenericCreateStatic>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	4a08      	ldr	r2, [pc, #32]	; (800b2d8 <prvCheckForValidListAndQueue+0x60>)
 800b2b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b2b8:	4b07      	ldr	r3, [pc, #28]	; (800b2d8 <prvCheckForValidListAndQueue+0x60>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d005      	beq.n	800b2cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b2c0:	4b05      	ldr	r3, [pc, #20]	; (800b2d8 <prvCheckForValidListAndQueue+0x60>)
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	490b      	ldr	r1, [pc, #44]	; (800b2f4 <prvCheckForValidListAndQueue+0x7c>)
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f7fe fd42 	bl	8009d50 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b2cc:	f000 f972 	bl	800b5b4 <vPortExitCritical>
}
 800b2d0:	bf00      	nop
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}
 800b2d6:	bf00      	nop
 800b2d8:	2000199c 	.word	0x2000199c
 800b2dc:	2000196c 	.word	0x2000196c
 800b2e0:	20001980 	.word	0x20001980
 800b2e4:	20001994 	.word	0x20001994
 800b2e8:	20001998 	.word	0x20001998
 800b2ec:	20001a48 	.word	0x20001a48
 800b2f0:	200019a8 	.word	0x200019a8
 800b2f4:	0800ceac 	.word	0x0800ceac

0800b2f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b085      	sub	sp, #20
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	60f8      	str	r0, [r7, #12]
 800b300:	60b9      	str	r1, [r7, #8]
 800b302:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	3b04      	subs	r3, #4
 800b308:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b310:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	3b04      	subs	r3, #4
 800b316:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	f023 0201 	bic.w	r2, r3, #1
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	3b04      	subs	r3, #4
 800b326:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b328:	4a0c      	ldr	r2, [pc, #48]	; (800b35c <pxPortInitialiseStack+0x64>)
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	3b14      	subs	r3, #20
 800b332:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b334:	687a      	ldr	r2, [r7, #4]
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	3b04      	subs	r3, #4
 800b33e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	f06f 0202 	mvn.w	r2, #2
 800b346:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	3b20      	subs	r3, #32
 800b34c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b34e:	68fb      	ldr	r3, [r7, #12]
}
 800b350:	4618      	mov	r0, r3
 800b352:	3714      	adds	r7, #20
 800b354:	46bd      	mov	sp, r7
 800b356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35a:	4770      	bx	lr
 800b35c:	0800b361 	.word	0x0800b361

0800b360 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b360:	b480      	push	{r7}
 800b362:	b085      	sub	sp, #20
 800b364:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b366:	2300      	movs	r3, #0
 800b368:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b36a:	4b12      	ldr	r3, [pc, #72]	; (800b3b4 <prvTaskExitError+0x54>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b372:	d00a      	beq.n	800b38a <prvTaskExitError+0x2a>
	__asm volatile
 800b374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b378:	f383 8811 	msr	BASEPRI, r3
 800b37c:	f3bf 8f6f 	isb	sy
 800b380:	f3bf 8f4f 	dsb	sy
 800b384:	60fb      	str	r3, [r7, #12]
}
 800b386:	bf00      	nop
 800b388:	e7fe      	b.n	800b388 <prvTaskExitError+0x28>
	__asm volatile
 800b38a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b38e:	f383 8811 	msr	BASEPRI, r3
 800b392:	f3bf 8f6f 	isb	sy
 800b396:	f3bf 8f4f 	dsb	sy
 800b39a:	60bb      	str	r3, [r7, #8]
}
 800b39c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b39e:	bf00      	nop
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d0fc      	beq.n	800b3a0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b3a6:	bf00      	nop
 800b3a8:	bf00      	nop
 800b3aa:	3714      	adds	r7, #20
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b2:	4770      	bx	lr
 800b3b4:	200000ac 	.word	0x200000ac
	...

0800b3c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b3c0:	4b07      	ldr	r3, [pc, #28]	; (800b3e0 <pxCurrentTCBConst2>)
 800b3c2:	6819      	ldr	r1, [r3, #0]
 800b3c4:	6808      	ldr	r0, [r1, #0]
 800b3c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ca:	f380 8809 	msr	PSP, r0
 800b3ce:	f3bf 8f6f 	isb	sy
 800b3d2:	f04f 0000 	mov.w	r0, #0
 800b3d6:	f380 8811 	msr	BASEPRI, r0
 800b3da:	4770      	bx	lr
 800b3dc:	f3af 8000 	nop.w

0800b3e0 <pxCurrentTCBConst2>:
 800b3e0:	2000146c 	.word	0x2000146c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b3e4:	bf00      	nop
 800b3e6:	bf00      	nop

0800b3e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b3e8:	4808      	ldr	r0, [pc, #32]	; (800b40c <prvPortStartFirstTask+0x24>)
 800b3ea:	6800      	ldr	r0, [r0, #0]
 800b3ec:	6800      	ldr	r0, [r0, #0]
 800b3ee:	f380 8808 	msr	MSP, r0
 800b3f2:	f04f 0000 	mov.w	r0, #0
 800b3f6:	f380 8814 	msr	CONTROL, r0
 800b3fa:	b662      	cpsie	i
 800b3fc:	b661      	cpsie	f
 800b3fe:	f3bf 8f4f 	dsb	sy
 800b402:	f3bf 8f6f 	isb	sy
 800b406:	df00      	svc	0
 800b408:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b40a:	bf00      	nop
 800b40c:	e000ed08 	.word	0xe000ed08

0800b410 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b086      	sub	sp, #24
 800b414:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b416:	4b46      	ldr	r3, [pc, #280]	; (800b530 <xPortStartScheduler+0x120>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	4a46      	ldr	r2, [pc, #280]	; (800b534 <xPortStartScheduler+0x124>)
 800b41c:	4293      	cmp	r3, r2
 800b41e:	d10a      	bne.n	800b436 <xPortStartScheduler+0x26>
	__asm volatile
 800b420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b424:	f383 8811 	msr	BASEPRI, r3
 800b428:	f3bf 8f6f 	isb	sy
 800b42c:	f3bf 8f4f 	dsb	sy
 800b430:	613b      	str	r3, [r7, #16]
}
 800b432:	bf00      	nop
 800b434:	e7fe      	b.n	800b434 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b436:	4b3e      	ldr	r3, [pc, #248]	; (800b530 <xPortStartScheduler+0x120>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	4a3f      	ldr	r2, [pc, #252]	; (800b538 <xPortStartScheduler+0x128>)
 800b43c:	4293      	cmp	r3, r2
 800b43e:	d10a      	bne.n	800b456 <xPortStartScheduler+0x46>
	__asm volatile
 800b440:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b444:	f383 8811 	msr	BASEPRI, r3
 800b448:	f3bf 8f6f 	isb	sy
 800b44c:	f3bf 8f4f 	dsb	sy
 800b450:	60fb      	str	r3, [r7, #12]
}
 800b452:	bf00      	nop
 800b454:	e7fe      	b.n	800b454 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b456:	4b39      	ldr	r3, [pc, #228]	; (800b53c <xPortStartScheduler+0x12c>)
 800b458:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	781b      	ldrb	r3, [r3, #0]
 800b45e:	b2db      	uxtb	r3, r3
 800b460:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b462:	697b      	ldr	r3, [r7, #20]
 800b464:	22ff      	movs	r2, #255	; 0xff
 800b466:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b468:	697b      	ldr	r3, [r7, #20]
 800b46a:	781b      	ldrb	r3, [r3, #0]
 800b46c:	b2db      	uxtb	r3, r3
 800b46e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b470:	78fb      	ldrb	r3, [r7, #3]
 800b472:	b2db      	uxtb	r3, r3
 800b474:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b478:	b2da      	uxtb	r2, r3
 800b47a:	4b31      	ldr	r3, [pc, #196]	; (800b540 <xPortStartScheduler+0x130>)
 800b47c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b47e:	4b31      	ldr	r3, [pc, #196]	; (800b544 <xPortStartScheduler+0x134>)
 800b480:	2207      	movs	r2, #7
 800b482:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b484:	e009      	b.n	800b49a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b486:	4b2f      	ldr	r3, [pc, #188]	; (800b544 <xPortStartScheduler+0x134>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	3b01      	subs	r3, #1
 800b48c:	4a2d      	ldr	r2, [pc, #180]	; (800b544 <xPortStartScheduler+0x134>)
 800b48e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b490:	78fb      	ldrb	r3, [r7, #3]
 800b492:	b2db      	uxtb	r3, r3
 800b494:	005b      	lsls	r3, r3, #1
 800b496:	b2db      	uxtb	r3, r3
 800b498:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b49a:	78fb      	ldrb	r3, [r7, #3]
 800b49c:	b2db      	uxtb	r3, r3
 800b49e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4a2:	2b80      	cmp	r3, #128	; 0x80
 800b4a4:	d0ef      	beq.n	800b486 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b4a6:	4b27      	ldr	r3, [pc, #156]	; (800b544 <xPortStartScheduler+0x134>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	f1c3 0307 	rsb	r3, r3, #7
 800b4ae:	2b04      	cmp	r3, #4
 800b4b0:	d00a      	beq.n	800b4c8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b4b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4b6:	f383 8811 	msr	BASEPRI, r3
 800b4ba:	f3bf 8f6f 	isb	sy
 800b4be:	f3bf 8f4f 	dsb	sy
 800b4c2:	60bb      	str	r3, [r7, #8]
}
 800b4c4:	bf00      	nop
 800b4c6:	e7fe      	b.n	800b4c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b4c8:	4b1e      	ldr	r3, [pc, #120]	; (800b544 <xPortStartScheduler+0x134>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	021b      	lsls	r3, r3, #8
 800b4ce:	4a1d      	ldr	r2, [pc, #116]	; (800b544 <xPortStartScheduler+0x134>)
 800b4d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b4d2:	4b1c      	ldr	r3, [pc, #112]	; (800b544 <xPortStartScheduler+0x134>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b4da:	4a1a      	ldr	r2, [pc, #104]	; (800b544 <xPortStartScheduler+0x134>)
 800b4dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	b2da      	uxtb	r2, r3
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b4e6:	4b18      	ldr	r3, [pc, #96]	; (800b548 <xPortStartScheduler+0x138>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	4a17      	ldr	r2, [pc, #92]	; (800b548 <xPortStartScheduler+0x138>)
 800b4ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b4f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b4f2:	4b15      	ldr	r3, [pc, #84]	; (800b548 <xPortStartScheduler+0x138>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	4a14      	ldr	r2, [pc, #80]	; (800b548 <xPortStartScheduler+0x138>)
 800b4f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b4fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b4fe:	f000 f8dd 	bl	800b6bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b502:	4b12      	ldr	r3, [pc, #72]	; (800b54c <xPortStartScheduler+0x13c>)
 800b504:	2200      	movs	r2, #0
 800b506:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b508:	f000 f8fc 	bl	800b704 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b50c:	4b10      	ldr	r3, [pc, #64]	; (800b550 <xPortStartScheduler+0x140>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	4a0f      	ldr	r2, [pc, #60]	; (800b550 <xPortStartScheduler+0x140>)
 800b512:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b516:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b518:	f7ff ff66 	bl	800b3e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b51c:	f7ff f848 	bl	800a5b0 <vTaskSwitchContext>
	prvTaskExitError();
 800b520:	f7ff ff1e 	bl	800b360 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b524:	2300      	movs	r3, #0
}
 800b526:	4618      	mov	r0, r3
 800b528:	3718      	adds	r7, #24
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}
 800b52e:	bf00      	nop
 800b530:	e000ed00 	.word	0xe000ed00
 800b534:	410fc271 	.word	0x410fc271
 800b538:	410fc270 	.word	0x410fc270
 800b53c:	e000e400 	.word	0xe000e400
 800b540:	20001a98 	.word	0x20001a98
 800b544:	20001a9c 	.word	0x20001a9c
 800b548:	e000ed20 	.word	0xe000ed20
 800b54c:	200000ac 	.word	0x200000ac
 800b550:	e000ef34 	.word	0xe000ef34

0800b554 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b554:	b480      	push	{r7}
 800b556:	b083      	sub	sp, #12
 800b558:	af00      	add	r7, sp, #0
	__asm volatile
 800b55a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b55e:	f383 8811 	msr	BASEPRI, r3
 800b562:	f3bf 8f6f 	isb	sy
 800b566:	f3bf 8f4f 	dsb	sy
 800b56a:	607b      	str	r3, [r7, #4]
}
 800b56c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b56e:	4b0f      	ldr	r3, [pc, #60]	; (800b5ac <vPortEnterCritical+0x58>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	3301      	adds	r3, #1
 800b574:	4a0d      	ldr	r2, [pc, #52]	; (800b5ac <vPortEnterCritical+0x58>)
 800b576:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b578:	4b0c      	ldr	r3, [pc, #48]	; (800b5ac <vPortEnterCritical+0x58>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	2b01      	cmp	r3, #1
 800b57e:	d10f      	bne.n	800b5a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b580:	4b0b      	ldr	r3, [pc, #44]	; (800b5b0 <vPortEnterCritical+0x5c>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	b2db      	uxtb	r3, r3
 800b586:	2b00      	cmp	r3, #0
 800b588:	d00a      	beq.n	800b5a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800b58a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b58e:	f383 8811 	msr	BASEPRI, r3
 800b592:	f3bf 8f6f 	isb	sy
 800b596:	f3bf 8f4f 	dsb	sy
 800b59a:	603b      	str	r3, [r7, #0]
}
 800b59c:	bf00      	nop
 800b59e:	e7fe      	b.n	800b59e <vPortEnterCritical+0x4a>
	}
}
 800b5a0:	bf00      	nop
 800b5a2:	370c      	adds	r7, #12
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5aa:	4770      	bx	lr
 800b5ac:	200000ac 	.word	0x200000ac
 800b5b0:	e000ed04 	.word	0xe000ed04

0800b5b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	b083      	sub	sp, #12
 800b5b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b5ba:	4b12      	ldr	r3, [pc, #72]	; (800b604 <vPortExitCritical+0x50>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d10a      	bne.n	800b5d8 <vPortExitCritical+0x24>
	__asm volatile
 800b5c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c6:	f383 8811 	msr	BASEPRI, r3
 800b5ca:	f3bf 8f6f 	isb	sy
 800b5ce:	f3bf 8f4f 	dsb	sy
 800b5d2:	607b      	str	r3, [r7, #4]
}
 800b5d4:	bf00      	nop
 800b5d6:	e7fe      	b.n	800b5d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b5d8:	4b0a      	ldr	r3, [pc, #40]	; (800b604 <vPortExitCritical+0x50>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	3b01      	subs	r3, #1
 800b5de:	4a09      	ldr	r2, [pc, #36]	; (800b604 <vPortExitCritical+0x50>)
 800b5e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b5e2:	4b08      	ldr	r3, [pc, #32]	; (800b604 <vPortExitCritical+0x50>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d105      	bne.n	800b5f6 <vPortExitCritical+0x42>
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	f383 8811 	msr	BASEPRI, r3
}
 800b5f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b5f6:	bf00      	nop
 800b5f8:	370c      	adds	r7, #12
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b600:	4770      	bx	lr
 800b602:	bf00      	nop
 800b604:	200000ac 	.word	0x200000ac
	...

0800b610 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b610:	f3ef 8009 	mrs	r0, PSP
 800b614:	f3bf 8f6f 	isb	sy
 800b618:	4b15      	ldr	r3, [pc, #84]	; (800b670 <pxCurrentTCBConst>)
 800b61a:	681a      	ldr	r2, [r3, #0]
 800b61c:	f01e 0f10 	tst.w	lr, #16
 800b620:	bf08      	it	eq
 800b622:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b626:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b62a:	6010      	str	r0, [r2, #0]
 800b62c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b630:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b634:	f380 8811 	msr	BASEPRI, r0
 800b638:	f3bf 8f4f 	dsb	sy
 800b63c:	f3bf 8f6f 	isb	sy
 800b640:	f7fe ffb6 	bl	800a5b0 <vTaskSwitchContext>
 800b644:	f04f 0000 	mov.w	r0, #0
 800b648:	f380 8811 	msr	BASEPRI, r0
 800b64c:	bc09      	pop	{r0, r3}
 800b64e:	6819      	ldr	r1, [r3, #0]
 800b650:	6808      	ldr	r0, [r1, #0]
 800b652:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b656:	f01e 0f10 	tst.w	lr, #16
 800b65a:	bf08      	it	eq
 800b65c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b660:	f380 8809 	msr	PSP, r0
 800b664:	f3bf 8f6f 	isb	sy
 800b668:	4770      	bx	lr
 800b66a:	bf00      	nop
 800b66c:	f3af 8000 	nop.w

0800b670 <pxCurrentTCBConst>:
 800b670:	2000146c 	.word	0x2000146c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b674:	bf00      	nop
 800b676:	bf00      	nop

0800b678 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b082      	sub	sp, #8
 800b67c:	af00      	add	r7, sp, #0
	__asm volatile
 800b67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b682:	f383 8811 	msr	BASEPRI, r3
 800b686:	f3bf 8f6f 	isb	sy
 800b68a:	f3bf 8f4f 	dsb	sy
 800b68e:	607b      	str	r3, [r7, #4]
}
 800b690:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b692:	f7fe fed3 	bl	800a43c <xTaskIncrementTick>
 800b696:	4603      	mov	r3, r0
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d003      	beq.n	800b6a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b69c:	4b06      	ldr	r3, [pc, #24]	; (800b6b8 <xPortSysTickHandler+0x40>)
 800b69e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6a2:	601a      	str	r2, [r3, #0]
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	f383 8811 	msr	BASEPRI, r3
}
 800b6ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b6b0:	bf00      	nop
 800b6b2:	3708      	adds	r7, #8
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}
 800b6b8:	e000ed04 	.word	0xe000ed04

0800b6bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b6bc:	b480      	push	{r7}
 800b6be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b6c0:	4b0b      	ldr	r3, [pc, #44]	; (800b6f0 <vPortSetupTimerInterrupt+0x34>)
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b6c6:	4b0b      	ldr	r3, [pc, #44]	; (800b6f4 <vPortSetupTimerInterrupt+0x38>)
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b6cc:	4b0a      	ldr	r3, [pc, #40]	; (800b6f8 <vPortSetupTimerInterrupt+0x3c>)
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	4a0a      	ldr	r2, [pc, #40]	; (800b6fc <vPortSetupTimerInterrupt+0x40>)
 800b6d2:	fba2 2303 	umull	r2, r3, r2, r3
 800b6d6:	099b      	lsrs	r3, r3, #6
 800b6d8:	4a09      	ldr	r2, [pc, #36]	; (800b700 <vPortSetupTimerInterrupt+0x44>)
 800b6da:	3b01      	subs	r3, #1
 800b6dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b6de:	4b04      	ldr	r3, [pc, #16]	; (800b6f0 <vPortSetupTimerInterrupt+0x34>)
 800b6e0:	2207      	movs	r2, #7
 800b6e2:	601a      	str	r2, [r3, #0]
}
 800b6e4:	bf00      	nop
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ec:	4770      	bx	lr
 800b6ee:	bf00      	nop
 800b6f0:	e000e010 	.word	0xe000e010
 800b6f4:	e000e018 	.word	0xe000e018
 800b6f8:	200000a0 	.word	0x200000a0
 800b6fc:	10624dd3 	.word	0x10624dd3
 800b700:	e000e014 	.word	0xe000e014

0800b704 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b704:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b714 <vPortEnableVFP+0x10>
 800b708:	6801      	ldr	r1, [r0, #0]
 800b70a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b70e:	6001      	str	r1, [r0, #0]
 800b710:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b712:	bf00      	nop
 800b714:	e000ed88 	.word	0xe000ed88

0800b718 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b718:	b480      	push	{r7}
 800b71a:	b085      	sub	sp, #20
 800b71c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b71e:	f3ef 8305 	mrs	r3, IPSR
 800b722:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	2b0f      	cmp	r3, #15
 800b728:	d914      	bls.n	800b754 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b72a:	4a17      	ldr	r2, [pc, #92]	; (800b788 <vPortValidateInterruptPriority+0x70>)
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	4413      	add	r3, r2
 800b730:	781b      	ldrb	r3, [r3, #0]
 800b732:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b734:	4b15      	ldr	r3, [pc, #84]	; (800b78c <vPortValidateInterruptPriority+0x74>)
 800b736:	781b      	ldrb	r3, [r3, #0]
 800b738:	7afa      	ldrb	r2, [r7, #11]
 800b73a:	429a      	cmp	r2, r3
 800b73c:	d20a      	bcs.n	800b754 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b742:	f383 8811 	msr	BASEPRI, r3
 800b746:	f3bf 8f6f 	isb	sy
 800b74a:	f3bf 8f4f 	dsb	sy
 800b74e:	607b      	str	r3, [r7, #4]
}
 800b750:	bf00      	nop
 800b752:	e7fe      	b.n	800b752 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b754:	4b0e      	ldr	r3, [pc, #56]	; (800b790 <vPortValidateInterruptPriority+0x78>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b75c:	4b0d      	ldr	r3, [pc, #52]	; (800b794 <vPortValidateInterruptPriority+0x7c>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	429a      	cmp	r2, r3
 800b762:	d90a      	bls.n	800b77a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b764:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b768:	f383 8811 	msr	BASEPRI, r3
 800b76c:	f3bf 8f6f 	isb	sy
 800b770:	f3bf 8f4f 	dsb	sy
 800b774:	603b      	str	r3, [r7, #0]
}
 800b776:	bf00      	nop
 800b778:	e7fe      	b.n	800b778 <vPortValidateInterruptPriority+0x60>
	}
 800b77a:	bf00      	nop
 800b77c:	3714      	adds	r7, #20
 800b77e:	46bd      	mov	sp, r7
 800b780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b784:	4770      	bx	lr
 800b786:	bf00      	nop
 800b788:	e000e3f0 	.word	0xe000e3f0
 800b78c:	20001a98 	.word	0x20001a98
 800b790:	e000ed0c 	.word	0xe000ed0c
 800b794:	20001a9c 	.word	0x20001a9c

0800b798 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b08a      	sub	sp, #40	; 0x28
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b7a4:	f7fe fd8e 	bl	800a2c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b7a8:	4b5b      	ldr	r3, [pc, #364]	; (800b918 <pvPortMalloc+0x180>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d101      	bne.n	800b7b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b7b0:	f000 f920 	bl	800b9f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b7b4:	4b59      	ldr	r3, [pc, #356]	; (800b91c <pvPortMalloc+0x184>)
 800b7b6:	681a      	ldr	r2, [r3, #0]
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	4013      	ands	r3, r2
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	f040 8093 	bne.w	800b8e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d01d      	beq.n	800b804 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b7c8:	2208      	movs	r2, #8
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	4413      	add	r3, r2
 800b7ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f003 0307 	and.w	r3, r3, #7
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d014      	beq.n	800b804 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f023 0307 	bic.w	r3, r3, #7
 800b7e0:	3308      	adds	r3, #8
 800b7e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f003 0307 	and.w	r3, r3, #7
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d00a      	beq.n	800b804 <pvPortMalloc+0x6c>
	__asm volatile
 800b7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f2:	f383 8811 	msr	BASEPRI, r3
 800b7f6:	f3bf 8f6f 	isb	sy
 800b7fa:	f3bf 8f4f 	dsb	sy
 800b7fe:	617b      	str	r3, [r7, #20]
}
 800b800:	bf00      	nop
 800b802:	e7fe      	b.n	800b802 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d06e      	beq.n	800b8e8 <pvPortMalloc+0x150>
 800b80a:	4b45      	ldr	r3, [pc, #276]	; (800b920 <pvPortMalloc+0x188>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	687a      	ldr	r2, [r7, #4]
 800b810:	429a      	cmp	r2, r3
 800b812:	d869      	bhi.n	800b8e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b814:	4b43      	ldr	r3, [pc, #268]	; (800b924 <pvPortMalloc+0x18c>)
 800b816:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b818:	4b42      	ldr	r3, [pc, #264]	; (800b924 <pvPortMalloc+0x18c>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b81e:	e004      	b.n	800b82a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b822:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b82c:	685b      	ldr	r3, [r3, #4]
 800b82e:	687a      	ldr	r2, [r7, #4]
 800b830:	429a      	cmp	r2, r3
 800b832:	d903      	bls.n	800b83c <pvPortMalloc+0xa4>
 800b834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d1f1      	bne.n	800b820 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b83c:	4b36      	ldr	r3, [pc, #216]	; (800b918 <pvPortMalloc+0x180>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b842:	429a      	cmp	r2, r3
 800b844:	d050      	beq.n	800b8e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b846:	6a3b      	ldr	r3, [r7, #32]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	2208      	movs	r2, #8
 800b84c:	4413      	add	r3, r2
 800b84e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b852:	681a      	ldr	r2, [r3, #0]
 800b854:	6a3b      	ldr	r3, [r7, #32]
 800b856:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b85a:	685a      	ldr	r2, [r3, #4]
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	1ad2      	subs	r2, r2, r3
 800b860:	2308      	movs	r3, #8
 800b862:	005b      	lsls	r3, r3, #1
 800b864:	429a      	cmp	r2, r3
 800b866:	d91f      	bls.n	800b8a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	4413      	add	r3, r2
 800b86e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b870:	69bb      	ldr	r3, [r7, #24]
 800b872:	f003 0307 	and.w	r3, r3, #7
 800b876:	2b00      	cmp	r3, #0
 800b878:	d00a      	beq.n	800b890 <pvPortMalloc+0xf8>
	__asm volatile
 800b87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b87e:	f383 8811 	msr	BASEPRI, r3
 800b882:	f3bf 8f6f 	isb	sy
 800b886:	f3bf 8f4f 	dsb	sy
 800b88a:	613b      	str	r3, [r7, #16]
}
 800b88c:	bf00      	nop
 800b88e:	e7fe      	b.n	800b88e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b892:	685a      	ldr	r2, [r3, #4]
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	1ad2      	subs	r2, r2, r3
 800b898:	69bb      	ldr	r3, [r7, #24]
 800b89a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b89e:	687a      	ldr	r2, [r7, #4]
 800b8a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b8a2:	69b8      	ldr	r0, [r7, #24]
 800b8a4:	f000 f908 	bl	800bab8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b8a8:	4b1d      	ldr	r3, [pc, #116]	; (800b920 <pvPortMalloc+0x188>)
 800b8aa:	681a      	ldr	r2, [r3, #0]
 800b8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ae:	685b      	ldr	r3, [r3, #4]
 800b8b0:	1ad3      	subs	r3, r2, r3
 800b8b2:	4a1b      	ldr	r2, [pc, #108]	; (800b920 <pvPortMalloc+0x188>)
 800b8b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b8b6:	4b1a      	ldr	r3, [pc, #104]	; (800b920 <pvPortMalloc+0x188>)
 800b8b8:	681a      	ldr	r2, [r3, #0]
 800b8ba:	4b1b      	ldr	r3, [pc, #108]	; (800b928 <pvPortMalloc+0x190>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	429a      	cmp	r2, r3
 800b8c0:	d203      	bcs.n	800b8ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b8c2:	4b17      	ldr	r3, [pc, #92]	; (800b920 <pvPortMalloc+0x188>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	4a18      	ldr	r2, [pc, #96]	; (800b928 <pvPortMalloc+0x190>)
 800b8c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8cc:	685a      	ldr	r2, [r3, #4]
 800b8ce:	4b13      	ldr	r3, [pc, #76]	; (800b91c <pvPortMalloc+0x184>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	431a      	orrs	r2, r3
 800b8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8da:	2200      	movs	r2, #0
 800b8dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b8de:	4b13      	ldr	r3, [pc, #76]	; (800b92c <pvPortMalloc+0x194>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	3301      	adds	r3, #1
 800b8e4:	4a11      	ldr	r2, [pc, #68]	; (800b92c <pvPortMalloc+0x194>)
 800b8e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b8e8:	f7fe fcfa 	bl	800a2e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b8ec:	69fb      	ldr	r3, [r7, #28]
 800b8ee:	f003 0307 	and.w	r3, r3, #7
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d00a      	beq.n	800b90c <pvPortMalloc+0x174>
	__asm volatile
 800b8f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8fa:	f383 8811 	msr	BASEPRI, r3
 800b8fe:	f3bf 8f6f 	isb	sy
 800b902:	f3bf 8f4f 	dsb	sy
 800b906:	60fb      	str	r3, [r7, #12]
}
 800b908:	bf00      	nop
 800b90a:	e7fe      	b.n	800b90a <pvPortMalloc+0x172>
	return pvReturn;
 800b90c:	69fb      	ldr	r3, [r7, #28]
}
 800b90e:	4618      	mov	r0, r3
 800b910:	3728      	adds	r7, #40	; 0x28
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}
 800b916:	bf00      	nop
 800b918:	200056a8 	.word	0x200056a8
 800b91c:	200056bc 	.word	0x200056bc
 800b920:	200056ac 	.word	0x200056ac
 800b924:	200056a0 	.word	0x200056a0
 800b928:	200056b0 	.word	0x200056b0
 800b92c:	200056b4 	.word	0x200056b4

0800b930 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b086      	sub	sp, #24
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d04d      	beq.n	800b9de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b942:	2308      	movs	r3, #8
 800b944:	425b      	negs	r3, r3
 800b946:	697a      	ldr	r2, [r7, #20]
 800b948:	4413      	add	r3, r2
 800b94a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b94c:	697b      	ldr	r3, [r7, #20]
 800b94e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b950:	693b      	ldr	r3, [r7, #16]
 800b952:	685a      	ldr	r2, [r3, #4]
 800b954:	4b24      	ldr	r3, [pc, #144]	; (800b9e8 <vPortFree+0xb8>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	4013      	ands	r3, r2
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d10a      	bne.n	800b974 <vPortFree+0x44>
	__asm volatile
 800b95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b962:	f383 8811 	msr	BASEPRI, r3
 800b966:	f3bf 8f6f 	isb	sy
 800b96a:	f3bf 8f4f 	dsb	sy
 800b96e:	60fb      	str	r3, [r7, #12]
}
 800b970:	bf00      	nop
 800b972:	e7fe      	b.n	800b972 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d00a      	beq.n	800b992 <vPortFree+0x62>
	__asm volatile
 800b97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b980:	f383 8811 	msr	BASEPRI, r3
 800b984:	f3bf 8f6f 	isb	sy
 800b988:	f3bf 8f4f 	dsb	sy
 800b98c:	60bb      	str	r3, [r7, #8]
}
 800b98e:	bf00      	nop
 800b990:	e7fe      	b.n	800b990 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	685a      	ldr	r2, [r3, #4]
 800b996:	4b14      	ldr	r3, [pc, #80]	; (800b9e8 <vPortFree+0xb8>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	4013      	ands	r3, r2
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d01e      	beq.n	800b9de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b9a0:	693b      	ldr	r3, [r7, #16]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d11a      	bne.n	800b9de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b9a8:	693b      	ldr	r3, [r7, #16]
 800b9aa:	685a      	ldr	r2, [r3, #4]
 800b9ac:	4b0e      	ldr	r3, [pc, #56]	; (800b9e8 <vPortFree+0xb8>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	43db      	mvns	r3, r3
 800b9b2:	401a      	ands	r2, r3
 800b9b4:	693b      	ldr	r3, [r7, #16]
 800b9b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b9b8:	f7fe fc84 	bl	800a2c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b9bc:	693b      	ldr	r3, [r7, #16]
 800b9be:	685a      	ldr	r2, [r3, #4]
 800b9c0:	4b0a      	ldr	r3, [pc, #40]	; (800b9ec <vPortFree+0xbc>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	4413      	add	r3, r2
 800b9c6:	4a09      	ldr	r2, [pc, #36]	; (800b9ec <vPortFree+0xbc>)
 800b9c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b9ca:	6938      	ldr	r0, [r7, #16]
 800b9cc:	f000 f874 	bl	800bab8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b9d0:	4b07      	ldr	r3, [pc, #28]	; (800b9f0 <vPortFree+0xc0>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	3301      	adds	r3, #1
 800b9d6:	4a06      	ldr	r2, [pc, #24]	; (800b9f0 <vPortFree+0xc0>)
 800b9d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b9da:	f7fe fc81 	bl	800a2e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b9de:	bf00      	nop
 800b9e0:	3718      	adds	r7, #24
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd80      	pop	{r7, pc}
 800b9e6:	bf00      	nop
 800b9e8:	200056bc 	.word	0x200056bc
 800b9ec:	200056ac 	.word	0x200056ac
 800b9f0:	200056b8 	.word	0x200056b8

0800b9f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	b085      	sub	sp, #20
 800b9f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b9fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b9fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ba00:	4b27      	ldr	r3, [pc, #156]	; (800baa0 <prvHeapInit+0xac>)
 800ba02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	f003 0307 	and.w	r3, r3, #7
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d00c      	beq.n	800ba28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	3307      	adds	r3, #7
 800ba12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	f023 0307 	bic.w	r3, r3, #7
 800ba1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ba1c:	68ba      	ldr	r2, [r7, #8]
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	1ad3      	subs	r3, r2, r3
 800ba22:	4a1f      	ldr	r2, [pc, #124]	; (800baa0 <prvHeapInit+0xac>)
 800ba24:	4413      	add	r3, r2
 800ba26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ba2c:	4a1d      	ldr	r2, [pc, #116]	; (800baa4 <prvHeapInit+0xb0>)
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ba32:	4b1c      	ldr	r3, [pc, #112]	; (800baa4 <prvHeapInit+0xb0>)
 800ba34:	2200      	movs	r2, #0
 800ba36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	68ba      	ldr	r2, [r7, #8]
 800ba3c:	4413      	add	r3, r2
 800ba3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ba40:	2208      	movs	r2, #8
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	1a9b      	subs	r3, r3, r2
 800ba46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	f023 0307 	bic.w	r3, r3, #7
 800ba4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	4a15      	ldr	r2, [pc, #84]	; (800baa8 <prvHeapInit+0xb4>)
 800ba54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ba56:	4b14      	ldr	r3, [pc, #80]	; (800baa8 <prvHeapInit+0xb4>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ba5e:	4b12      	ldr	r3, [pc, #72]	; (800baa8 <prvHeapInit+0xb4>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	2200      	movs	r2, #0
 800ba64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	68fa      	ldr	r2, [r7, #12]
 800ba6e:	1ad2      	subs	r2, r2, r3
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ba74:	4b0c      	ldr	r3, [pc, #48]	; (800baa8 <prvHeapInit+0xb4>)
 800ba76:	681a      	ldr	r2, [r3, #0]
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	685b      	ldr	r3, [r3, #4]
 800ba80:	4a0a      	ldr	r2, [pc, #40]	; (800baac <prvHeapInit+0xb8>)
 800ba82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	685b      	ldr	r3, [r3, #4]
 800ba88:	4a09      	ldr	r2, [pc, #36]	; (800bab0 <prvHeapInit+0xbc>)
 800ba8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ba8c:	4b09      	ldr	r3, [pc, #36]	; (800bab4 <prvHeapInit+0xc0>)
 800ba8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ba92:	601a      	str	r2, [r3, #0]
}
 800ba94:	bf00      	nop
 800ba96:	3714      	adds	r7, #20
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9e:	4770      	bx	lr
 800baa0:	20001aa0 	.word	0x20001aa0
 800baa4:	200056a0 	.word	0x200056a0
 800baa8:	200056a8 	.word	0x200056a8
 800baac:	200056b0 	.word	0x200056b0
 800bab0:	200056ac 	.word	0x200056ac
 800bab4:	200056bc 	.word	0x200056bc

0800bab8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bab8:	b480      	push	{r7}
 800baba:	b085      	sub	sp, #20
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bac0:	4b28      	ldr	r3, [pc, #160]	; (800bb64 <prvInsertBlockIntoFreeList+0xac>)
 800bac2:	60fb      	str	r3, [r7, #12]
 800bac4:	e002      	b.n	800bacc <prvInsertBlockIntoFreeList+0x14>
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	60fb      	str	r3, [r7, #12]
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	687a      	ldr	r2, [r7, #4]
 800bad2:	429a      	cmp	r2, r3
 800bad4:	d8f7      	bhi.n	800bac6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	685b      	ldr	r3, [r3, #4]
 800bade:	68ba      	ldr	r2, [r7, #8]
 800bae0:	4413      	add	r3, r2
 800bae2:	687a      	ldr	r2, [r7, #4]
 800bae4:	429a      	cmp	r2, r3
 800bae6:	d108      	bne.n	800bafa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	685a      	ldr	r2, [r3, #4]
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	685b      	ldr	r3, [r3, #4]
 800baf0:	441a      	add	r2, r3
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	685b      	ldr	r3, [r3, #4]
 800bb02:	68ba      	ldr	r2, [r7, #8]
 800bb04:	441a      	add	r2, r3
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	429a      	cmp	r2, r3
 800bb0c:	d118      	bne.n	800bb40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	681a      	ldr	r2, [r3, #0]
 800bb12:	4b15      	ldr	r3, [pc, #84]	; (800bb68 <prvInsertBlockIntoFreeList+0xb0>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	429a      	cmp	r2, r3
 800bb18:	d00d      	beq.n	800bb36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	685a      	ldr	r2, [r3, #4]
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	685b      	ldr	r3, [r3, #4]
 800bb24:	441a      	add	r2, r3
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	681a      	ldr	r2, [r3, #0]
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	601a      	str	r2, [r3, #0]
 800bb34:	e008      	b.n	800bb48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bb36:	4b0c      	ldr	r3, [pc, #48]	; (800bb68 <prvInsertBlockIntoFreeList+0xb0>)
 800bb38:	681a      	ldr	r2, [r3, #0]
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	601a      	str	r2, [r3, #0]
 800bb3e:	e003      	b.n	800bb48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	681a      	ldr	r2, [r3, #0]
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bb48:	68fa      	ldr	r2, [r7, #12]
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	429a      	cmp	r2, r3
 800bb4e:	d002      	beq.n	800bb56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	687a      	ldr	r2, [r7, #4]
 800bb54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb56:	bf00      	nop
 800bb58:	3714      	adds	r7, #20
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb60:	4770      	bx	lr
 800bb62:	bf00      	nop
 800bb64:	200056a0 	.word	0x200056a0
 800bb68:	200056a8 	.word	0x200056a8

0800bb6c <__errno>:
 800bb6c:	4b01      	ldr	r3, [pc, #4]	; (800bb74 <__errno+0x8>)
 800bb6e:	6818      	ldr	r0, [r3, #0]
 800bb70:	4770      	bx	lr
 800bb72:	bf00      	nop
 800bb74:	200000b0 	.word	0x200000b0

0800bb78 <std>:
 800bb78:	2300      	movs	r3, #0
 800bb7a:	b510      	push	{r4, lr}
 800bb7c:	4604      	mov	r4, r0
 800bb7e:	e9c0 3300 	strd	r3, r3, [r0]
 800bb82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bb86:	6083      	str	r3, [r0, #8]
 800bb88:	8181      	strh	r1, [r0, #12]
 800bb8a:	6643      	str	r3, [r0, #100]	; 0x64
 800bb8c:	81c2      	strh	r2, [r0, #14]
 800bb8e:	6183      	str	r3, [r0, #24]
 800bb90:	4619      	mov	r1, r3
 800bb92:	2208      	movs	r2, #8
 800bb94:	305c      	adds	r0, #92	; 0x5c
 800bb96:	f000 f91a 	bl	800bdce <memset>
 800bb9a:	4b05      	ldr	r3, [pc, #20]	; (800bbb0 <std+0x38>)
 800bb9c:	6263      	str	r3, [r4, #36]	; 0x24
 800bb9e:	4b05      	ldr	r3, [pc, #20]	; (800bbb4 <std+0x3c>)
 800bba0:	62a3      	str	r3, [r4, #40]	; 0x28
 800bba2:	4b05      	ldr	r3, [pc, #20]	; (800bbb8 <std+0x40>)
 800bba4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bba6:	4b05      	ldr	r3, [pc, #20]	; (800bbbc <std+0x44>)
 800bba8:	6224      	str	r4, [r4, #32]
 800bbaa:	6323      	str	r3, [r4, #48]	; 0x30
 800bbac:	bd10      	pop	{r4, pc}
 800bbae:	bf00      	nop
 800bbb0:	0800c129 	.word	0x0800c129
 800bbb4:	0800c14b 	.word	0x0800c14b
 800bbb8:	0800c183 	.word	0x0800c183
 800bbbc:	0800c1a7 	.word	0x0800c1a7

0800bbc0 <_cleanup_r>:
 800bbc0:	4901      	ldr	r1, [pc, #4]	; (800bbc8 <_cleanup_r+0x8>)
 800bbc2:	f000 b8af 	b.w	800bd24 <_fwalk_reent>
 800bbc6:	bf00      	nop
 800bbc8:	0800c481 	.word	0x0800c481

0800bbcc <__sfmoreglue>:
 800bbcc:	b570      	push	{r4, r5, r6, lr}
 800bbce:	2268      	movs	r2, #104	; 0x68
 800bbd0:	1e4d      	subs	r5, r1, #1
 800bbd2:	4355      	muls	r5, r2
 800bbd4:	460e      	mov	r6, r1
 800bbd6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bbda:	f000 f921 	bl	800be20 <_malloc_r>
 800bbde:	4604      	mov	r4, r0
 800bbe0:	b140      	cbz	r0, 800bbf4 <__sfmoreglue+0x28>
 800bbe2:	2100      	movs	r1, #0
 800bbe4:	e9c0 1600 	strd	r1, r6, [r0]
 800bbe8:	300c      	adds	r0, #12
 800bbea:	60a0      	str	r0, [r4, #8]
 800bbec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bbf0:	f000 f8ed 	bl	800bdce <memset>
 800bbf4:	4620      	mov	r0, r4
 800bbf6:	bd70      	pop	{r4, r5, r6, pc}

0800bbf8 <__sfp_lock_acquire>:
 800bbf8:	4801      	ldr	r0, [pc, #4]	; (800bc00 <__sfp_lock_acquire+0x8>)
 800bbfa:	f000 b8d8 	b.w	800bdae <__retarget_lock_acquire_recursive>
 800bbfe:	bf00      	nop
 800bc00:	200056c1 	.word	0x200056c1

0800bc04 <__sfp_lock_release>:
 800bc04:	4801      	ldr	r0, [pc, #4]	; (800bc0c <__sfp_lock_release+0x8>)
 800bc06:	f000 b8d3 	b.w	800bdb0 <__retarget_lock_release_recursive>
 800bc0a:	bf00      	nop
 800bc0c:	200056c1 	.word	0x200056c1

0800bc10 <__sinit_lock_acquire>:
 800bc10:	4801      	ldr	r0, [pc, #4]	; (800bc18 <__sinit_lock_acquire+0x8>)
 800bc12:	f000 b8cc 	b.w	800bdae <__retarget_lock_acquire_recursive>
 800bc16:	bf00      	nop
 800bc18:	200056c2 	.word	0x200056c2

0800bc1c <__sinit_lock_release>:
 800bc1c:	4801      	ldr	r0, [pc, #4]	; (800bc24 <__sinit_lock_release+0x8>)
 800bc1e:	f000 b8c7 	b.w	800bdb0 <__retarget_lock_release_recursive>
 800bc22:	bf00      	nop
 800bc24:	200056c2 	.word	0x200056c2

0800bc28 <__sinit>:
 800bc28:	b510      	push	{r4, lr}
 800bc2a:	4604      	mov	r4, r0
 800bc2c:	f7ff fff0 	bl	800bc10 <__sinit_lock_acquire>
 800bc30:	69a3      	ldr	r3, [r4, #24]
 800bc32:	b11b      	cbz	r3, 800bc3c <__sinit+0x14>
 800bc34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc38:	f7ff bff0 	b.w	800bc1c <__sinit_lock_release>
 800bc3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bc40:	6523      	str	r3, [r4, #80]	; 0x50
 800bc42:	4b13      	ldr	r3, [pc, #76]	; (800bc90 <__sinit+0x68>)
 800bc44:	4a13      	ldr	r2, [pc, #76]	; (800bc94 <__sinit+0x6c>)
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	62a2      	str	r2, [r4, #40]	; 0x28
 800bc4a:	42a3      	cmp	r3, r4
 800bc4c:	bf04      	itt	eq
 800bc4e:	2301      	moveq	r3, #1
 800bc50:	61a3      	streq	r3, [r4, #24]
 800bc52:	4620      	mov	r0, r4
 800bc54:	f000 f820 	bl	800bc98 <__sfp>
 800bc58:	6060      	str	r0, [r4, #4]
 800bc5a:	4620      	mov	r0, r4
 800bc5c:	f000 f81c 	bl	800bc98 <__sfp>
 800bc60:	60a0      	str	r0, [r4, #8]
 800bc62:	4620      	mov	r0, r4
 800bc64:	f000 f818 	bl	800bc98 <__sfp>
 800bc68:	2200      	movs	r2, #0
 800bc6a:	60e0      	str	r0, [r4, #12]
 800bc6c:	2104      	movs	r1, #4
 800bc6e:	6860      	ldr	r0, [r4, #4]
 800bc70:	f7ff ff82 	bl	800bb78 <std>
 800bc74:	68a0      	ldr	r0, [r4, #8]
 800bc76:	2201      	movs	r2, #1
 800bc78:	2109      	movs	r1, #9
 800bc7a:	f7ff ff7d 	bl	800bb78 <std>
 800bc7e:	68e0      	ldr	r0, [r4, #12]
 800bc80:	2202      	movs	r2, #2
 800bc82:	2112      	movs	r1, #18
 800bc84:	f7ff ff78 	bl	800bb78 <std>
 800bc88:	2301      	movs	r3, #1
 800bc8a:	61a3      	str	r3, [r4, #24]
 800bc8c:	e7d2      	b.n	800bc34 <__sinit+0xc>
 800bc8e:	bf00      	nop
 800bc90:	0800cff8 	.word	0x0800cff8
 800bc94:	0800bbc1 	.word	0x0800bbc1

0800bc98 <__sfp>:
 800bc98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc9a:	4607      	mov	r7, r0
 800bc9c:	f7ff ffac 	bl	800bbf8 <__sfp_lock_acquire>
 800bca0:	4b1e      	ldr	r3, [pc, #120]	; (800bd1c <__sfp+0x84>)
 800bca2:	681e      	ldr	r6, [r3, #0]
 800bca4:	69b3      	ldr	r3, [r6, #24]
 800bca6:	b913      	cbnz	r3, 800bcae <__sfp+0x16>
 800bca8:	4630      	mov	r0, r6
 800bcaa:	f7ff ffbd 	bl	800bc28 <__sinit>
 800bcae:	3648      	adds	r6, #72	; 0x48
 800bcb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bcb4:	3b01      	subs	r3, #1
 800bcb6:	d503      	bpl.n	800bcc0 <__sfp+0x28>
 800bcb8:	6833      	ldr	r3, [r6, #0]
 800bcba:	b30b      	cbz	r3, 800bd00 <__sfp+0x68>
 800bcbc:	6836      	ldr	r6, [r6, #0]
 800bcbe:	e7f7      	b.n	800bcb0 <__sfp+0x18>
 800bcc0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bcc4:	b9d5      	cbnz	r5, 800bcfc <__sfp+0x64>
 800bcc6:	4b16      	ldr	r3, [pc, #88]	; (800bd20 <__sfp+0x88>)
 800bcc8:	60e3      	str	r3, [r4, #12]
 800bcca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bcce:	6665      	str	r5, [r4, #100]	; 0x64
 800bcd0:	f000 f86c 	bl	800bdac <__retarget_lock_init_recursive>
 800bcd4:	f7ff ff96 	bl	800bc04 <__sfp_lock_release>
 800bcd8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bcdc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bce0:	6025      	str	r5, [r4, #0]
 800bce2:	61a5      	str	r5, [r4, #24]
 800bce4:	2208      	movs	r2, #8
 800bce6:	4629      	mov	r1, r5
 800bce8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bcec:	f000 f86f 	bl	800bdce <memset>
 800bcf0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bcf4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bcf8:	4620      	mov	r0, r4
 800bcfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcfc:	3468      	adds	r4, #104	; 0x68
 800bcfe:	e7d9      	b.n	800bcb4 <__sfp+0x1c>
 800bd00:	2104      	movs	r1, #4
 800bd02:	4638      	mov	r0, r7
 800bd04:	f7ff ff62 	bl	800bbcc <__sfmoreglue>
 800bd08:	4604      	mov	r4, r0
 800bd0a:	6030      	str	r0, [r6, #0]
 800bd0c:	2800      	cmp	r0, #0
 800bd0e:	d1d5      	bne.n	800bcbc <__sfp+0x24>
 800bd10:	f7ff ff78 	bl	800bc04 <__sfp_lock_release>
 800bd14:	230c      	movs	r3, #12
 800bd16:	603b      	str	r3, [r7, #0]
 800bd18:	e7ee      	b.n	800bcf8 <__sfp+0x60>
 800bd1a:	bf00      	nop
 800bd1c:	0800cff8 	.word	0x0800cff8
 800bd20:	ffff0001 	.word	0xffff0001

0800bd24 <_fwalk_reent>:
 800bd24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd28:	4606      	mov	r6, r0
 800bd2a:	4688      	mov	r8, r1
 800bd2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bd30:	2700      	movs	r7, #0
 800bd32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bd36:	f1b9 0901 	subs.w	r9, r9, #1
 800bd3a:	d505      	bpl.n	800bd48 <_fwalk_reent+0x24>
 800bd3c:	6824      	ldr	r4, [r4, #0]
 800bd3e:	2c00      	cmp	r4, #0
 800bd40:	d1f7      	bne.n	800bd32 <_fwalk_reent+0xe>
 800bd42:	4638      	mov	r0, r7
 800bd44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd48:	89ab      	ldrh	r3, [r5, #12]
 800bd4a:	2b01      	cmp	r3, #1
 800bd4c:	d907      	bls.n	800bd5e <_fwalk_reent+0x3a>
 800bd4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bd52:	3301      	adds	r3, #1
 800bd54:	d003      	beq.n	800bd5e <_fwalk_reent+0x3a>
 800bd56:	4629      	mov	r1, r5
 800bd58:	4630      	mov	r0, r6
 800bd5a:	47c0      	blx	r8
 800bd5c:	4307      	orrs	r7, r0
 800bd5e:	3568      	adds	r5, #104	; 0x68
 800bd60:	e7e9      	b.n	800bd36 <_fwalk_reent+0x12>
	...

0800bd64 <__libc_init_array>:
 800bd64:	b570      	push	{r4, r5, r6, lr}
 800bd66:	4d0d      	ldr	r5, [pc, #52]	; (800bd9c <__libc_init_array+0x38>)
 800bd68:	4c0d      	ldr	r4, [pc, #52]	; (800bda0 <__libc_init_array+0x3c>)
 800bd6a:	1b64      	subs	r4, r4, r5
 800bd6c:	10a4      	asrs	r4, r4, #2
 800bd6e:	2600      	movs	r6, #0
 800bd70:	42a6      	cmp	r6, r4
 800bd72:	d109      	bne.n	800bd88 <__libc_init_array+0x24>
 800bd74:	4d0b      	ldr	r5, [pc, #44]	; (800bda4 <__libc_init_array+0x40>)
 800bd76:	4c0c      	ldr	r4, [pc, #48]	; (800bda8 <__libc_init_array+0x44>)
 800bd78:	f001 f804 	bl	800cd84 <_init>
 800bd7c:	1b64      	subs	r4, r4, r5
 800bd7e:	10a4      	asrs	r4, r4, #2
 800bd80:	2600      	movs	r6, #0
 800bd82:	42a6      	cmp	r6, r4
 800bd84:	d105      	bne.n	800bd92 <__libc_init_array+0x2e>
 800bd86:	bd70      	pop	{r4, r5, r6, pc}
 800bd88:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd8c:	4798      	blx	r3
 800bd8e:	3601      	adds	r6, #1
 800bd90:	e7ee      	b.n	800bd70 <__libc_init_array+0xc>
 800bd92:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd96:	4798      	blx	r3
 800bd98:	3601      	adds	r6, #1
 800bd9a:	e7f2      	b.n	800bd82 <__libc_init_array+0x1e>
 800bd9c:	0800d038 	.word	0x0800d038
 800bda0:	0800d038 	.word	0x0800d038
 800bda4:	0800d038 	.word	0x0800d038
 800bda8:	0800d03c 	.word	0x0800d03c

0800bdac <__retarget_lock_init_recursive>:
 800bdac:	4770      	bx	lr

0800bdae <__retarget_lock_acquire_recursive>:
 800bdae:	4770      	bx	lr

0800bdb0 <__retarget_lock_release_recursive>:
 800bdb0:	4770      	bx	lr

0800bdb2 <memcpy>:
 800bdb2:	440a      	add	r2, r1
 800bdb4:	4291      	cmp	r1, r2
 800bdb6:	f100 33ff 	add.w	r3, r0, #4294967295
 800bdba:	d100      	bne.n	800bdbe <memcpy+0xc>
 800bdbc:	4770      	bx	lr
 800bdbe:	b510      	push	{r4, lr}
 800bdc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bdc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bdc8:	4291      	cmp	r1, r2
 800bdca:	d1f9      	bne.n	800bdc0 <memcpy+0xe>
 800bdcc:	bd10      	pop	{r4, pc}

0800bdce <memset>:
 800bdce:	4402      	add	r2, r0
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	4293      	cmp	r3, r2
 800bdd4:	d100      	bne.n	800bdd8 <memset+0xa>
 800bdd6:	4770      	bx	lr
 800bdd8:	f803 1b01 	strb.w	r1, [r3], #1
 800bddc:	e7f9      	b.n	800bdd2 <memset+0x4>
	...

0800bde0 <sbrk_aligned>:
 800bde0:	b570      	push	{r4, r5, r6, lr}
 800bde2:	4e0e      	ldr	r6, [pc, #56]	; (800be1c <sbrk_aligned+0x3c>)
 800bde4:	460c      	mov	r4, r1
 800bde6:	6831      	ldr	r1, [r6, #0]
 800bde8:	4605      	mov	r5, r0
 800bdea:	b911      	cbnz	r1, 800bdf2 <sbrk_aligned+0x12>
 800bdec:	f000 f96c 	bl	800c0c8 <_sbrk_r>
 800bdf0:	6030      	str	r0, [r6, #0]
 800bdf2:	4621      	mov	r1, r4
 800bdf4:	4628      	mov	r0, r5
 800bdf6:	f000 f967 	bl	800c0c8 <_sbrk_r>
 800bdfa:	1c43      	adds	r3, r0, #1
 800bdfc:	d00a      	beq.n	800be14 <sbrk_aligned+0x34>
 800bdfe:	1cc4      	adds	r4, r0, #3
 800be00:	f024 0403 	bic.w	r4, r4, #3
 800be04:	42a0      	cmp	r0, r4
 800be06:	d007      	beq.n	800be18 <sbrk_aligned+0x38>
 800be08:	1a21      	subs	r1, r4, r0
 800be0a:	4628      	mov	r0, r5
 800be0c:	f000 f95c 	bl	800c0c8 <_sbrk_r>
 800be10:	3001      	adds	r0, #1
 800be12:	d101      	bne.n	800be18 <sbrk_aligned+0x38>
 800be14:	f04f 34ff 	mov.w	r4, #4294967295
 800be18:	4620      	mov	r0, r4
 800be1a:	bd70      	pop	{r4, r5, r6, pc}
 800be1c:	200056c8 	.word	0x200056c8

0800be20 <_malloc_r>:
 800be20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be24:	1ccd      	adds	r5, r1, #3
 800be26:	f025 0503 	bic.w	r5, r5, #3
 800be2a:	3508      	adds	r5, #8
 800be2c:	2d0c      	cmp	r5, #12
 800be2e:	bf38      	it	cc
 800be30:	250c      	movcc	r5, #12
 800be32:	2d00      	cmp	r5, #0
 800be34:	4607      	mov	r7, r0
 800be36:	db01      	blt.n	800be3c <_malloc_r+0x1c>
 800be38:	42a9      	cmp	r1, r5
 800be3a:	d905      	bls.n	800be48 <_malloc_r+0x28>
 800be3c:	230c      	movs	r3, #12
 800be3e:	603b      	str	r3, [r7, #0]
 800be40:	2600      	movs	r6, #0
 800be42:	4630      	mov	r0, r6
 800be44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be48:	4e2e      	ldr	r6, [pc, #184]	; (800bf04 <_malloc_r+0xe4>)
 800be4a:	f000 fbcd 	bl	800c5e8 <__malloc_lock>
 800be4e:	6833      	ldr	r3, [r6, #0]
 800be50:	461c      	mov	r4, r3
 800be52:	bb34      	cbnz	r4, 800bea2 <_malloc_r+0x82>
 800be54:	4629      	mov	r1, r5
 800be56:	4638      	mov	r0, r7
 800be58:	f7ff ffc2 	bl	800bde0 <sbrk_aligned>
 800be5c:	1c43      	adds	r3, r0, #1
 800be5e:	4604      	mov	r4, r0
 800be60:	d14d      	bne.n	800befe <_malloc_r+0xde>
 800be62:	6834      	ldr	r4, [r6, #0]
 800be64:	4626      	mov	r6, r4
 800be66:	2e00      	cmp	r6, #0
 800be68:	d140      	bne.n	800beec <_malloc_r+0xcc>
 800be6a:	6823      	ldr	r3, [r4, #0]
 800be6c:	4631      	mov	r1, r6
 800be6e:	4638      	mov	r0, r7
 800be70:	eb04 0803 	add.w	r8, r4, r3
 800be74:	f000 f928 	bl	800c0c8 <_sbrk_r>
 800be78:	4580      	cmp	r8, r0
 800be7a:	d13a      	bne.n	800bef2 <_malloc_r+0xd2>
 800be7c:	6821      	ldr	r1, [r4, #0]
 800be7e:	3503      	adds	r5, #3
 800be80:	1a6d      	subs	r5, r5, r1
 800be82:	f025 0503 	bic.w	r5, r5, #3
 800be86:	3508      	adds	r5, #8
 800be88:	2d0c      	cmp	r5, #12
 800be8a:	bf38      	it	cc
 800be8c:	250c      	movcc	r5, #12
 800be8e:	4629      	mov	r1, r5
 800be90:	4638      	mov	r0, r7
 800be92:	f7ff ffa5 	bl	800bde0 <sbrk_aligned>
 800be96:	3001      	adds	r0, #1
 800be98:	d02b      	beq.n	800bef2 <_malloc_r+0xd2>
 800be9a:	6823      	ldr	r3, [r4, #0]
 800be9c:	442b      	add	r3, r5
 800be9e:	6023      	str	r3, [r4, #0]
 800bea0:	e00e      	b.n	800bec0 <_malloc_r+0xa0>
 800bea2:	6822      	ldr	r2, [r4, #0]
 800bea4:	1b52      	subs	r2, r2, r5
 800bea6:	d41e      	bmi.n	800bee6 <_malloc_r+0xc6>
 800bea8:	2a0b      	cmp	r2, #11
 800beaa:	d916      	bls.n	800beda <_malloc_r+0xba>
 800beac:	1961      	adds	r1, r4, r5
 800beae:	42a3      	cmp	r3, r4
 800beb0:	6025      	str	r5, [r4, #0]
 800beb2:	bf18      	it	ne
 800beb4:	6059      	strne	r1, [r3, #4]
 800beb6:	6863      	ldr	r3, [r4, #4]
 800beb8:	bf08      	it	eq
 800beba:	6031      	streq	r1, [r6, #0]
 800bebc:	5162      	str	r2, [r4, r5]
 800bebe:	604b      	str	r3, [r1, #4]
 800bec0:	4638      	mov	r0, r7
 800bec2:	f104 060b 	add.w	r6, r4, #11
 800bec6:	f000 fb95 	bl	800c5f4 <__malloc_unlock>
 800beca:	f026 0607 	bic.w	r6, r6, #7
 800bece:	1d23      	adds	r3, r4, #4
 800bed0:	1af2      	subs	r2, r6, r3
 800bed2:	d0b6      	beq.n	800be42 <_malloc_r+0x22>
 800bed4:	1b9b      	subs	r3, r3, r6
 800bed6:	50a3      	str	r3, [r4, r2]
 800bed8:	e7b3      	b.n	800be42 <_malloc_r+0x22>
 800beda:	6862      	ldr	r2, [r4, #4]
 800bedc:	42a3      	cmp	r3, r4
 800bede:	bf0c      	ite	eq
 800bee0:	6032      	streq	r2, [r6, #0]
 800bee2:	605a      	strne	r2, [r3, #4]
 800bee4:	e7ec      	b.n	800bec0 <_malloc_r+0xa0>
 800bee6:	4623      	mov	r3, r4
 800bee8:	6864      	ldr	r4, [r4, #4]
 800beea:	e7b2      	b.n	800be52 <_malloc_r+0x32>
 800beec:	4634      	mov	r4, r6
 800beee:	6876      	ldr	r6, [r6, #4]
 800bef0:	e7b9      	b.n	800be66 <_malloc_r+0x46>
 800bef2:	230c      	movs	r3, #12
 800bef4:	603b      	str	r3, [r7, #0]
 800bef6:	4638      	mov	r0, r7
 800bef8:	f000 fb7c 	bl	800c5f4 <__malloc_unlock>
 800befc:	e7a1      	b.n	800be42 <_malloc_r+0x22>
 800befe:	6025      	str	r5, [r4, #0]
 800bf00:	e7de      	b.n	800bec0 <_malloc_r+0xa0>
 800bf02:	bf00      	nop
 800bf04:	200056c4 	.word	0x200056c4

0800bf08 <_puts_r>:
 800bf08:	b570      	push	{r4, r5, r6, lr}
 800bf0a:	460e      	mov	r6, r1
 800bf0c:	4605      	mov	r5, r0
 800bf0e:	b118      	cbz	r0, 800bf18 <_puts_r+0x10>
 800bf10:	6983      	ldr	r3, [r0, #24]
 800bf12:	b90b      	cbnz	r3, 800bf18 <_puts_r+0x10>
 800bf14:	f7ff fe88 	bl	800bc28 <__sinit>
 800bf18:	69ab      	ldr	r3, [r5, #24]
 800bf1a:	68ac      	ldr	r4, [r5, #8]
 800bf1c:	b913      	cbnz	r3, 800bf24 <_puts_r+0x1c>
 800bf1e:	4628      	mov	r0, r5
 800bf20:	f7ff fe82 	bl	800bc28 <__sinit>
 800bf24:	4b2c      	ldr	r3, [pc, #176]	; (800bfd8 <_puts_r+0xd0>)
 800bf26:	429c      	cmp	r4, r3
 800bf28:	d120      	bne.n	800bf6c <_puts_r+0x64>
 800bf2a:	686c      	ldr	r4, [r5, #4]
 800bf2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf2e:	07db      	lsls	r3, r3, #31
 800bf30:	d405      	bmi.n	800bf3e <_puts_r+0x36>
 800bf32:	89a3      	ldrh	r3, [r4, #12]
 800bf34:	0598      	lsls	r0, r3, #22
 800bf36:	d402      	bmi.n	800bf3e <_puts_r+0x36>
 800bf38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf3a:	f7ff ff38 	bl	800bdae <__retarget_lock_acquire_recursive>
 800bf3e:	89a3      	ldrh	r3, [r4, #12]
 800bf40:	0719      	lsls	r1, r3, #28
 800bf42:	d51d      	bpl.n	800bf80 <_puts_r+0x78>
 800bf44:	6923      	ldr	r3, [r4, #16]
 800bf46:	b1db      	cbz	r3, 800bf80 <_puts_r+0x78>
 800bf48:	3e01      	subs	r6, #1
 800bf4a:	68a3      	ldr	r3, [r4, #8]
 800bf4c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bf50:	3b01      	subs	r3, #1
 800bf52:	60a3      	str	r3, [r4, #8]
 800bf54:	bb39      	cbnz	r1, 800bfa6 <_puts_r+0x9e>
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	da38      	bge.n	800bfcc <_puts_r+0xc4>
 800bf5a:	4622      	mov	r2, r4
 800bf5c:	210a      	movs	r1, #10
 800bf5e:	4628      	mov	r0, r5
 800bf60:	f000 f926 	bl	800c1b0 <__swbuf_r>
 800bf64:	3001      	adds	r0, #1
 800bf66:	d011      	beq.n	800bf8c <_puts_r+0x84>
 800bf68:	250a      	movs	r5, #10
 800bf6a:	e011      	b.n	800bf90 <_puts_r+0x88>
 800bf6c:	4b1b      	ldr	r3, [pc, #108]	; (800bfdc <_puts_r+0xd4>)
 800bf6e:	429c      	cmp	r4, r3
 800bf70:	d101      	bne.n	800bf76 <_puts_r+0x6e>
 800bf72:	68ac      	ldr	r4, [r5, #8]
 800bf74:	e7da      	b.n	800bf2c <_puts_r+0x24>
 800bf76:	4b1a      	ldr	r3, [pc, #104]	; (800bfe0 <_puts_r+0xd8>)
 800bf78:	429c      	cmp	r4, r3
 800bf7a:	bf08      	it	eq
 800bf7c:	68ec      	ldreq	r4, [r5, #12]
 800bf7e:	e7d5      	b.n	800bf2c <_puts_r+0x24>
 800bf80:	4621      	mov	r1, r4
 800bf82:	4628      	mov	r0, r5
 800bf84:	f000 f978 	bl	800c278 <__swsetup_r>
 800bf88:	2800      	cmp	r0, #0
 800bf8a:	d0dd      	beq.n	800bf48 <_puts_r+0x40>
 800bf8c:	f04f 35ff 	mov.w	r5, #4294967295
 800bf90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf92:	07da      	lsls	r2, r3, #31
 800bf94:	d405      	bmi.n	800bfa2 <_puts_r+0x9a>
 800bf96:	89a3      	ldrh	r3, [r4, #12]
 800bf98:	059b      	lsls	r3, r3, #22
 800bf9a:	d402      	bmi.n	800bfa2 <_puts_r+0x9a>
 800bf9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf9e:	f7ff ff07 	bl	800bdb0 <__retarget_lock_release_recursive>
 800bfa2:	4628      	mov	r0, r5
 800bfa4:	bd70      	pop	{r4, r5, r6, pc}
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	da04      	bge.n	800bfb4 <_puts_r+0xac>
 800bfaa:	69a2      	ldr	r2, [r4, #24]
 800bfac:	429a      	cmp	r2, r3
 800bfae:	dc06      	bgt.n	800bfbe <_puts_r+0xb6>
 800bfb0:	290a      	cmp	r1, #10
 800bfb2:	d004      	beq.n	800bfbe <_puts_r+0xb6>
 800bfb4:	6823      	ldr	r3, [r4, #0]
 800bfb6:	1c5a      	adds	r2, r3, #1
 800bfb8:	6022      	str	r2, [r4, #0]
 800bfba:	7019      	strb	r1, [r3, #0]
 800bfbc:	e7c5      	b.n	800bf4a <_puts_r+0x42>
 800bfbe:	4622      	mov	r2, r4
 800bfc0:	4628      	mov	r0, r5
 800bfc2:	f000 f8f5 	bl	800c1b0 <__swbuf_r>
 800bfc6:	3001      	adds	r0, #1
 800bfc8:	d1bf      	bne.n	800bf4a <_puts_r+0x42>
 800bfca:	e7df      	b.n	800bf8c <_puts_r+0x84>
 800bfcc:	6823      	ldr	r3, [r4, #0]
 800bfce:	250a      	movs	r5, #10
 800bfd0:	1c5a      	adds	r2, r3, #1
 800bfd2:	6022      	str	r2, [r4, #0]
 800bfd4:	701d      	strb	r5, [r3, #0]
 800bfd6:	e7db      	b.n	800bf90 <_puts_r+0x88>
 800bfd8:	0800cfb8 	.word	0x0800cfb8
 800bfdc:	0800cfd8 	.word	0x0800cfd8
 800bfe0:	0800cf98 	.word	0x0800cf98

0800bfe4 <puts>:
 800bfe4:	4b02      	ldr	r3, [pc, #8]	; (800bff0 <puts+0xc>)
 800bfe6:	4601      	mov	r1, r0
 800bfe8:	6818      	ldr	r0, [r3, #0]
 800bfea:	f7ff bf8d 	b.w	800bf08 <_puts_r>
 800bfee:	bf00      	nop
 800bff0:	200000b0 	.word	0x200000b0

0800bff4 <cleanup_glue>:
 800bff4:	b538      	push	{r3, r4, r5, lr}
 800bff6:	460c      	mov	r4, r1
 800bff8:	6809      	ldr	r1, [r1, #0]
 800bffa:	4605      	mov	r5, r0
 800bffc:	b109      	cbz	r1, 800c002 <cleanup_glue+0xe>
 800bffe:	f7ff fff9 	bl	800bff4 <cleanup_glue>
 800c002:	4621      	mov	r1, r4
 800c004:	4628      	mov	r0, r5
 800c006:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c00a:	f000 baf9 	b.w	800c600 <_free_r>
	...

0800c010 <_reclaim_reent>:
 800c010:	4b2c      	ldr	r3, [pc, #176]	; (800c0c4 <_reclaim_reent+0xb4>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	4283      	cmp	r3, r0
 800c016:	b570      	push	{r4, r5, r6, lr}
 800c018:	4604      	mov	r4, r0
 800c01a:	d051      	beq.n	800c0c0 <_reclaim_reent+0xb0>
 800c01c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c01e:	b143      	cbz	r3, 800c032 <_reclaim_reent+0x22>
 800c020:	68db      	ldr	r3, [r3, #12]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d14a      	bne.n	800c0bc <_reclaim_reent+0xac>
 800c026:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c028:	6819      	ldr	r1, [r3, #0]
 800c02a:	b111      	cbz	r1, 800c032 <_reclaim_reent+0x22>
 800c02c:	4620      	mov	r0, r4
 800c02e:	f000 fae7 	bl	800c600 <_free_r>
 800c032:	6961      	ldr	r1, [r4, #20]
 800c034:	b111      	cbz	r1, 800c03c <_reclaim_reent+0x2c>
 800c036:	4620      	mov	r0, r4
 800c038:	f000 fae2 	bl	800c600 <_free_r>
 800c03c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c03e:	b111      	cbz	r1, 800c046 <_reclaim_reent+0x36>
 800c040:	4620      	mov	r0, r4
 800c042:	f000 fadd 	bl	800c600 <_free_r>
 800c046:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c048:	b111      	cbz	r1, 800c050 <_reclaim_reent+0x40>
 800c04a:	4620      	mov	r0, r4
 800c04c:	f000 fad8 	bl	800c600 <_free_r>
 800c050:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c052:	b111      	cbz	r1, 800c05a <_reclaim_reent+0x4a>
 800c054:	4620      	mov	r0, r4
 800c056:	f000 fad3 	bl	800c600 <_free_r>
 800c05a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c05c:	b111      	cbz	r1, 800c064 <_reclaim_reent+0x54>
 800c05e:	4620      	mov	r0, r4
 800c060:	f000 face 	bl	800c600 <_free_r>
 800c064:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c066:	b111      	cbz	r1, 800c06e <_reclaim_reent+0x5e>
 800c068:	4620      	mov	r0, r4
 800c06a:	f000 fac9 	bl	800c600 <_free_r>
 800c06e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c070:	b111      	cbz	r1, 800c078 <_reclaim_reent+0x68>
 800c072:	4620      	mov	r0, r4
 800c074:	f000 fac4 	bl	800c600 <_free_r>
 800c078:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c07a:	b111      	cbz	r1, 800c082 <_reclaim_reent+0x72>
 800c07c:	4620      	mov	r0, r4
 800c07e:	f000 fabf 	bl	800c600 <_free_r>
 800c082:	69a3      	ldr	r3, [r4, #24]
 800c084:	b1e3      	cbz	r3, 800c0c0 <_reclaim_reent+0xb0>
 800c086:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c088:	4620      	mov	r0, r4
 800c08a:	4798      	blx	r3
 800c08c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c08e:	b1b9      	cbz	r1, 800c0c0 <_reclaim_reent+0xb0>
 800c090:	4620      	mov	r0, r4
 800c092:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c096:	f7ff bfad 	b.w	800bff4 <cleanup_glue>
 800c09a:	5949      	ldr	r1, [r1, r5]
 800c09c:	b941      	cbnz	r1, 800c0b0 <_reclaim_reent+0xa0>
 800c09e:	3504      	adds	r5, #4
 800c0a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c0a2:	2d80      	cmp	r5, #128	; 0x80
 800c0a4:	68d9      	ldr	r1, [r3, #12]
 800c0a6:	d1f8      	bne.n	800c09a <_reclaim_reent+0x8a>
 800c0a8:	4620      	mov	r0, r4
 800c0aa:	f000 faa9 	bl	800c600 <_free_r>
 800c0ae:	e7ba      	b.n	800c026 <_reclaim_reent+0x16>
 800c0b0:	680e      	ldr	r6, [r1, #0]
 800c0b2:	4620      	mov	r0, r4
 800c0b4:	f000 faa4 	bl	800c600 <_free_r>
 800c0b8:	4631      	mov	r1, r6
 800c0ba:	e7ef      	b.n	800c09c <_reclaim_reent+0x8c>
 800c0bc:	2500      	movs	r5, #0
 800c0be:	e7ef      	b.n	800c0a0 <_reclaim_reent+0x90>
 800c0c0:	bd70      	pop	{r4, r5, r6, pc}
 800c0c2:	bf00      	nop
 800c0c4:	200000b0 	.word	0x200000b0

0800c0c8 <_sbrk_r>:
 800c0c8:	b538      	push	{r3, r4, r5, lr}
 800c0ca:	4d06      	ldr	r5, [pc, #24]	; (800c0e4 <_sbrk_r+0x1c>)
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	4604      	mov	r4, r0
 800c0d0:	4608      	mov	r0, r1
 800c0d2:	602b      	str	r3, [r5, #0]
 800c0d4:	f7f6 fbe6 	bl	80028a4 <_sbrk>
 800c0d8:	1c43      	adds	r3, r0, #1
 800c0da:	d102      	bne.n	800c0e2 <_sbrk_r+0x1a>
 800c0dc:	682b      	ldr	r3, [r5, #0]
 800c0de:	b103      	cbz	r3, 800c0e2 <_sbrk_r+0x1a>
 800c0e0:	6023      	str	r3, [r4, #0]
 800c0e2:	bd38      	pop	{r3, r4, r5, pc}
 800c0e4:	200056cc 	.word	0x200056cc

0800c0e8 <siprintf>:
 800c0e8:	b40e      	push	{r1, r2, r3}
 800c0ea:	b500      	push	{lr}
 800c0ec:	b09c      	sub	sp, #112	; 0x70
 800c0ee:	ab1d      	add	r3, sp, #116	; 0x74
 800c0f0:	9002      	str	r0, [sp, #8]
 800c0f2:	9006      	str	r0, [sp, #24]
 800c0f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c0f8:	4809      	ldr	r0, [pc, #36]	; (800c120 <siprintf+0x38>)
 800c0fa:	9107      	str	r1, [sp, #28]
 800c0fc:	9104      	str	r1, [sp, #16]
 800c0fe:	4909      	ldr	r1, [pc, #36]	; (800c124 <siprintf+0x3c>)
 800c100:	f853 2b04 	ldr.w	r2, [r3], #4
 800c104:	9105      	str	r1, [sp, #20]
 800c106:	6800      	ldr	r0, [r0, #0]
 800c108:	9301      	str	r3, [sp, #4]
 800c10a:	a902      	add	r1, sp, #8
 800c10c:	f000 fb20 	bl	800c750 <_svfiprintf_r>
 800c110:	9b02      	ldr	r3, [sp, #8]
 800c112:	2200      	movs	r2, #0
 800c114:	701a      	strb	r2, [r3, #0]
 800c116:	b01c      	add	sp, #112	; 0x70
 800c118:	f85d eb04 	ldr.w	lr, [sp], #4
 800c11c:	b003      	add	sp, #12
 800c11e:	4770      	bx	lr
 800c120:	200000b0 	.word	0x200000b0
 800c124:	ffff0208 	.word	0xffff0208

0800c128 <__sread>:
 800c128:	b510      	push	{r4, lr}
 800c12a:	460c      	mov	r4, r1
 800c12c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c130:	f000 fda2 	bl	800cc78 <_read_r>
 800c134:	2800      	cmp	r0, #0
 800c136:	bfab      	itete	ge
 800c138:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c13a:	89a3      	ldrhlt	r3, [r4, #12]
 800c13c:	181b      	addge	r3, r3, r0
 800c13e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c142:	bfac      	ite	ge
 800c144:	6563      	strge	r3, [r4, #84]	; 0x54
 800c146:	81a3      	strhlt	r3, [r4, #12]
 800c148:	bd10      	pop	{r4, pc}

0800c14a <__swrite>:
 800c14a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c14e:	461f      	mov	r7, r3
 800c150:	898b      	ldrh	r3, [r1, #12]
 800c152:	05db      	lsls	r3, r3, #23
 800c154:	4605      	mov	r5, r0
 800c156:	460c      	mov	r4, r1
 800c158:	4616      	mov	r6, r2
 800c15a:	d505      	bpl.n	800c168 <__swrite+0x1e>
 800c15c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c160:	2302      	movs	r3, #2
 800c162:	2200      	movs	r2, #0
 800c164:	f000 f9c8 	bl	800c4f8 <_lseek_r>
 800c168:	89a3      	ldrh	r3, [r4, #12]
 800c16a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c16e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c172:	81a3      	strh	r3, [r4, #12]
 800c174:	4632      	mov	r2, r6
 800c176:	463b      	mov	r3, r7
 800c178:	4628      	mov	r0, r5
 800c17a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c17e:	f000 b869 	b.w	800c254 <_write_r>

0800c182 <__sseek>:
 800c182:	b510      	push	{r4, lr}
 800c184:	460c      	mov	r4, r1
 800c186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c18a:	f000 f9b5 	bl	800c4f8 <_lseek_r>
 800c18e:	1c43      	adds	r3, r0, #1
 800c190:	89a3      	ldrh	r3, [r4, #12]
 800c192:	bf15      	itete	ne
 800c194:	6560      	strne	r0, [r4, #84]	; 0x54
 800c196:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c19a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c19e:	81a3      	strheq	r3, [r4, #12]
 800c1a0:	bf18      	it	ne
 800c1a2:	81a3      	strhne	r3, [r4, #12]
 800c1a4:	bd10      	pop	{r4, pc}

0800c1a6 <__sclose>:
 800c1a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1aa:	f000 b8d3 	b.w	800c354 <_close_r>
	...

0800c1b0 <__swbuf_r>:
 800c1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1b2:	460e      	mov	r6, r1
 800c1b4:	4614      	mov	r4, r2
 800c1b6:	4605      	mov	r5, r0
 800c1b8:	b118      	cbz	r0, 800c1c2 <__swbuf_r+0x12>
 800c1ba:	6983      	ldr	r3, [r0, #24]
 800c1bc:	b90b      	cbnz	r3, 800c1c2 <__swbuf_r+0x12>
 800c1be:	f7ff fd33 	bl	800bc28 <__sinit>
 800c1c2:	4b21      	ldr	r3, [pc, #132]	; (800c248 <__swbuf_r+0x98>)
 800c1c4:	429c      	cmp	r4, r3
 800c1c6:	d12b      	bne.n	800c220 <__swbuf_r+0x70>
 800c1c8:	686c      	ldr	r4, [r5, #4]
 800c1ca:	69a3      	ldr	r3, [r4, #24]
 800c1cc:	60a3      	str	r3, [r4, #8]
 800c1ce:	89a3      	ldrh	r3, [r4, #12]
 800c1d0:	071a      	lsls	r2, r3, #28
 800c1d2:	d52f      	bpl.n	800c234 <__swbuf_r+0x84>
 800c1d4:	6923      	ldr	r3, [r4, #16]
 800c1d6:	b36b      	cbz	r3, 800c234 <__swbuf_r+0x84>
 800c1d8:	6923      	ldr	r3, [r4, #16]
 800c1da:	6820      	ldr	r0, [r4, #0]
 800c1dc:	1ac0      	subs	r0, r0, r3
 800c1de:	6963      	ldr	r3, [r4, #20]
 800c1e0:	b2f6      	uxtb	r6, r6
 800c1e2:	4283      	cmp	r3, r0
 800c1e4:	4637      	mov	r7, r6
 800c1e6:	dc04      	bgt.n	800c1f2 <__swbuf_r+0x42>
 800c1e8:	4621      	mov	r1, r4
 800c1ea:	4628      	mov	r0, r5
 800c1ec:	f000 f948 	bl	800c480 <_fflush_r>
 800c1f0:	bb30      	cbnz	r0, 800c240 <__swbuf_r+0x90>
 800c1f2:	68a3      	ldr	r3, [r4, #8]
 800c1f4:	3b01      	subs	r3, #1
 800c1f6:	60a3      	str	r3, [r4, #8]
 800c1f8:	6823      	ldr	r3, [r4, #0]
 800c1fa:	1c5a      	adds	r2, r3, #1
 800c1fc:	6022      	str	r2, [r4, #0]
 800c1fe:	701e      	strb	r6, [r3, #0]
 800c200:	6963      	ldr	r3, [r4, #20]
 800c202:	3001      	adds	r0, #1
 800c204:	4283      	cmp	r3, r0
 800c206:	d004      	beq.n	800c212 <__swbuf_r+0x62>
 800c208:	89a3      	ldrh	r3, [r4, #12]
 800c20a:	07db      	lsls	r3, r3, #31
 800c20c:	d506      	bpl.n	800c21c <__swbuf_r+0x6c>
 800c20e:	2e0a      	cmp	r6, #10
 800c210:	d104      	bne.n	800c21c <__swbuf_r+0x6c>
 800c212:	4621      	mov	r1, r4
 800c214:	4628      	mov	r0, r5
 800c216:	f000 f933 	bl	800c480 <_fflush_r>
 800c21a:	b988      	cbnz	r0, 800c240 <__swbuf_r+0x90>
 800c21c:	4638      	mov	r0, r7
 800c21e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c220:	4b0a      	ldr	r3, [pc, #40]	; (800c24c <__swbuf_r+0x9c>)
 800c222:	429c      	cmp	r4, r3
 800c224:	d101      	bne.n	800c22a <__swbuf_r+0x7a>
 800c226:	68ac      	ldr	r4, [r5, #8]
 800c228:	e7cf      	b.n	800c1ca <__swbuf_r+0x1a>
 800c22a:	4b09      	ldr	r3, [pc, #36]	; (800c250 <__swbuf_r+0xa0>)
 800c22c:	429c      	cmp	r4, r3
 800c22e:	bf08      	it	eq
 800c230:	68ec      	ldreq	r4, [r5, #12]
 800c232:	e7ca      	b.n	800c1ca <__swbuf_r+0x1a>
 800c234:	4621      	mov	r1, r4
 800c236:	4628      	mov	r0, r5
 800c238:	f000 f81e 	bl	800c278 <__swsetup_r>
 800c23c:	2800      	cmp	r0, #0
 800c23e:	d0cb      	beq.n	800c1d8 <__swbuf_r+0x28>
 800c240:	f04f 37ff 	mov.w	r7, #4294967295
 800c244:	e7ea      	b.n	800c21c <__swbuf_r+0x6c>
 800c246:	bf00      	nop
 800c248:	0800cfb8 	.word	0x0800cfb8
 800c24c:	0800cfd8 	.word	0x0800cfd8
 800c250:	0800cf98 	.word	0x0800cf98

0800c254 <_write_r>:
 800c254:	b538      	push	{r3, r4, r5, lr}
 800c256:	4d07      	ldr	r5, [pc, #28]	; (800c274 <_write_r+0x20>)
 800c258:	4604      	mov	r4, r0
 800c25a:	4608      	mov	r0, r1
 800c25c:	4611      	mov	r1, r2
 800c25e:	2200      	movs	r2, #0
 800c260:	602a      	str	r2, [r5, #0]
 800c262:	461a      	mov	r2, r3
 800c264:	f7f6 facd 	bl	8002802 <_write>
 800c268:	1c43      	adds	r3, r0, #1
 800c26a:	d102      	bne.n	800c272 <_write_r+0x1e>
 800c26c:	682b      	ldr	r3, [r5, #0]
 800c26e:	b103      	cbz	r3, 800c272 <_write_r+0x1e>
 800c270:	6023      	str	r3, [r4, #0]
 800c272:	bd38      	pop	{r3, r4, r5, pc}
 800c274:	200056cc 	.word	0x200056cc

0800c278 <__swsetup_r>:
 800c278:	4b32      	ldr	r3, [pc, #200]	; (800c344 <__swsetup_r+0xcc>)
 800c27a:	b570      	push	{r4, r5, r6, lr}
 800c27c:	681d      	ldr	r5, [r3, #0]
 800c27e:	4606      	mov	r6, r0
 800c280:	460c      	mov	r4, r1
 800c282:	b125      	cbz	r5, 800c28e <__swsetup_r+0x16>
 800c284:	69ab      	ldr	r3, [r5, #24]
 800c286:	b913      	cbnz	r3, 800c28e <__swsetup_r+0x16>
 800c288:	4628      	mov	r0, r5
 800c28a:	f7ff fccd 	bl	800bc28 <__sinit>
 800c28e:	4b2e      	ldr	r3, [pc, #184]	; (800c348 <__swsetup_r+0xd0>)
 800c290:	429c      	cmp	r4, r3
 800c292:	d10f      	bne.n	800c2b4 <__swsetup_r+0x3c>
 800c294:	686c      	ldr	r4, [r5, #4]
 800c296:	89a3      	ldrh	r3, [r4, #12]
 800c298:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c29c:	0719      	lsls	r1, r3, #28
 800c29e:	d42c      	bmi.n	800c2fa <__swsetup_r+0x82>
 800c2a0:	06dd      	lsls	r5, r3, #27
 800c2a2:	d411      	bmi.n	800c2c8 <__swsetup_r+0x50>
 800c2a4:	2309      	movs	r3, #9
 800c2a6:	6033      	str	r3, [r6, #0]
 800c2a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c2ac:	81a3      	strh	r3, [r4, #12]
 800c2ae:	f04f 30ff 	mov.w	r0, #4294967295
 800c2b2:	e03e      	b.n	800c332 <__swsetup_r+0xba>
 800c2b4:	4b25      	ldr	r3, [pc, #148]	; (800c34c <__swsetup_r+0xd4>)
 800c2b6:	429c      	cmp	r4, r3
 800c2b8:	d101      	bne.n	800c2be <__swsetup_r+0x46>
 800c2ba:	68ac      	ldr	r4, [r5, #8]
 800c2bc:	e7eb      	b.n	800c296 <__swsetup_r+0x1e>
 800c2be:	4b24      	ldr	r3, [pc, #144]	; (800c350 <__swsetup_r+0xd8>)
 800c2c0:	429c      	cmp	r4, r3
 800c2c2:	bf08      	it	eq
 800c2c4:	68ec      	ldreq	r4, [r5, #12]
 800c2c6:	e7e6      	b.n	800c296 <__swsetup_r+0x1e>
 800c2c8:	0758      	lsls	r0, r3, #29
 800c2ca:	d512      	bpl.n	800c2f2 <__swsetup_r+0x7a>
 800c2cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c2ce:	b141      	cbz	r1, 800c2e2 <__swsetup_r+0x6a>
 800c2d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c2d4:	4299      	cmp	r1, r3
 800c2d6:	d002      	beq.n	800c2de <__swsetup_r+0x66>
 800c2d8:	4630      	mov	r0, r6
 800c2da:	f000 f991 	bl	800c600 <_free_r>
 800c2de:	2300      	movs	r3, #0
 800c2e0:	6363      	str	r3, [r4, #52]	; 0x34
 800c2e2:	89a3      	ldrh	r3, [r4, #12]
 800c2e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c2e8:	81a3      	strh	r3, [r4, #12]
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	6063      	str	r3, [r4, #4]
 800c2ee:	6923      	ldr	r3, [r4, #16]
 800c2f0:	6023      	str	r3, [r4, #0]
 800c2f2:	89a3      	ldrh	r3, [r4, #12]
 800c2f4:	f043 0308 	orr.w	r3, r3, #8
 800c2f8:	81a3      	strh	r3, [r4, #12]
 800c2fa:	6923      	ldr	r3, [r4, #16]
 800c2fc:	b94b      	cbnz	r3, 800c312 <__swsetup_r+0x9a>
 800c2fe:	89a3      	ldrh	r3, [r4, #12]
 800c300:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c304:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c308:	d003      	beq.n	800c312 <__swsetup_r+0x9a>
 800c30a:	4621      	mov	r1, r4
 800c30c:	4630      	mov	r0, r6
 800c30e:	f000 f92b 	bl	800c568 <__smakebuf_r>
 800c312:	89a0      	ldrh	r0, [r4, #12]
 800c314:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c318:	f010 0301 	ands.w	r3, r0, #1
 800c31c:	d00a      	beq.n	800c334 <__swsetup_r+0xbc>
 800c31e:	2300      	movs	r3, #0
 800c320:	60a3      	str	r3, [r4, #8]
 800c322:	6963      	ldr	r3, [r4, #20]
 800c324:	425b      	negs	r3, r3
 800c326:	61a3      	str	r3, [r4, #24]
 800c328:	6923      	ldr	r3, [r4, #16]
 800c32a:	b943      	cbnz	r3, 800c33e <__swsetup_r+0xc6>
 800c32c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c330:	d1ba      	bne.n	800c2a8 <__swsetup_r+0x30>
 800c332:	bd70      	pop	{r4, r5, r6, pc}
 800c334:	0781      	lsls	r1, r0, #30
 800c336:	bf58      	it	pl
 800c338:	6963      	ldrpl	r3, [r4, #20]
 800c33a:	60a3      	str	r3, [r4, #8]
 800c33c:	e7f4      	b.n	800c328 <__swsetup_r+0xb0>
 800c33e:	2000      	movs	r0, #0
 800c340:	e7f7      	b.n	800c332 <__swsetup_r+0xba>
 800c342:	bf00      	nop
 800c344:	200000b0 	.word	0x200000b0
 800c348:	0800cfb8 	.word	0x0800cfb8
 800c34c:	0800cfd8 	.word	0x0800cfd8
 800c350:	0800cf98 	.word	0x0800cf98

0800c354 <_close_r>:
 800c354:	b538      	push	{r3, r4, r5, lr}
 800c356:	4d06      	ldr	r5, [pc, #24]	; (800c370 <_close_r+0x1c>)
 800c358:	2300      	movs	r3, #0
 800c35a:	4604      	mov	r4, r0
 800c35c:	4608      	mov	r0, r1
 800c35e:	602b      	str	r3, [r5, #0]
 800c360:	f7f6 fa6b 	bl	800283a <_close>
 800c364:	1c43      	adds	r3, r0, #1
 800c366:	d102      	bne.n	800c36e <_close_r+0x1a>
 800c368:	682b      	ldr	r3, [r5, #0]
 800c36a:	b103      	cbz	r3, 800c36e <_close_r+0x1a>
 800c36c:	6023      	str	r3, [r4, #0]
 800c36e:	bd38      	pop	{r3, r4, r5, pc}
 800c370:	200056cc 	.word	0x200056cc

0800c374 <__sflush_r>:
 800c374:	898a      	ldrh	r2, [r1, #12]
 800c376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c37a:	4605      	mov	r5, r0
 800c37c:	0710      	lsls	r0, r2, #28
 800c37e:	460c      	mov	r4, r1
 800c380:	d458      	bmi.n	800c434 <__sflush_r+0xc0>
 800c382:	684b      	ldr	r3, [r1, #4]
 800c384:	2b00      	cmp	r3, #0
 800c386:	dc05      	bgt.n	800c394 <__sflush_r+0x20>
 800c388:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	dc02      	bgt.n	800c394 <__sflush_r+0x20>
 800c38e:	2000      	movs	r0, #0
 800c390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c394:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c396:	2e00      	cmp	r6, #0
 800c398:	d0f9      	beq.n	800c38e <__sflush_r+0x1a>
 800c39a:	2300      	movs	r3, #0
 800c39c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c3a0:	682f      	ldr	r7, [r5, #0]
 800c3a2:	602b      	str	r3, [r5, #0]
 800c3a4:	d032      	beq.n	800c40c <__sflush_r+0x98>
 800c3a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c3a8:	89a3      	ldrh	r3, [r4, #12]
 800c3aa:	075a      	lsls	r2, r3, #29
 800c3ac:	d505      	bpl.n	800c3ba <__sflush_r+0x46>
 800c3ae:	6863      	ldr	r3, [r4, #4]
 800c3b0:	1ac0      	subs	r0, r0, r3
 800c3b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c3b4:	b10b      	cbz	r3, 800c3ba <__sflush_r+0x46>
 800c3b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c3b8:	1ac0      	subs	r0, r0, r3
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	4602      	mov	r2, r0
 800c3be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c3c0:	6a21      	ldr	r1, [r4, #32]
 800c3c2:	4628      	mov	r0, r5
 800c3c4:	47b0      	blx	r6
 800c3c6:	1c43      	adds	r3, r0, #1
 800c3c8:	89a3      	ldrh	r3, [r4, #12]
 800c3ca:	d106      	bne.n	800c3da <__sflush_r+0x66>
 800c3cc:	6829      	ldr	r1, [r5, #0]
 800c3ce:	291d      	cmp	r1, #29
 800c3d0:	d82c      	bhi.n	800c42c <__sflush_r+0xb8>
 800c3d2:	4a2a      	ldr	r2, [pc, #168]	; (800c47c <__sflush_r+0x108>)
 800c3d4:	40ca      	lsrs	r2, r1
 800c3d6:	07d6      	lsls	r6, r2, #31
 800c3d8:	d528      	bpl.n	800c42c <__sflush_r+0xb8>
 800c3da:	2200      	movs	r2, #0
 800c3dc:	6062      	str	r2, [r4, #4]
 800c3de:	04d9      	lsls	r1, r3, #19
 800c3e0:	6922      	ldr	r2, [r4, #16]
 800c3e2:	6022      	str	r2, [r4, #0]
 800c3e4:	d504      	bpl.n	800c3f0 <__sflush_r+0x7c>
 800c3e6:	1c42      	adds	r2, r0, #1
 800c3e8:	d101      	bne.n	800c3ee <__sflush_r+0x7a>
 800c3ea:	682b      	ldr	r3, [r5, #0]
 800c3ec:	b903      	cbnz	r3, 800c3f0 <__sflush_r+0x7c>
 800c3ee:	6560      	str	r0, [r4, #84]	; 0x54
 800c3f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c3f2:	602f      	str	r7, [r5, #0]
 800c3f4:	2900      	cmp	r1, #0
 800c3f6:	d0ca      	beq.n	800c38e <__sflush_r+0x1a>
 800c3f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c3fc:	4299      	cmp	r1, r3
 800c3fe:	d002      	beq.n	800c406 <__sflush_r+0x92>
 800c400:	4628      	mov	r0, r5
 800c402:	f000 f8fd 	bl	800c600 <_free_r>
 800c406:	2000      	movs	r0, #0
 800c408:	6360      	str	r0, [r4, #52]	; 0x34
 800c40a:	e7c1      	b.n	800c390 <__sflush_r+0x1c>
 800c40c:	6a21      	ldr	r1, [r4, #32]
 800c40e:	2301      	movs	r3, #1
 800c410:	4628      	mov	r0, r5
 800c412:	47b0      	blx	r6
 800c414:	1c41      	adds	r1, r0, #1
 800c416:	d1c7      	bne.n	800c3a8 <__sflush_r+0x34>
 800c418:	682b      	ldr	r3, [r5, #0]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d0c4      	beq.n	800c3a8 <__sflush_r+0x34>
 800c41e:	2b1d      	cmp	r3, #29
 800c420:	d001      	beq.n	800c426 <__sflush_r+0xb2>
 800c422:	2b16      	cmp	r3, #22
 800c424:	d101      	bne.n	800c42a <__sflush_r+0xb6>
 800c426:	602f      	str	r7, [r5, #0]
 800c428:	e7b1      	b.n	800c38e <__sflush_r+0x1a>
 800c42a:	89a3      	ldrh	r3, [r4, #12]
 800c42c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c430:	81a3      	strh	r3, [r4, #12]
 800c432:	e7ad      	b.n	800c390 <__sflush_r+0x1c>
 800c434:	690f      	ldr	r7, [r1, #16]
 800c436:	2f00      	cmp	r7, #0
 800c438:	d0a9      	beq.n	800c38e <__sflush_r+0x1a>
 800c43a:	0793      	lsls	r3, r2, #30
 800c43c:	680e      	ldr	r6, [r1, #0]
 800c43e:	bf08      	it	eq
 800c440:	694b      	ldreq	r3, [r1, #20]
 800c442:	600f      	str	r7, [r1, #0]
 800c444:	bf18      	it	ne
 800c446:	2300      	movne	r3, #0
 800c448:	eba6 0807 	sub.w	r8, r6, r7
 800c44c:	608b      	str	r3, [r1, #8]
 800c44e:	f1b8 0f00 	cmp.w	r8, #0
 800c452:	dd9c      	ble.n	800c38e <__sflush_r+0x1a>
 800c454:	6a21      	ldr	r1, [r4, #32]
 800c456:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c458:	4643      	mov	r3, r8
 800c45a:	463a      	mov	r2, r7
 800c45c:	4628      	mov	r0, r5
 800c45e:	47b0      	blx	r6
 800c460:	2800      	cmp	r0, #0
 800c462:	dc06      	bgt.n	800c472 <__sflush_r+0xfe>
 800c464:	89a3      	ldrh	r3, [r4, #12]
 800c466:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c46a:	81a3      	strh	r3, [r4, #12]
 800c46c:	f04f 30ff 	mov.w	r0, #4294967295
 800c470:	e78e      	b.n	800c390 <__sflush_r+0x1c>
 800c472:	4407      	add	r7, r0
 800c474:	eba8 0800 	sub.w	r8, r8, r0
 800c478:	e7e9      	b.n	800c44e <__sflush_r+0xda>
 800c47a:	bf00      	nop
 800c47c:	20400001 	.word	0x20400001

0800c480 <_fflush_r>:
 800c480:	b538      	push	{r3, r4, r5, lr}
 800c482:	690b      	ldr	r3, [r1, #16]
 800c484:	4605      	mov	r5, r0
 800c486:	460c      	mov	r4, r1
 800c488:	b913      	cbnz	r3, 800c490 <_fflush_r+0x10>
 800c48a:	2500      	movs	r5, #0
 800c48c:	4628      	mov	r0, r5
 800c48e:	bd38      	pop	{r3, r4, r5, pc}
 800c490:	b118      	cbz	r0, 800c49a <_fflush_r+0x1a>
 800c492:	6983      	ldr	r3, [r0, #24]
 800c494:	b90b      	cbnz	r3, 800c49a <_fflush_r+0x1a>
 800c496:	f7ff fbc7 	bl	800bc28 <__sinit>
 800c49a:	4b14      	ldr	r3, [pc, #80]	; (800c4ec <_fflush_r+0x6c>)
 800c49c:	429c      	cmp	r4, r3
 800c49e:	d11b      	bne.n	800c4d8 <_fflush_r+0x58>
 800c4a0:	686c      	ldr	r4, [r5, #4]
 800c4a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d0ef      	beq.n	800c48a <_fflush_r+0xa>
 800c4aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c4ac:	07d0      	lsls	r0, r2, #31
 800c4ae:	d404      	bmi.n	800c4ba <_fflush_r+0x3a>
 800c4b0:	0599      	lsls	r1, r3, #22
 800c4b2:	d402      	bmi.n	800c4ba <_fflush_r+0x3a>
 800c4b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c4b6:	f7ff fc7a 	bl	800bdae <__retarget_lock_acquire_recursive>
 800c4ba:	4628      	mov	r0, r5
 800c4bc:	4621      	mov	r1, r4
 800c4be:	f7ff ff59 	bl	800c374 <__sflush_r>
 800c4c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c4c4:	07da      	lsls	r2, r3, #31
 800c4c6:	4605      	mov	r5, r0
 800c4c8:	d4e0      	bmi.n	800c48c <_fflush_r+0xc>
 800c4ca:	89a3      	ldrh	r3, [r4, #12]
 800c4cc:	059b      	lsls	r3, r3, #22
 800c4ce:	d4dd      	bmi.n	800c48c <_fflush_r+0xc>
 800c4d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c4d2:	f7ff fc6d 	bl	800bdb0 <__retarget_lock_release_recursive>
 800c4d6:	e7d9      	b.n	800c48c <_fflush_r+0xc>
 800c4d8:	4b05      	ldr	r3, [pc, #20]	; (800c4f0 <_fflush_r+0x70>)
 800c4da:	429c      	cmp	r4, r3
 800c4dc:	d101      	bne.n	800c4e2 <_fflush_r+0x62>
 800c4de:	68ac      	ldr	r4, [r5, #8]
 800c4e0:	e7df      	b.n	800c4a2 <_fflush_r+0x22>
 800c4e2:	4b04      	ldr	r3, [pc, #16]	; (800c4f4 <_fflush_r+0x74>)
 800c4e4:	429c      	cmp	r4, r3
 800c4e6:	bf08      	it	eq
 800c4e8:	68ec      	ldreq	r4, [r5, #12]
 800c4ea:	e7da      	b.n	800c4a2 <_fflush_r+0x22>
 800c4ec:	0800cfb8 	.word	0x0800cfb8
 800c4f0:	0800cfd8 	.word	0x0800cfd8
 800c4f4:	0800cf98 	.word	0x0800cf98

0800c4f8 <_lseek_r>:
 800c4f8:	b538      	push	{r3, r4, r5, lr}
 800c4fa:	4d07      	ldr	r5, [pc, #28]	; (800c518 <_lseek_r+0x20>)
 800c4fc:	4604      	mov	r4, r0
 800c4fe:	4608      	mov	r0, r1
 800c500:	4611      	mov	r1, r2
 800c502:	2200      	movs	r2, #0
 800c504:	602a      	str	r2, [r5, #0]
 800c506:	461a      	mov	r2, r3
 800c508:	f7f6 f9be 	bl	8002888 <_lseek>
 800c50c:	1c43      	adds	r3, r0, #1
 800c50e:	d102      	bne.n	800c516 <_lseek_r+0x1e>
 800c510:	682b      	ldr	r3, [r5, #0]
 800c512:	b103      	cbz	r3, 800c516 <_lseek_r+0x1e>
 800c514:	6023      	str	r3, [r4, #0]
 800c516:	bd38      	pop	{r3, r4, r5, pc}
 800c518:	200056cc 	.word	0x200056cc

0800c51c <__swhatbuf_r>:
 800c51c:	b570      	push	{r4, r5, r6, lr}
 800c51e:	460e      	mov	r6, r1
 800c520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c524:	2900      	cmp	r1, #0
 800c526:	b096      	sub	sp, #88	; 0x58
 800c528:	4614      	mov	r4, r2
 800c52a:	461d      	mov	r5, r3
 800c52c:	da08      	bge.n	800c540 <__swhatbuf_r+0x24>
 800c52e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c532:	2200      	movs	r2, #0
 800c534:	602a      	str	r2, [r5, #0]
 800c536:	061a      	lsls	r2, r3, #24
 800c538:	d410      	bmi.n	800c55c <__swhatbuf_r+0x40>
 800c53a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c53e:	e00e      	b.n	800c55e <__swhatbuf_r+0x42>
 800c540:	466a      	mov	r2, sp
 800c542:	f000 fbab 	bl	800cc9c <_fstat_r>
 800c546:	2800      	cmp	r0, #0
 800c548:	dbf1      	blt.n	800c52e <__swhatbuf_r+0x12>
 800c54a:	9a01      	ldr	r2, [sp, #4]
 800c54c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c550:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c554:	425a      	negs	r2, r3
 800c556:	415a      	adcs	r2, r3
 800c558:	602a      	str	r2, [r5, #0]
 800c55a:	e7ee      	b.n	800c53a <__swhatbuf_r+0x1e>
 800c55c:	2340      	movs	r3, #64	; 0x40
 800c55e:	2000      	movs	r0, #0
 800c560:	6023      	str	r3, [r4, #0]
 800c562:	b016      	add	sp, #88	; 0x58
 800c564:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c568 <__smakebuf_r>:
 800c568:	898b      	ldrh	r3, [r1, #12]
 800c56a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c56c:	079d      	lsls	r5, r3, #30
 800c56e:	4606      	mov	r6, r0
 800c570:	460c      	mov	r4, r1
 800c572:	d507      	bpl.n	800c584 <__smakebuf_r+0x1c>
 800c574:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c578:	6023      	str	r3, [r4, #0]
 800c57a:	6123      	str	r3, [r4, #16]
 800c57c:	2301      	movs	r3, #1
 800c57e:	6163      	str	r3, [r4, #20]
 800c580:	b002      	add	sp, #8
 800c582:	bd70      	pop	{r4, r5, r6, pc}
 800c584:	ab01      	add	r3, sp, #4
 800c586:	466a      	mov	r2, sp
 800c588:	f7ff ffc8 	bl	800c51c <__swhatbuf_r>
 800c58c:	9900      	ldr	r1, [sp, #0]
 800c58e:	4605      	mov	r5, r0
 800c590:	4630      	mov	r0, r6
 800c592:	f7ff fc45 	bl	800be20 <_malloc_r>
 800c596:	b948      	cbnz	r0, 800c5ac <__smakebuf_r+0x44>
 800c598:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c59c:	059a      	lsls	r2, r3, #22
 800c59e:	d4ef      	bmi.n	800c580 <__smakebuf_r+0x18>
 800c5a0:	f023 0303 	bic.w	r3, r3, #3
 800c5a4:	f043 0302 	orr.w	r3, r3, #2
 800c5a8:	81a3      	strh	r3, [r4, #12]
 800c5aa:	e7e3      	b.n	800c574 <__smakebuf_r+0xc>
 800c5ac:	4b0d      	ldr	r3, [pc, #52]	; (800c5e4 <__smakebuf_r+0x7c>)
 800c5ae:	62b3      	str	r3, [r6, #40]	; 0x28
 800c5b0:	89a3      	ldrh	r3, [r4, #12]
 800c5b2:	6020      	str	r0, [r4, #0]
 800c5b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5b8:	81a3      	strh	r3, [r4, #12]
 800c5ba:	9b00      	ldr	r3, [sp, #0]
 800c5bc:	6163      	str	r3, [r4, #20]
 800c5be:	9b01      	ldr	r3, [sp, #4]
 800c5c0:	6120      	str	r0, [r4, #16]
 800c5c2:	b15b      	cbz	r3, 800c5dc <__smakebuf_r+0x74>
 800c5c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5c8:	4630      	mov	r0, r6
 800c5ca:	f000 fb79 	bl	800ccc0 <_isatty_r>
 800c5ce:	b128      	cbz	r0, 800c5dc <__smakebuf_r+0x74>
 800c5d0:	89a3      	ldrh	r3, [r4, #12]
 800c5d2:	f023 0303 	bic.w	r3, r3, #3
 800c5d6:	f043 0301 	orr.w	r3, r3, #1
 800c5da:	81a3      	strh	r3, [r4, #12]
 800c5dc:	89a0      	ldrh	r0, [r4, #12]
 800c5de:	4305      	orrs	r5, r0
 800c5e0:	81a5      	strh	r5, [r4, #12]
 800c5e2:	e7cd      	b.n	800c580 <__smakebuf_r+0x18>
 800c5e4:	0800bbc1 	.word	0x0800bbc1

0800c5e8 <__malloc_lock>:
 800c5e8:	4801      	ldr	r0, [pc, #4]	; (800c5f0 <__malloc_lock+0x8>)
 800c5ea:	f7ff bbe0 	b.w	800bdae <__retarget_lock_acquire_recursive>
 800c5ee:	bf00      	nop
 800c5f0:	200056c0 	.word	0x200056c0

0800c5f4 <__malloc_unlock>:
 800c5f4:	4801      	ldr	r0, [pc, #4]	; (800c5fc <__malloc_unlock+0x8>)
 800c5f6:	f7ff bbdb 	b.w	800bdb0 <__retarget_lock_release_recursive>
 800c5fa:	bf00      	nop
 800c5fc:	200056c0 	.word	0x200056c0

0800c600 <_free_r>:
 800c600:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c602:	2900      	cmp	r1, #0
 800c604:	d044      	beq.n	800c690 <_free_r+0x90>
 800c606:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c60a:	9001      	str	r0, [sp, #4]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	f1a1 0404 	sub.w	r4, r1, #4
 800c612:	bfb8      	it	lt
 800c614:	18e4      	addlt	r4, r4, r3
 800c616:	f7ff ffe7 	bl	800c5e8 <__malloc_lock>
 800c61a:	4a1e      	ldr	r2, [pc, #120]	; (800c694 <_free_r+0x94>)
 800c61c:	9801      	ldr	r0, [sp, #4]
 800c61e:	6813      	ldr	r3, [r2, #0]
 800c620:	b933      	cbnz	r3, 800c630 <_free_r+0x30>
 800c622:	6063      	str	r3, [r4, #4]
 800c624:	6014      	str	r4, [r2, #0]
 800c626:	b003      	add	sp, #12
 800c628:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c62c:	f7ff bfe2 	b.w	800c5f4 <__malloc_unlock>
 800c630:	42a3      	cmp	r3, r4
 800c632:	d908      	bls.n	800c646 <_free_r+0x46>
 800c634:	6825      	ldr	r5, [r4, #0]
 800c636:	1961      	adds	r1, r4, r5
 800c638:	428b      	cmp	r3, r1
 800c63a:	bf01      	itttt	eq
 800c63c:	6819      	ldreq	r1, [r3, #0]
 800c63e:	685b      	ldreq	r3, [r3, #4]
 800c640:	1949      	addeq	r1, r1, r5
 800c642:	6021      	streq	r1, [r4, #0]
 800c644:	e7ed      	b.n	800c622 <_free_r+0x22>
 800c646:	461a      	mov	r2, r3
 800c648:	685b      	ldr	r3, [r3, #4]
 800c64a:	b10b      	cbz	r3, 800c650 <_free_r+0x50>
 800c64c:	42a3      	cmp	r3, r4
 800c64e:	d9fa      	bls.n	800c646 <_free_r+0x46>
 800c650:	6811      	ldr	r1, [r2, #0]
 800c652:	1855      	adds	r5, r2, r1
 800c654:	42a5      	cmp	r5, r4
 800c656:	d10b      	bne.n	800c670 <_free_r+0x70>
 800c658:	6824      	ldr	r4, [r4, #0]
 800c65a:	4421      	add	r1, r4
 800c65c:	1854      	adds	r4, r2, r1
 800c65e:	42a3      	cmp	r3, r4
 800c660:	6011      	str	r1, [r2, #0]
 800c662:	d1e0      	bne.n	800c626 <_free_r+0x26>
 800c664:	681c      	ldr	r4, [r3, #0]
 800c666:	685b      	ldr	r3, [r3, #4]
 800c668:	6053      	str	r3, [r2, #4]
 800c66a:	4421      	add	r1, r4
 800c66c:	6011      	str	r1, [r2, #0]
 800c66e:	e7da      	b.n	800c626 <_free_r+0x26>
 800c670:	d902      	bls.n	800c678 <_free_r+0x78>
 800c672:	230c      	movs	r3, #12
 800c674:	6003      	str	r3, [r0, #0]
 800c676:	e7d6      	b.n	800c626 <_free_r+0x26>
 800c678:	6825      	ldr	r5, [r4, #0]
 800c67a:	1961      	adds	r1, r4, r5
 800c67c:	428b      	cmp	r3, r1
 800c67e:	bf04      	itt	eq
 800c680:	6819      	ldreq	r1, [r3, #0]
 800c682:	685b      	ldreq	r3, [r3, #4]
 800c684:	6063      	str	r3, [r4, #4]
 800c686:	bf04      	itt	eq
 800c688:	1949      	addeq	r1, r1, r5
 800c68a:	6021      	streq	r1, [r4, #0]
 800c68c:	6054      	str	r4, [r2, #4]
 800c68e:	e7ca      	b.n	800c626 <_free_r+0x26>
 800c690:	b003      	add	sp, #12
 800c692:	bd30      	pop	{r4, r5, pc}
 800c694:	200056c4 	.word	0x200056c4

0800c698 <__ssputs_r>:
 800c698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c69c:	688e      	ldr	r6, [r1, #8]
 800c69e:	429e      	cmp	r6, r3
 800c6a0:	4682      	mov	sl, r0
 800c6a2:	460c      	mov	r4, r1
 800c6a4:	4690      	mov	r8, r2
 800c6a6:	461f      	mov	r7, r3
 800c6a8:	d838      	bhi.n	800c71c <__ssputs_r+0x84>
 800c6aa:	898a      	ldrh	r2, [r1, #12]
 800c6ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c6b0:	d032      	beq.n	800c718 <__ssputs_r+0x80>
 800c6b2:	6825      	ldr	r5, [r4, #0]
 800c6b4:	6909      	ldr	r1, [r1, #16]
 800c6b6:	eba5 0901 	sub.w	r9, r5, r1
 800c6ba:	6965      	ldr	r5, [r4, #20]
 800c6bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c6c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c6c4:	3301      	adds	r3, #1
 800c6c6:	444b      	add	r3, r9
 800c6c8:	106d      	asrs	r5, r5, #1
 800c6ca:	429d      	cmp	r5, r3
 800c6cc:	bf38      	it	cc
 800c6ce:	461d      	movcc	r5, r3
 800c6d0:	0553      	lsls	r3, r2, #21
 800c6d2:	d531      	bpl.n	800c738 <__ssputs_r+0xa0>
 800c6d4:	4629      	mov	r1, r5
 800c6d6:	f7ff fba3 	bl	800be20 <_malloc_r>
 800c6da:	4606      	mov	r6, r0
 800c6dc:	b950      	cbnz	r0, 800c6f4 <__ssputs_r+0x5c>
 800c6de:	230c      	movs	r3, #12
 800c6e0:	f8ca 3000 	str.w	r3, [sl]
 800c6e4:	89a3      	ldrh	r3, [r4, #12]
 800c6e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6ea:	81a3      	strh	r3, [r4, #12]
 800c6ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c6f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6f4:	6921      	ldr	r1, [r4, #16]
 800c6f6:	464a      	mov	r2, r9
 800c6f8:	f7ff fb5b 	bl	800bdb2 <memcpy>
 800c6fc:	89a3      	ldrh	r3, [r4, #12]
 800c6fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c706:	81a3      	strh	r3, [r4, #12]
 800c708:	6126      	str	r6, [r4, #16]
 800c70a:	6165      	str	r5, [r4, #20]
 800c70c:	444e      	add	r6, r9
 800c70e:	eba5 0509 	sub.w	r5, r5, r9
 800c712:	6026      	str	r6, [r4, #0]
 800c714:	60a5      	str	r5, [r4, #8]
 800c716:	463e      	mov	r6, r7
 800c718:	42be      	cmp	r6, r7
 800c71a:	d900      	bls.n	800c71e <__ssputs_r+0x86>
 800c71c:	463e      	mov	r6, r7
 800c71e:	6820      	ldr	r0, [r4, #0]
 800c720:	4632      	mov	r2, r6
 800c722:	4641      	mov	r1, r8
 800c724:	f000 fadc 	bl	800cce0 <memmove>
 800c728:	68a3      	ldr	r3, [r4, #8]
 800c72a:	1b9b      	subs	r3, r3, r6
 800c72c:	60a3      	str	r3, [r4, #8]
 800c72e:	6823      	ldr	r3, [r4, #0]
 800c730:	4433      	add	r3, r6
 800c732:	6023      	str	r3, [r4, #0]
 800c734:	2000      	movs	r0, #0
 800c736:	e7db      	b.n	800c6f0 <__ssputs_r+0x58>
 800c738:	462a      	mov	r2, r5
 800c73a:	f000 faeb 	bl	800cd14 <_realloc_r>
 800c73e:	4606      	mov	r6, r0
 800c740:	2800      	cmp	r0, #0
 800c742:	d1e1      	bne.n	800c708 <__ssputs_r+0x70>
 800c744:	6921      	ldr	r1, [r4, #16]
 800c746:	4650      	mov	r0, sl
 800c748:	f7ff ff5a 	bl	800c600 <_free_r>
 800c74c:	e7c7      	b.n	800c6de <__ssputs_r+0x46>
	...

0800c750 <_svfiprintf_r>:
 800c750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c754:	4698      	mov	r8, r3
 800c756:	898b      	ldrh	r3, [r1, #12]
 800c758:	061b      	lsls	r3, r3, #24
 800c75a:	b09d      	sub	sp, #116	; 0x74
 800c75c:	4607      	mov	r7, r0
 800c75e:	460d      	mov	r5, r1
 800c760:	4614      	mov	r4, r2
 800c762:	d50e      	bpl.n	800c782 <_svfiprintf_r+0x32>
 800c764:	690b      	ldr	r3, [r1, #16]
 800c766:	b963      	cbnz	r3, 800c782 <_svfiprintf_r+0x32>
 800c768:	2140      	movs	r1, #64	; 0x40
 800c76a:	f7ff fb59 	bl	800be20 <_malloc_r>
 800c76e:	6028      	str	r0, [r5, #0]
 800c770:	6128      	str	r0, [r5, #16]
 800c772:	b920      	cbnz	r0, 800c77e <_svfiprintf_r+0x2e>
 800c774:	230c      	movs	r3, #12
 800c776:	603b      	str	r3, [r7, #0]
 800c778:	f04f 30ff 	mov.w	r0, #4294967295
 800c77c:	e0d1      	b.n	800c922 <_svfiprintf_r+0x1d2>
 800c77e:	2340      	movs	r3, #64	; 0x40
 800c780:	616b      	str	r3, [r5, #20]
 800c782:	2300      	movs	r3, #0
 800c784:	9309      	str	r3, [sp, #36]	; 0x24
 800c786:	2320      	movs	r3, #32
 800c788:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c78c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c790:	2330      	movs	r3, #48	; 0x30
 800c792:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c93c <_svfiprintf_r+0x1ec>
 800c796:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c79a:	f04f 0901 	mov.w	r9, #1
 800c79e:	4623      	mov	r3, r4
 800c7a0:	469a      	mov	sl, r3
 800c7a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7a6:	b10a      	cbz	r2, 800c7ac <_svfiprintf_r+0x5c>
 800c7a8:	2a25      	cmp	r2, #37	; 0x25
 800c7aa:	d1f9      	bne.n	800c7a0 <_svfiprintf_r+0x50>
 800c7ac:	ebba 0b04 	subs.w	fp, sl, r4
 800c7b0:	d00b      	beq.n	800c7ca <_svfiprintf_r+0x7a>
 800c7b2:	465b      	mov	r3, fp
 800c7b4:	4622      	mov	r2, r4
 800c7b6:	4629      	mov	r1, r5
 800c7b8:	4638      	mov	r0, r7
 800c7ba:	f7ff ff6d 	bl	800c698 <__ssputs_r>
 800c7be:	3001      	adds	r0, #1
 800c7c0:	f000 80aa 	beq.w	800c918 <_svfiprintf_r+0x1c8>
 800c7c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7c6:	445a      	add	r2, fp
 800c7c8:	9209      	str	r2, [sp, #36]	; 0x24
 800c7ca:	f89a 3000 	ldrb.w	r3, [sl]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	f000 80a2 	beq.w	800c918 <_svfiprintf_r+0x1c8>
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	f04f 32ff 	mov.w	r2, #4294967295
 800c7da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7de:	f10a 0a01 	add.w	sl, sl, #1
 800c7e2:	9304      	str	r3, [sp, #16]
 800c7e4:	9307      	str	r3, [sp, #28]
 800c7e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c7ea:	931a      	str	r3, [sp, #104]	; 0x68
 800c7ec:	4654      	mov	r4, sl
 800c7ee:	2205      	movs	r2, #5
 800c7f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7f4:	4851      	ldr	r0, [pc, #324]	; (800c93c <_svfiprintf_r+0x1ec>)
 800c7f6:	f7f3 fcfb 	bl	80001f0 <memchr>
 800c7fa:	9a04      	ldr	r2, [sp, #16]
 800c7fc:	b9d8      	cbnz	r0, 800c836 <_svfiprintf_r+0xe6>
 800c7fe:	06d0      	lsls	r0, r2, #27
 800c800:	bf44      	itt	mi
 800c802:	2320      	movmi	r3, #32
 800c804:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c808:	0711      	lsls	r1, r2, #28
 800c80a:	bf44      	itt	mi
 800c80c:	232b      	movmi	r3, #43	; 0x2b
 800c80e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c812:	f89a 3000 	ldrb.w	r3, [sl]
 800c816:	2b2a      	cmp	r3, #42	; 0x2a
 800c818:	d015      	beq.n	800c846 <_svfiprintf_r+0xf6>
 800c81a:	9a07      	ldr	r2, [sp, #28]
 800c81c:	4654      	mov	r4, sl
 800c81e:	2000      	movs	r0, #0
 800c820:	f04f 0c0a 	mov.w	ip, #10
 800c824:	4621      	mov	r1, r4
 800c826:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c82a:	3b30      	subs	r3, #48	; 0x30
 800c82c:	2b09      	cmp	r3, #9
 800c82e:	d94e      	bls.n	800c8ce <_svfiprintf_r+0x17e>
 800c830:	b1b0      	cbz	r0, 800c860 <_svfiprintf_r+0x110>
 800c832:	9207      	str	r2, [sp, #28]
 800c834:	e014      	b.n	800c860 <_svfiprintf_r+0x110>
 800c836:	eba0 0308 	sub.w	r3, r0, r8
 800c83a:	fa09 f303 	lsl.w	r3, r9, r3
 800c83e:	4313      	orrs	r3, r2
 800c840:	9304      	str	r3, [sp, #16]
 800c842:	46a2      	mov	sl, r4
 800c844:	e7d2      	b.n	800c7ec <_svfiprintf_r+0x9c>
 800c846:	9b03      	ldr	r3, [sp, #12]
 800c848:	1d19      	adds	r1, r3, #4
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	9103      	str	r1, [sp, #12]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	bfbb      	ittet	lt
 800c852:	425b      	neglt	r3, r3
 800c854:	f042 0202 	orrlt.w	r2, r2, #2
 800c858:	9307      	strge	r3, [sp, #28]
 800c85a:	9307      	strlt	r3, [sp, #28]
 800c85c:	bfb8      	it	lt
 800c85e:	9204      	strlt	r2, [sp, #16]
 800c860:	7823      	ldrb	r3, [r4, #0]
 800c862:	2b2e      	cmp	r3, #46	; 0x2e
 800c864:	d10c      	bne.n	800c880 <_svfiprintf_r+0x130>
 800c866:	7863      	ldrb	r3, [r4, #1]
 800c868:	2b2a      	cmp	r3, #42	; 0x2a
 800c86a:	d135      	bne.n	800c8d8 <_svfiprintf_r+0x188>
 800c86c:	9b03      	ldr	r3, [sp, #12]
 800c86e:	1d1a      	adds	r2, r3, #4
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	9203      	str	r2, [sp, #12]
 800c874:	2b00      	cmp	r3, #0
 800c876:	bfb8      	it	lt
 800c878:	f04f 33ff 	movlt.w	r3, #4294967295
 800c87c:	3402      	adds	r4, #2
 800c87e:	9305      	str	r3, [sp, #20]
 800c880:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c94c <_svfiprintf_r+0x1fc>
 800c884:	7821      	ldrb	r1, [r4, #0]
 800c886:	2203      	movs	r2, #3
 800c888:	4650      	mov	r0, sl
 800c88a:	f7f3 fcb1 	bl	80001f0 <memchr>
 800c88e:	b140      	cbz	r0, 800c8a2 <_svfiprintf_r+0x152>
 800c890:	2340      	movs	r3, #64	; 0x40
 800c892:	eba0 000a 	sub.w	r0, r0, sl
 800c896:	fa03 f000 	lsl.w	r0, r3, r0
 800c89a:	9b04      	ldr	r3, [sp, #16]
 800c89c:	4303      	orrs	r3, r0
 800c89e:	3401      	adds	r4, #1
 800c8a0:	9304      	str	r3, [sp, #16]
 800c8a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8a6:	4826      	ldr	r0, [pc, #152]	; (800c940 <_svfiprintf_r+0x1f0>)
 800c8a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c8ac:	2206      	movs	r2, #6
 800c8ae:	f7f3 fc9f 	bl	80001f0 <memchr>
 800c8b2:	2800      	cmp	r0, #0
 800c8b4:	d038      	beq.n	800c928 <_svfiprintf_r+0x1d8>
 800c8b6:	4b23      	ldr	r3, [pc, #140]	; (800c944 <_svfiprintf_r+0x1f4>)
 800c8b8:	bb1b      	cbnz	r3, 800c902 <_svfiprintf_r+0x1b2>
 800c8ba:	9b03      	ldr	r3, [sp, #12]
 800c8bc:	3307      	adds	r3, #7
 800c8be:	f023 0307 	bic.w	r3, r3, #7
 800c8c2:	3308      	adds	r3, #8
 800c8c4:	9303      	str	r3, [sp, #12]
 800c8c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8c8:	4433      	add	r3, r6
 800c8ca:	9309      	str	r3, [sp, #36]	; 0x24
 800c8cc:	e767      	b.n	800c79e <_svfiprintf_r+0x4e>
 800c8ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800c8d2:	460c      	mov	r4, r1
 800c8d4:	2001      	movs	r0, #1
 800c8d6:	e7a5      	b.n	800c824 <_svfiprintf_r+0xd4>
 800c8d8:	2300      	movs	r3, #0
 800c8da:	3401      	adds	r4, #1
 800c8dc:	9305      	str	r3, [sp, #20]
 800c8de:	4619      	mov	r1, r3
 800c8e0:	f04f 0c0a 	mov.w	ip, #10
 800c8e4:	4620      	mov	r0, r4
 800c8e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8ea:	3a30      	subs	r2, #48	; 0x30
 800c8ec:	2a09      	cmp	r2, #9
 800c8ee:	d903      	bls.n	800c8f8 <_svfiprintf_r+0x1a8>
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d0c5      	beq.n	800c880 <_svfiprintf_r+0x130>
 800c8f4:	9105      	str	r1, [sp, #20]
 800c8f6:	e7c3      	b.n	800c880 <_svfiprintf_r+0x130>
 800c8f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8fc:	4604      	mov	r4, r0
 800c8fe:	2301      	movs	r3, #1
 800c900:	e7f0      	b.n	800c8e4 <_svfiprintf_r+0x194>
 800c902:	ab03      	add	r3, sp, #12
 800c904:	9300      	str	r3, [sp, #0]
 800c906:	462a      	mov	r2, r5
 800c908:	4b0f      	ldr	r3, [pc, #60]	; (800c948 <_svfiprintf_r+0x1f8>)
 800c90a:	a904      	add	r1, sp, #16
 800c90c:	4638      	mov	r0, r7
 800c90e:	f3af 8000 	nop.w
 800c912:	1c42      	adds	r2, r0, #1
 800c914:	4606      	mov	r6, r0
 800c916:	d1d6      	bne.n	800c8c6 <_svfiprintf_r+0x176>
 800c918:	89ab      	ldrh	r3, [r5, #12]
 800c91a:	065b      	lsls	r3, r3, #25
 800c91c:	f53f af2c 	bmi.w	800c778 <_svfiprintf_r+0x28>
 800c920:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c922:	b01d      	add	sp, #116	; 0x74
 800c924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c928:	ab03      	add	r3, sp, #12
 800c92a:	9300      	str	r3, [sp, #0]
 800c92c:	462a      	mov	r2, r5
 800c92e:	4b06      	ldr	r3, [pc, #24]	; (800c948 <_svfiprintf_r+0x1f8>)
 800c930:	a904      	add	r1, sp, #16
 800c932:	4638      	mov	r0, r7
 800c934:	f000 f87a 	bl	800ca2c <_printf_i>
 800c938:	e7eb      	b.n	800c912 <_svfiprintf_r+0x1c2>
 800c93a:	bf00      	nop
 800c93c:	0800cffc 	.word	0x0800cffc
 800c940:	0800d006 	.word	0x0800d006
 800c944:	00000000 	.word	0x00000000
 800c948:	0800c699 	.word	0x0800c699
 800c94c:	0800d002 	.word	0x0800d002

0800c950 <_printf_common>:
 800c950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c954:	4616      	mov	r6, r2
 800c956:	4699      	mov	r9, r3
 800c958:	688a      	ldr	r2, [r1, #8]
 800c95a:	690b      	ldr	r3, [r1, #16]
 800c95c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c960:	4293      	cmp	r3, r2
 800c962:	bfb8      	it	lt
 800c964:	4613      	movlt	r3, r2
 800c966:	6033      	str	r3, [r6, #0]
 800c968:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c96c:	4607      	mov	r7, r0
 800c96e:	460c      	mov	r4, r1
 800c970:	b10a      	cbz	r2, 800c976 <_printf_common+0x26>
 800c972:	3301      	adds	r3, #1
 800c974:	6033      	str	r3, [r6, #0]
 800c976:	6823      	ldr	r3, [r4, #0]
 800c978:	0699      	lsls	r1, r3, #26
 800c97a:	bf42      	ittt	mi
 800c97c:	6833      	ldrmi	r3, [r6, #0]
 800c97e:	3302      	addmi	r3, #2
 800c980:	6033      	strmi	r3, [r6, #0]
 800c982:	6825      	ldr	r5, [r4, #0]
 800c984:	f015 0506 	ands.w	r5, r5, #6
 800c988:	d106      	bne.n	800c998 <_printf_common+0x48>
 800c98a:	f104 0a19 	add.w	sl, r4, #25
 800c98e:	68e3      	ldr	r3, [r4, #12]
 800c990:	6832      	ldr	r2, [r6, #0]
 800c992:	1a9b      	subs	r3, r3, r2
 800c994:	42ab      	cmp	r3, r5
 800c996:	dc26      	bgt.n	800c9e6 <_printf_common+0x96>
 800c998:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c99c:	1e13      	subs	r3, r2, #0
 800c99e:	6822      	ldr	r2, [r4, #0]
 800c9a0:	bf18      	it	ne
 800c9a2:	2301      	movne	r3, #1
 800c9a4:	0692      	lsls	r2, r2, #26
 800c9a6:	d42b      	bmi.n	800ca00 <_printf_common+0xb0>
 800c9a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c9ac:	4649      	mov	r1, r9
 800c9ae:	4638      	mov	r0, r7
 800c9b0:	47c0      	blx	r8
 800c9b2:	3001      	adds	r0, #1
 800c9b4:	d01e      	beq.n	800c9f4 <_printf_common+0xa4>
 800c9b6:	6823      	ldr	r3, [r4, #0]
 800c9b8:	68e5      	ldr	r5, [r4, #12]
 800c9ba:	6832      	ldr	r2, [r6, #0]
 800c9bc:	f003 0306 	and.w	r3, r3, #6
 800c9c0:	2b04      	cmp	r3, #4
 800c9c2:	bf08      	it	eq
 800c9c4:	1aad      	subeq	r5, r5, r2
 800c9c6:	68a3      	ldr	r3, [r4, #8]
 800c9c8:	6922      	ldr	r2, [r4, #16]
 800c9ca:	bf0c      	ite	eq
 800c9cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c9d0:	2500      	movne	r5, #0
 800c9d2:	4293      	cmp	r3, r2
 800c9d4:	bfc4      	itt	gt
 800c9d6:	1a9b      	subgt	r3, r3, r2
 800c9d8:	18ed      	addgt	r5, r5, r3
 800c9da:	2600      	movs	r6, #0
 800c9dc:	341a      	adds	r4, #26
 800c9de:	42b5      	cmp	r5, r6
 800c9e0:	d11a      	bne.n	800ca18 <_printf_common+0xc8>
 800c9e2:	2000      	movs	r0, #0
 800c9e4:	e008      	b.n	800c9f8 <_printf_common+0xa8>
 800c9e6:	2301      	movs	r3, #1
 800c9e8:	4652      	mov	r2, sl
 800c9ea:	4649      	mov	r1, r9
 800c9ec:	4638      	mov	r0, r7
 800c9ee:	47c0      	blx	r8
 800c9f0:	3001      	adds	r0, #1
 800c9f2:	d103      	bne.n	800c9fc <_printf_common+0xac>
 800c9f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c9f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9fc:	3501      	adds	r5, #1
 800c9fe:	e7c6      	b.n	800c98e <_printf_common+0x3e>
 800ca00:	18e1      	adds	r1, r4, r3
 800ca02:	1c5a      	adds	r2, r3, #1
 800ca04:	2030      	movs	r0, #48	; 0x30
 800ca06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ca0a:	4422      	add	r2, r4
 800ca0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ca10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ca14:	3302      	adds	r3, #2
 800ca16:	e7c7      	b.n	800c9a8 <_printf_common+0x58>
 800ca18:	2301      	movs	r3, #1
 800ca1a:	4622      	mov	r2, r4
 800ca1c:	4649      	mov	r1, r9
 800ca1e:	4638      	mov	r0, r7
 800ca20:	47c0      	blx	r8
 800ca22:	3001      	adds	r0, #1
 800ca24:	d0e6      	beq.n	800c9f4 <_printf_common+0xa4>
 800ca26:	3601      	adds	r6, #1
 800ca28:	e7d9      	b.n	800c9de <_printf_common+0x8e>
	...

0800ca2c <_printf_i>:
 800ca2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca30:	7e0f      	ldrb	r7, [r1, #24]
 800ca32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ca34:	2f78      	cmp	r7, #120	; 0x78
 800ca36:	4691      	mov	r9, r2
 800ca38:	4680      	mov	r8, r0
 800ca3a:	460c      	mov	r4, r1
 800ca3c:	469a      	mov	sl, r3
 800ca3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ca42:	d807      	bhi.n	800ca54 <_printf_i+0x28>
 800ca44:	2f62      	cmp	r7, #98	; 0x62
 800ca46:	d80a      	bhi.n	800ca5e <_printf_i+0x32>
 800ca48:	2f00      	cmp	r7, #0
 800ca4a:	f000 80d8 	beq.w	800cbfe <_printf_i+0x1d2>
 800ca4e:	2f58      	cmp	r7, #88	; 0x58
 800ca50:	f000 80a3 	beq.w	800cb9a <_printf_i+0x16e>
 800ca54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ca5c:	e03a      	b.n	800cad4 <_printf_i+0xa8>
 800ca5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ca62:	2b15      	cmp	r3, #21
 800ca64:	d8f6      	bhi.n	800ca54 <_printf_i+0x28>
 800ca66:	a101      	add	r1, pc, #4	; (adr r1, 800ca6c <_printf_i+0x40>)
 800ca68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ca6c:	0800cac5 	.word	0x0800cac5
 800ca70:	0800cad9 	.word	0x0800cad9
 800ca74:	0800ca55 	.word	0x0800ca55
 800ca78:	0800ca55 	.word	0x0800ca55
 800ca7c:	0800ca55 	.word	0x0800ca55
 800ca80:	0800ca55 	.word	0x0800ca55
 800ca84:	0800cad9 	.word	0x0800cad9
 800ca88:	0800ca55 	.word	0x0800ca55
 800ca8c:	0800ca55 	.word	0x0800ca55
 800ca90:	0800ca55 	.word	0x0800ca55
 800ca94:	0800ca55 	.word	0x0800ca55
 800ca98:	0800cbe5 	.word	0x0800cbe5
 800ca9c:	0800cb09 	.word	0x0800cb09
 800caa0:	0800cbc7 	.word	0x0800cbc7
 800caa4:	0800ca55 	.word	0x0800ca55
 800caa8:	0800ca55 	.word	0x0800ca55
 800caac:	0800cc07 	.word	0x0800cc07
 800cab0:	0800ca55 	.word	0x0800ca55
 800cab4:	0800cb09 	.word	0x0800cb09
 800cab8:	0800ca55 	.word	0x0800ca55
 800cabc:	0800ca55 	.word	0x0800ca55
 800cac0:	0800cbcf 	.word	0x0800cbcf
 800cac4:	682b      	ldr	r3, [r5, #0]
 800cac6:	1d1a      	adds	r2, r3, #4
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	602a      	str	r2, [r5, #0]
 800cacc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cad0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cad4:	2301      	movs	r3, #1
 800cad6:	e0a3      	b.n	800cc20 <_printf_i+0x1f4>
 800cad8:	6820      	ldr	r0, [r4, #0]
 800cada:	6829      	ldr	r1, [r5, #0]
 800cadc:	0606      	lsls	r6, r0, #24
 800cade:	f101 0304 	add.w	r3, r1, #4
 800cae2:	d50a      	bpl.n	800cafa <_printf_i+0xce>
 800cae4:	680e      	ldr	r6, [r1, #0]
 800cae6:	602b      	str	r3, [r5, #0]
 800cae8:	2e00      	cmp	r6, #0
 800caea:	da03      	bge.n	800caf4 <_printf_i+0xc8>
 800caec:	232d      	movs	r3, #45	; 0x2d
 800caee:	4276      	negs	r6, r6
 800caf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800caf4:	485e      	ldr	r0, [pc, #376]	; (800cc70 <_printf_i+0x244>)
 800caf6:	230a      	movs	r3, #10
 800caf8:	e019      	b.n	800cb2e <_printf_i+0x102>
 800cafa:	680e      	ldr	r6, [r1, #0]
 800cafc:	602b      	str	r3, [r5, #0]
 800cafe:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cb02:	bf18      	it	ne
 800cb04:	b236      	sxthne	r6, r6
 800cb06:	e7ef      	b.n	800cae8 <_printf_i+0xbc>
 800cb08:	682b      	ldr	r3, [r5, #0]
 800cb0a:	6820      	ldr	r0, [r4, #0]
 800cb0c:	1d19      	adds	r1, r3, #4
 800cb0e:	6029      	str	r1, [r5, #0]
 800cb10:	0601      	lsls	r1, r0, #24
 800cb12:	d501      	bpl.n	800cb18 <_printf_i+0xec>
 800cb14:	681e      	ldr	r6, [r3, #0]
 800cb16:	e002      	b.n	800cb1e <_printf_i+0xf2>
 800cb18:	0646      	lsls	r6, r0, #25
 800cb1a:	d5fb      	bpl.n	800cb14 <_printf_i+0xe8>
 800cb1c:	881e      	ldrh	r6, [r3, #0]
 800cb1e:	4854      	ldr	r0, [pc, #336]	; (800cc70 <_printf_i+0x244>)
 800cb20:	2f6f      	cmp	r7, #111	; 0x6f
 800cb22:	bf0c      	ite	eq
 800cb24:	2308      	moveq	r3, #8
 800cb26:	230a      	movne	r3, #10
 800cb28:	2100      	movs	r1, #0
 800cb2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cb2e:	6865      	ldr	r5, [r4, #4]
 800cb30:	60a5      	str	r5, [r4, #8]
 800cb32:	2d00      	cmp	r5, #0
 800cb34:	bfa2      	ittt	ge
 800cb36:	6821      	ldrge	r1, [r4, #0]
 800cb38:	f021 0104 	bicge.w	r1, r1, #4
 800cb3c:	6021      	strge	r1, [r4, #0]
 800cb3e:	b90e      	cbnz	r6, 800cb44 <_printf_i+0x118>
 800cb40:	2d00      	cmp	r5, #0
 800cb42:	d04d      	beq.n	800cbe0 <_printf_i+0x1b4>
 800cb44:	4615      	mov	r5, r2
 800cb46:	fbb6 f1f3 	udiv	r1, r6, r3
 800cb4a:	fb03 6711 	mls	r7, r3, r1, r6
 800cb4e:	5dc7      	ldrb	r7, [r0, r7]
 800cb50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cb54:	4637      	mov	r7, r6
 800cb56:	42bb      	cmp	r3, r7
 800cb58:	460e      	mov	r6, r1
 800cb5a:	d9f4      	bls.n	800cb46 <_printf_i+0x11a>
 800cb5c:	2b08      	cmp	r3, #8
 800cb5e:	d10b      	bne.n	800cb78 <_printf_i+0x14c>
 800cb60:	6823      	ldr	r3, [r4, #0]
 800cb62:	07de      	lsls	r6, r3, #31
 800cb64:	d508      	bpl.n	800cb78 <_printf_i+0x14c>
 800cb66:	6923      	ldr	r3, [r4, #16]
 800cb68:	6861      	ldr	r1, [r4, #4]
 800cb6a:	4299      	cmp	r1, r3
 800cb6c:	bfde      	ittt	le
 800cb6e:	2330      	movle	r3, #48	; 0x30
 800cb70:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cb74:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cb78:	1b52      	subs	r2, r2, r5
 800cb7a:	6122      	str	r2, [r4, #16]
 800cb7c:	f8cd a000 	str.w	sl, [sp]
 800cb80:	464b      	mov	r3, r9
 800cb82:	aa03      	add	r2, sp, #12
 800cb84:	4621      	mov	r1, r4
 800cb86:	4640      	mov	r0, r8
 800cb88:	f7ff fee2 	bl	800c950 <_printf_common>
 800cb8c:	3001      	adds	r0, #1
 800cb8e:	d14c      	bne.n	800cc2a <_printf_i+0x1fe>
 800cb90:	f04f 30ff 	mov.w	r0, #4294967295
 800cb94:	b004      	add	sp, #16
 800cb96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb9a:	4835      	ldr	r0, [pc, #212]	; (800cc70 <_printf_i+0x244>)
 800cb9c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cba0:	6829      	ldr	r1, [r5, #0]
 800cba2:	6823      	ldr	r3, [r4, #0]
 800cba4:	f851 6b04 	ldr.w	r6, [r1], #4
 800cba8:	6029      	str	r1, [r5, #0]
 800cbaa:	061d      	lsls	r5, r3, #24
 800cbac:	d514      	bpl.n	800cbd8 <_printf_i+0x1ac>
 800cbae:	07df      	lsls	r7, r3, #31
 800cbb0:	bf44      	itt	mi
 800cbb2:	f043 0320 	orrmi.w	r3, r3, #32
 800cbb6:	6023      	strmi	r3, [r4, #0]
 800cbb8:	b91e      	cbnz	r6, 800cbc2 <_printf_i+0x196>
 800cbba:	6823      	ldr	r3, [r4, #0]
 800cbbc:	f023 0320 	bic.w	r3, r3, #32
 800cbc0:	6023      	str	r3, [r4, #0]
 800cbc2:	2310      	movs	r3, #16
 800cbc4:	e7b0      	b.n	800cb28 <_printf_i+0xfc>
 800cbc6:	6823      	ldr	r3, [r4, #0]
 800cbc8:	f043 0320 	orr.w	r3, r3, #32
 800cbcc:	6023      	str	r3, [r4, #0]
 800cbce:	2378      	movs	r3, #120	; 0x78
 800cbd0:	4828      	ldr	r0, [pc, #160]	; (800cc74 <_printf_i+0x248>)
 800cbd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cbd6:	e7e3      	b.n	800cba0 <_printf_i+0x174>
 800cbd8:	0659      	lsls	r1, r3, #25
 800cbda:	bf48      	it	mi
 800cbdc:	b2b6      	uxthmi	r6, r6
 800cbde:	e7e6      	b.n	800cbae <_printf_i+0x182>
 800cbe0:	4615      	mov	r5, r2
 800cbe2:	e7bb      	b.n	800cb5c <_printf_i+0x130>
 800cbe4:	682b      	ldr	r3, [r5, #0]
 800cbe6:	6826      	ldr	r6, [r4, #0]
 800cbe8:	6961      	ldr	r1, [r4, #20]
 800cbea:	1d18      	adds	r0, r3, #4
 800cbec:	6028      	str	r0, [r5, #0]
 800cbee:	0635      	lsls	r5, r6, #24
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	d501      	bpl.n	800cbf8 <_printf_i+0x1cc>
 800cbf4:	6019      	str	r1, [r3, #0]
 800cbf6:	e002      	b.n	800cbfe <_printf_i+0x1d2>
 800cbf8:	0670      	lsls	r0, r6, #25
 800cbfa:	d5fb      	bpl.n	800cbf4 <_printf_i+0x1c8>
 800cbfc:	8019      	strh	r1, [r3, #0]
 800cbfe:	2300      	movs	r3, #0
 800cc00:	6123      	str	r3, [r4, #16]
 800cc02:	4615      	mov	r5, r2
 800cc04:	e7ba      	b.n	800cb7c <_printf_i+0x150>
 800cc06:	682b      	ldr	r3, [r5, #0]
 800cc08:	1d1a      	adds	r2, r3, #4
 800cc0a:	602a      	str	r2, [r5, #0]
 800cc0c:	681d      	ldr	r5, [r3, #0]
 800cc0e:	6862      	ldr	r2, [r4, #4]
 800cc10:	2100      	movs	r1, #0
 800cc12:	4628      	mov	r0, r5
 800cc14:	f7f3 faec 	bl	80001f0 <memchr>
 800cc18:	b108      	cbz	r0, 800cc1e <_printf_i+0x1f2>
 800cc1a:	1b40      	subs	r0, r0, r5
 800cc1c:	6060      	str	r0, [r4, #4]
 800cc1e:	6863      	ldr	r3, [r4, #4]
 800cc20:	6123      	str	r3, [r4, #16]
 800cc22:	2300      	movs	r3, #0
 800cc24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc28:	e7a8      	b.n	800cb7c <_printf_i+0x150>
 800cc2a:	6923      	ldr	r3, [r4, #16]
 800cc2c:	462a      	mov	r2, r5
 800cc2e:	4649      	mov	r1, r9
 800cc30:	4640      	mov	r0, r8
 800cc32:	47d0      	blx	sl
 800cc34:	3001      	adds	r0, #1
 800cc36:	d0ab      	beq.n	800cb90 <_printf_i+0x164>
 800cc38:	6823      	ldr	r3, [r4, #0]
 800cc3a:	079b      	lsls	r3, r3, #30
 800cc3c:	d413      	bmi.n	800cc66 <_printf_i+0x23a>
 800cc3e:	68e0      	ldr	r0, [r4, #12]
 800cc40:	9b03      	ldr	r3, [sp, #12]
 800cc42:	4298      	cmp	r0, r3
 800cc44:	bfb8      	it	lt
 800cc46:	4618      	movlt	r0, r3
 800cc48:	e7a4      	b.n	800cb94 <_printf_i+0x168>
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	4632      	mov	r2, r6
 800cc4e:	4649      	mov	r1, r9
 800cc50:	4640      	mov	r0, r8
 800cc52:	47d0      	blx	sl
 800cc54:	3001      	adds	r0, #1
 800cc56:	d09b      	beq.n	800cb90 <_printf_i+0x164>
 800cc58:	3501      	adds	r5, #1
 800cc5a:	68e3      	ldr	r3, [r4, #12]
 800cc5c:	9903      	ldr	r1, [sp, #12]
 800cc5e:	1a5b      	subs	r3, r3, r1
 800cc60:	42ab      	cmp	r3, r5
 800cc62:	dcf2      	bgt.n	800cc4a <_printf_i+0x21e>
 800cc64:	e7eb      	b.n	800cc3e <_printf_i+0x212>
 800cc66:	2500      	movs	r5, #0
 800cc68:	f104 0619 	add.w	r6, r4, #25
 800cc6c:	e7f5      	b.n	800cc5a <_printf_i+0x22e>
 800cc6e:	bf00      	nop
 800cc70:	0800d00d 	.word	0x0800d00d
 800cc74:	0800d01e 	.word	0x0800d01e

0800cc78 <_read_r>:
 800cc78:	b538      	push	{r3, r4, r5, lr}
 800cc7a:	4d07      	ldr	r5, [pc, #28]	; (800cc98 <_read_r+0x20>)
 800cc7c:	4604      	mov	r4, r0
 800cc7e:	4608      	mov	r0, r1
 800cc80:	4611      	mov	r1, r2
 800cc82:	2200      	movs	r2, #0
 800cc84:	602a      	str	r2, [r5, #0]
 800cc86:	461a      	mov	r2, r3
 800cc88:	f7f5 fd9e 	bl	80027c8 <_read>
 800cc8c:	1c43      	adds	r3, r0, #1
 800cc8e:	d102      	bne.n	800cc96 <_read_r+0x1e>
 800cc90:	682b      	ldr	r3, [r5, #0]
 800cc92:	b103      	cbz	r3, 800cc96 <_read_r+0x1e>
 800cc94:	6023      	str	r3, [r4, #0]
 800cc96:	bd38      	pop	{r3, r4, r5, pc}
 800cc98:	200056cc 	.word	0x200056cc

0800cc9c <_fstat_r>:
 800cc9c:	b538      	push	{r3, r4, r5, lr}
 800cc9e:	4d07      	ldr	r5, [pc, #28]	; (800ccbc <_fstat_r+0x20>)
 800cca0:	2300      	movs	r3, #0
 800cca2:	4604      	mov	r4, r0
 800cca4:	4608      	mov	r0, r1
 800cca6:	4611      	mov	r1, r2
 800cca8:	602b      	str	r3, [r5, #0]
 800ccaa:	f7f5 fdd2 	bl	8002852 <_fstat>
 800ccae:	1c43      	adds	r3, r0, #1
 800ccb0:	d102      	bne.n	800ccb8 <_fstat_r+0x1c>
 800ccb2:	682b      	ldr	r3, [r5, #0]
 800ccb4:	b103      	cbz	r3, 800ccb8 <_fstat_r+0x1c>
 800ccb6:	6023      	str	r3, [r4, #0]
 800ccb8:	bd38      	pop	{r3, r4, r5, pc}
 800ccba:	bf00      	nop
 800ccbc:	200056cc 	.word	0x200056cc

0800ccc0 <_isatty_r>:
 800ccc0:	b538      	push	{r3, r4, r5, lr}
 800ccc2:	4d06      	ldr	r5, [pc, #24]	; (800ccdc <_isatty_r+0x1c>)
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	4604      	mov	r4, r0
 800ccc8:	4608      	mov	r0, r1
 800ccca:	602b      	str	r3, [r5, #0]
 800cccc:	f7f5 fdd1 	bl	8002872 <_isatty>
 800ccd0:	1c43      	adds	r3, r0, #1
 800ccd2:	d102      	bne.n	800ccda <_isatty_r+0x1a>
 800ccd4:	682b      	ldr	r3, [r5, #0]
 800ccd6:	b103      	cbz	r3, 800ccda <_isatty_r+0x1a>
 800ccd8:	6023      	str	r3, [r4, #0]
 800ccda:	bd38      	pop	{r3, r4, r5, pc}
 800ccdc:	200056cc 	.word	0x200056cc

0800cce0 <memmove>:
 800cce0:	4288      	cmp	r0, r1
 800cce2:	b510      	push	{r4, lr}
 800cce4:	eb01 0402 	add.w	r4, r1, r2
 800cce8:	d902      	bls.n	800ccf0 <memmove+0x10>
 800ccea:	4284      	cmp	r4, r0
 800ccec:	4623      	mov	r3, r4
 800ccee:	d807      	bhi.n	800cd00 <memmove+0x20>
 800ccf0:	1e43      	subs	r3, r0, #1
 800ccf2:	42a1      	cmp	r1, r4
 800ccf4:	d008      	beq.n	800cd08 <memmove+0x28>
 800ccf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ccfa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ccfe:	e7f8      	b.n	800ccf2 <memmove+0x12>
 800cd00:	4402      	add	r2, r0
 800cd02:	4601      	mov	r1, r0
 800cd04:	428a      	cmp	r2, r1
 800cd06:	d100      	bne.n	800cd0a <memmove+0x2a>
 800cd08:	bd10      	pop	{r4, pc}
 800cd0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cd0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cd12:	e7f7      	b.n	800cd04 <memmove+0x24>

0800cd14 <_realloc_r>:
 800cd14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd18:	4680      	mov	r8, r0
 800cd1a:	4614      	mov	r4, r2
 800cd1c:	460e      	mov	r6, r1
 800cd1e:	b921      	cbnz	r1, 800cd2a <_realloc_r+0x16>
 800cd20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd24:	4611      	mov	r1, r2
 800cd26:	f7ff b87b 	b.w	800be20 <_malloc_r>
 800cd2a:	b92a      	cbnz	r2, 800cd38 <_realloc_r+0x24>
 800cd2c:	f7ff fc68 	bl	800c600 <_free_r>
 800cd30:	4625      	mov	r5, r4
 800cd32:	4628      	mov	r0, r5
 800cd34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd38:	f000 f81b 	bl	800cd72 <_malloc_usable_size_r>
 800cd3c:	4284      	cmp	r4, r0
 800cd3e:	4607      	mov	r7, r0
 800cd40:	d802      	bhi.n	800cd48 <_realloc_r+0x34>
 800cd42:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cd46:	d812      	bhi.n	800cd6e <_realloc_r+0x5a>
 800cd48:	4621      	mov	r1, r4
 800cd4a:	4640      	mov	r0, r8
 800cd4c:	f7ff f868 	bl	800be20 <_malloc_r>
 800cd50:	4605      	mov	r5, r0
 800cd52:	2800      	cmp	r0, #0
 800cd54:	d0ed      	beq.n	800cd32 <_realloc_r+0x1e>
 800cd56:	42bc      	cmp	r4, r7
 800cd58:	4622      	mov	r2, r4
 800cd5a:	4631      	mov	r1, r6
 800cd5c:	bf28      	it	cs
 800cd5e:	463a      	movcs	r2, r7
 800cd60:	f7ff f827 	bl	800bdb2 <memcpy>
 800cd64:	4631      	mov	r1, r6
 800cd66:	4640      	mov	r0, r8
 800cd68:	f7ff fc4a 	bl	800c600 <_free_r>
 800cd6c:	e7e1      	b.n	800cd32 <_realloc_r+0x1e>
 800cd6e:	4635      	mov	r5, r6
 800cd70:	e7df      	b.n	800cd32 <_realloc_r+0x1e>

0800cd72 <_malloc_usable_size_r>:
 800cd72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd76:	1f18      	subs	r0, r3, #4
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	bfbc      	itt	lt
 800cd7c:	580b      	ldrlt	r3, [r1, r0]
 800cd7e:	18c0      	addlt	r0, r0, r3
 800cd80:	4770      	bx	lr
	...

0800cd84 <_init>:
 800cd84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd86:	bf00      	nop
 800cd88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd8a:	bc08      	pop	{r3}
 800cd8c:	469e      	mov	lr, r3
 800cd8e:	4770      	bx	lr

0800cd90 <_fini>:
 800cd90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd92:	bf00      	nop
 800cd94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd96:	bc08      	pop	{r3}
 800cd98:	469e      	mov	lr, r3
 800cd9a:	4770      	bx	lr
